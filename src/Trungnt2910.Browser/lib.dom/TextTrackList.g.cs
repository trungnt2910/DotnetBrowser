// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class TextTrackList: EventTarget, global::System.Collections.Generic.IReadOnlyList<TextTrack?>
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Length
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.length");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<TextTrackList?, TrackEvent?, JsObject?>? OnAddTrack
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<TextTrackList?, TrackEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onaddtrack");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onaddtrack = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<TextTrackList?, Event?, JsObject?>? OnChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<TextTrackList?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<TextTrackList?, TrackEvent?, JsObject?>? OnRemoveTrack
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<TextTrackList?, TrackEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onremovetrack");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onremovetrack = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public TextTrack? GetTrackById(string? id) => global::Trungnt2910.Browser.WebAssemblyRuntime<TextTrack>.ValueOrNullFromJs($"{_jsThis}.getTrackById({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(id))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Runtime.CompilerServices.IndexerName("Indexer")]
    public TextTrack? this[double index]
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<TextTrack>.ValueOrNullFromJs($"{_jsThis}[{(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))}]");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}[{(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))}] = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TrackEvent?> WhenAddTrack
    {
        add
        {
            _handlersForWhenAddTrackOfTypeTrackEvent ??= new();
            if (_handlersForWhenAddTrackOfTypeTrackEvent.Count == 0) AddEventListener("addtrack", _DispatcherForWhenAddTrackOfTypeTrackEvent);
            _handlersForWhenAddTrackOfTypeTrackEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenAddTrackOfTypeTrackEvent != null)
            {
                _handlersForWhenAddTrackOfTypeTrackEvent.Remove(value);
                if (_handlersForWhenAddTrackOfTypeTrackEvent.Count == 0)
                {
                    RemoveEventListener("addtrack", _DispatcherForWhenAddTrackOfTypeTrackEvent);
                    _handlersForWhenAddTrackOfTypeTrackEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenAddTrack
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TrackEvent?>>? _handlersForWhenAddTrackOfTypeTrackEvent;
    private void _DispatcherForWhenAddTrackOfTypeTrackEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<TextTrackList>();
        foreach (var handler in _handlersForWhenAddTrackOfTypeTrackEvent!) handler?.Invoke(castedSender, args?.Cast<TrackEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Change
    {
        add => AddEventListener("change", value);
        remove => RemoveEventListener("change", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TrackEvent?> WhenRemoveTrack
    {
        add
        {
            _handlersForWhenRemoveTrackOfTypeTrackEvent ??= new();
            if (_handlersForWhenRemoveTrackOfTypeTrackEvent.Count == 0) AddEventListener("removetrack", _DispatcherForWhenRemoveTrackOfTypeTrackEvent);
            _handlersForWhenRemoveTrackOfTypeTrackEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenRemoveTrackOfTypeTrackEvent != null)
            {
                _handlersForWhenRemoveTrackOfTypeTrackEvent.Remove(value);
                if (_handlersForWhenRemoveTrackOfTypeTrackEvent.Count == 0)
                {
                    RemoveEventListener("removetrack", _DispatcherForWhenRemoveTrackOfTypeTrackEvent);
                    _handlersForWhenRemoveTrackOfTypeTrackEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenRemoveTrack
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TrackEvent?>>? _handlersForWhenRemoveTrackOfTypeTrackEvent;
    private void _DispatcherForWhenRemoveTrackOfTypeTrackEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<TextTrackList>();
        foreach (var handler in _handlersForWhenRemoveTrackOfTypeTrackEvent!) handler?.Invoke(castedSender, args?.Cast<TrackEvent>());
    }
    #endregion

    
    
    /// <inheritdoc/>
    public int Count => global::Trungnt2910.Browser.WebAssemblyRuntime.Int32FromJs($"{_jsThis}.length");
    
    
    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.IndexerName("Indexer")]
    public TextTrack? this[int index] => global::Trungnt2910.Browser.WebAssemblyRuntime<TextTrack>.ValueOrNullFromJs($"{_jsThis}[{(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))}]");
    
    
    /// <inheritdoc/>
    public global::System.Collections.Generic.IEnumerator<TextTrack?> GetEnumerator() { for (int i = 0; i < Count; ++i) yield return this[i]; }
    
    
    /// <inheritdoc/>
    global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
    
}
#pragma warning restore CS0108, CS8764, CS8766

