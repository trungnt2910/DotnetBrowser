// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
/// </summary>
[JsObject]
public partial class IDBKeyRange: JsObject
{
    
    /// <summary>
    /// Returns lower bound, or undefined if none.
    /// </summary>
    public JsObject? Lower
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsObject>.ValueOrNullFromJs($"{_jsThis}.lower");
    }
    
    
    /// <summary>
    /// Returns true if the lower open flag is set, and false otherwise.
    /// </summary>
    public bool? LowerOpen
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.lowerOpen");
    }
    
    
    /// <summary>
    /// Returns upper bound, or undefined if none.
    /// </summary>
    public JsObject? Upper
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsObject>.ValueOrNullFromJs($"{_jsThis}.upper");
    }
    
    
    /// <summary>
    /// Returns true if the upper open flag is set, and false otherwise.
    /// </summary>
    public bool? UpperOpen
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.upperOpen");
    }
    
    
    /// <summary>
    /// Returns true if key is included in the range, and false otherwise.
    /// </summary>
    public bool? Includes(JsObject? key) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.includes({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(key))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

