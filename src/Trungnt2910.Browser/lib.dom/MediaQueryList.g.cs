// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// Stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to true).
/// </summary>
[JsObject]
public partial class MediaQueryList: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Matches
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.matches");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Media
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.media");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaQueryList?, MediaQueryListEvent?, JsObject?>? OnChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaQueryList?, MediaQueryListEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void AddListener(JsFunc<MediaQueryList?, MediaQueryListEvent?, JsObject?>? callback) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void RemoveListener(JsFunc<MediaQueryList?, MediaQueryListEvent?, JsObject?>? callback) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MediaQueryListEvent?> Change
    {
        add
        {
            _handlersForChangeOfTypeMediaQueryListEvent ??= new();
            if (_handlersForChangeOfTypeMediaQueryListEvent.Count == 0) AddEventListener("change", _DispatcherForChangeOfTypeMediaQueryListEvent);
            _handlersForChangeOfTypeMediaQueryListEvent.Add(value);
        }
        remove
        {
            if (_handlersForChangeOfTypeMediaQueryListEvent != null)
            {
                _handlersForChangeOfTypeMediaQueryListEvent.Remove(value);
                if (_handlersForChangeOfTypeMediaQueryListEvent.Count == 0)
                {
                    RemoveEventListener("change", _DispatcherForChangeOfTypeMediaQueryListEvent);
                    _handlersForChangeOfTypeMediaQueryListEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Change
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MediaQueryListEvent?>>? _handlersForChangeOfTypeMediaQueryListEvent;
    private void _DispatcherForChangeOfTypeMediaQueryListEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<MediaQueryList>();
        foreach (var handler in _handlersForChangeOfTypeMediaQueryListEvent!) handler?.Invoke(castedSender, args?.Cast<MediaQueryListEvent>());
    }
    #endregion

    
}
#pragma warning restore CS0108, CS8764, CS8766

