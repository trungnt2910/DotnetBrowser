// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// Provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification.
/// </summary>
[JsObject]
public partial class MutationObserver: JsObject
{
    
    /// <summary>
    /// Stops observer from observing any mutations. Until the observe() method is used again, observer's callback will not be invoked.
    /// </summary>
    public void Disconnect() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.disconnect()");
    
    
    /// <summary>
    /// Instructs the user agent to observe a given target (a node) and report any mutations based on the criteria given by options (an object).
    /// The options argument allows for setting mutation observation options via object members.
    /// </summary>
    public void Observe(INode? target, MutationObserverInit? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.observe({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(target))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Empties the record queue and returns what was in there.
    /// </summary>
    public JsArray<MutationRecord>? TakeRecords() => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<MutationRecord>>.ValueOrNullFromJs($"{_jsThis}.takeRecords()");
    
}
#pragma warning restore CS0108, CS8764, CS8766

