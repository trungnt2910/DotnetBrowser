// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class ElementInternals: ARIAMixin
{
    
    /// <summary>
    /// Returns the form owner of internals's target element.
    /// </summary>
    public HTMLFormElement? Form
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLFormElement>.ValueOrNullFromJs($"{_jsThis}.form");
    }
    
    
    /// <summary>
    /// Returns a NodeList of all the label elements that internals's target element is associated with.
    /// </summary>
    public NodeList? Labels
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<NodeList>.ValueOrNullFromJs($"{_jsThis}.labels");
    }
    
    
    /// <summary>
    /// Returns the ShadowRoot for internals's target element, if the target element is a shadow host, or null otherwise.
    /// </summary>
    public ShadowRoot? ShadowRoot
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<ShadowRoot>.ValueOrNullFromJs($"{_jsThis}.shadowRoot");
    }
    
    
    /// <summary>
    /// Returns the error message that would be shown to the user if internals's target element was to be checked for validity.
    /// </summary>
    public string? ValidationMessage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.validationMessage");
    }
    
    
    /// <summary>
    /// Returns the ValidityState object for internals's target element.
    /// </summary>
    public ValidityState? Validity
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<ValidityState>.ValueOrNullFromJs($"{_jsThis}.validity");
    }
    
    
    /// <summary>
    /// Returns true if internals's target element will be validated when the form is submitted; false otherwise.
    /// </summary>
    public bool? WillValidate
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.willValidate");
    }
    
    
    /// <summary>
    /// Returns true if internals's target element has no validity problems; false otherwise. Fires an invalid event at the element in the latter case.
    /// </summary>
    public bool? CheckValidity() => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.checkValidity()");
    
    
    /// <summary>
    /// Returns true if internals's target element has no validity problems; otherwise, returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user.
    /// </summary>
    public bool? ReportValidity() => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.reportValidity()");
    
    
    /// <summary>
    /// Sets both the state and submission value of internals's target element to value.
    /// If value is null, the element won't participate in form submission.
    /// </summary>
    public void SetFormValue(Union<File, string, FormData>? value, Union<File, string, FormData>? state) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setFormValue({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(state))})");
    
    
    /// <summary>
    /// Marks internals's target element as suffering from the constraints indicated by the flags argument, and sets the element's validation message to message. If anchor is specified, the user agent might use it to indicate problems with the constraints of internals's target element when the form owner is validated interactively or reportValidity() is called.
    /// </summary>
    public void SetValidity(ValidityStateFlags? flags, string? message, IHTMLElement? anchor) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setValidity({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(flags))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(message))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(anchor))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

