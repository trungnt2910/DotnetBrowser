// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.
/// </summary>
// [JsObject]
public partial class DocumentFragment: Node, INonElementParentNode, IParentNode, IDocumentFragment
{
    
    /// <summary>
    /// Returns the node document. Returns null for documents.
    /// </summary>
    public Document? OwnerDocument
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Document>.ValueOrNullFromJs($"{_jsThis}.ownerDocument");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ChildElementCount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.childElementCount");
    }
    
    
    /// <summary>
    /// Returns the child elements.
    /// </summary>
    public HTMLCollection? Children
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollection>.ValueOrNullFromJs($"{_jsThis}.children");
    }
    
    
    /// <summary>
    /// Returns the first child that is an element, and null otherwise.
    /// </summary>
    public Element? FirstElementChild
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.firstElementChild");
    }
    
    
    /// <summary>
    /// Returns the last child that is an element, and null otherwise.
    /// </summary>
    public Element? LastElementChild
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.lastElementChild");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public HTMLElement? GetElementById(string? elementId) => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLElement>.ValueOrNullFromJs($"{_jsThis}.getElementById({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(elementId))})");
    
    
    /// <summary>
    /// Returns the first element within node's descendants whose ID is elementId.
    /// </summary>
    Element? INonElementParentNode.GetElementById(string? elementId) => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.getElementById({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(elementId))})");
    
    
    /// <summary>
    /// Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void Append(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.append({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void Prepend(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.prepend({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public E? QuerySelector<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] E>(string? selectors) where E: global::Trungnt2910.Browser.JsObject, IElement => global::Trungnt2910.Browser.WebAssemblyRuntime<E>.ValueOrNullFromJs($"{_jsThis}.querySelector({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public NodeListOf<E>? QuerySelectorAll<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] E>(string? selectors) where E: global::Trungnt2910.Browser.JsObject, IElement => global::Trungnt2910.Browser.WebAssemblyRuntime<NodeListOf<E>>.ValueOrNullFromJs($"{_jsThis}.querySelectorAll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void ReplaceChildren(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.replaceChildren({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

