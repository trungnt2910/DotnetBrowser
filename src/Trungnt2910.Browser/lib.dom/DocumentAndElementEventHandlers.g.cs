// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class DocumentAndElementEventHandlers: EventTarget, IDocumentAndElementEventHandlers
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>? OnCopy
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncopy");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncopy = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>? OnCut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncut");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncut = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>? OnPaste
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpaste");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpaste = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Copy
    {
        add
        {
            _handlersForCopyOfTypeClipboardEvent ??= new();
            if (_handlersForCopyOfTypeClipboardEvent.Count == 0) AddEventListener("copy", _DispatcherForCopyOfTypeClipboardEvent);
            _handlersForCopyOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForCopyOfTypeClipboardEvent != null)
            {
                _handlersForCopyOfTypeClipboardEvent.Remove(value);
                if (_handlersForCopyOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("copy", _DispatcherForCopyOfTypeClipboardEvent);
                    _handlersForCopyOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Copy
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForCopyOfTypeClipboardEvent;
    private void _DispatcherForCopyOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<DocumentAndElementEventHandlers>();
        foreach (var handler in _handlersForCopyOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Cut
    {
        add
        {
            _handlersForCutOfTypeClipboardEvent ??= new();
            if (_handlersForCutOfTypeClipboardEvent.Count == 0) AddEventListener("cut", _DispatcherForCutOfTypeClipboardEvent);
            _handlersForCutOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForCutOfTypeClipboardEvent != null)
            {
                _handlersForCutOfTypeClipboardEvent.Remove(value);
                if (_handlersForCutOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("cut", _DispatcherForCutOfTypeClipboardEvent);
                    _handlersForCutOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Cut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForCutOfTypeClipboardEvent;
    private void _DispatcherForCutOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<DocumentAndElementEventHandlers>();
        foreach (var handler in _handlersForCutOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Paste
    {
        add
        {
            _handlersForPasteOfTypeClipboardEvent ??= new();
            if (_handlersForPasteOfTypeClipboardEvent.Count == 0) AddEventListener("paste", _DispatcherForPasteOfTypeClipboardEvent);
            _handlersForPasteOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForPasteOfTypeClipboardEvent != null)
            {
                _handlersForPasteOfTypeClipboardEvent.Remove(value);
                if (_handlersForPasteOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("paste", _DispatcherForPasteOfTypeClipboardEvent);
                    _handlersForPasteOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Paste
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForPasteOfTypeClipboardEvent;
    private void _DispatcherForPasteOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<DocumentAndElementEventHandlers>();
        foreach (var handler in _handlersForPasteOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
}
#pragma warning restore CS0108, CS8764, CS8766

