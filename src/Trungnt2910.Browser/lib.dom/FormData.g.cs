// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
/// </summary>
[JsObject]
public partial class FormData: JsObject
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Append(string? name, Union<string, Blob>? value, string? fileName) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.append({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(fileName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Delete(string? name) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.delete({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Union<File, string>? Get(string? name) => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<File, string>>.ValueOrNullFromJs($"{_jsThis}.get({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<Union<File, string>>? GetAll(string? name) => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<Union<File, string>>>.ValueOrNullFromJs($"{_jsThis}.getAll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Has(string? name) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.has({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Set(string? name, Union<string, Blob>? value, string? fileName) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.set({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(fileName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ForEach(JsAction<Union<File, string>?, string?, FormData?>? callbackfn, JsObject? thisArg) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.forEach({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callbackfn))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(thisArg))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

