// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// This Web Speech API interface represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)
/// </summary>
[JsObject]
public partial class SpeechSynthesisUtterance: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Lang
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.lang");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.lang = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>? OnBoundary
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onboundary");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onboundary = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>? OnEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisErrorEvent?, JsObject?>? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisErrorEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>? OnMark
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmark");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmark = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>? OnPause
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpause");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpause = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>? Onresume
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onresume");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onresume = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>? OnStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SpeechSynthesisUtterance?, SpeechSynthesisEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Pitch
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.pitch");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.pitch = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Rate
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.rate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.rate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Text
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.text");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.text = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public SpeechSynthesisVoice? Voice
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<SpeechSynthesisVoice>.ValueOrNullFromJs($"{_jsThis}.voice");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.voice = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Volume
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.volume");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.volume = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SpeechSynthesisEvent?> Boundary
    {
        add
        {
            _handlersForBoundaryOfTypeSpeechSynthesisEvent ??= new();
            if (_handlersForBoundaryOfTypeSpeechSynthesisEvent.Count == 0) AddEventListener("boundary", _DispatcherForBoundaryOfTypeSpeechSynthesisEvent);
            _handlersForBoundaryOfTypeSpeechSynthesisEvent.Add(value);
        }
        remove
        {
            if (_handlersForBoundaryOfTypeSpeechSynthesisEvent != null)
            {
                _handlersForBoundaryOfTypeSpeechSynthesisEvent.Remove(value);
                if (_handlersForBoundaryOfTypeSpeechSynthesisEvent.Count == 0)
                {
                    RemoveEventListener("boundary", _DispatcherForBoundaryOfTypeSpeechSynthesisEvent);
                    _handlersForBoundaryOfTypeSpeechSynthesisEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Boundary
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SpeechSynthesisEvent?>>? _handlersForBoundaryOfTypeSpeechSynthesisEvent;
    private void _DispatcherForBoundaryOfTypeSpeechSynthesisEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SpeechSynthesisUtterance>();
        foreach (var handler in _handlersForBoundaryOfTypeSpeechSynthesisEvent!) handler?.Invoke(castedSender, args?.Cast<SpeechSynthesisEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SpeechSynthesisEvent?> End
    {
        add
        {
            _handlersForEndOfTypeSpeechSynthesisEvent ??= new();
            if (_handlersForEndOfTypeSpeechSynthesisEvent.Count == 0) AddEventListener("end", _DispatcherForEndOfTypeSpeechSynthesisEvent);
            _handlersForEndOfTypeSpeechSynthesisEvent.Add(value);
        }
        remove
        {
            if (_handlersForEndOfTypeSpeechSynthesisEvent != null)
            {
                _handlersForEndOfTypeSpeechSynthesisEvent.Remove(value);
                if (_handlersForEndOfTypeSpeechSynthesisEvent.Count == 0)
                {
                    RemoveEventListener("end", _DispatcherForEndOfTypeSpeechSynthesisEvent);
                    _handlersForEndOfTypeSpeechSynthesisEvent = null;
                }
            }
        }
    }
    #region Internal event management members for End
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SpeechSynthesisEvent?>>? _handlersForEndOfTypeSpeechSynthesisEvent;
    private void _DispatcherForEndOfTypeSpeechSynthesisEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SpeechSynthesisUtterance>();
        foreach (var handler in _handlersForEndOfTypeSpeechSynthesisEvent!) handler?.Invoke(castedSender, args?.Cast<SpeechSynthesisEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SpeechSynthesisErrorEvent?> Errored
    {
        add
        {
            _handlersForErroredOfTypeSpeechSynthesisErrorEvent ??= new();
            if (_handlersForErroredOfTypeSpeechSynthesisErrorEvent.Count == 0) AddEventListener("error", _DispatcherForErroredOfTypeSpeechSynthesisErrorEvent);
            _handlersForErroredOfTypeSpeechSynthesisErrorEvent.Add(value);
        }
        remove
        {
            if (_handlersForErroredOfTypeSpeechSynthesisErrorEvent != null)
            {
                _handlersForErroredOfTypeSpeechSynthesisErrorEvent.Remove(value);
                if (_handlersForErroredOfTypeSpeechSynthesisErrorEvent.Count == 0)
                {
                    RemoveEventListener("error", _DispatcherForErroredOfTypeSpeechSynthesisErrorEvent);
                    _handlersForErroredOfTypeSpeechSynthesisErrorEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Errored
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SpeechSynthesisErrorEvent?>>? _handlersForErroredOfTypeSpeechSynthesisErrorEvent;
    private void _DispatcherForErroredOfTypeSpeechSynthesisErrorEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SpeechSynthesisUtterance>();
        foreach (var handler in _handlersForErroredOfTypeSpeechSynthesisErrorEvent!) handler?.Invoke(castedSender, args?.Cast<SpeechSynthesisErrorEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SpeechSynthesisEvent?> Mark
    {
        add
        {
            _handlersForMarkOfTypeSpeechSynthesisEvent ??= new();
            if (_handlersForMarkOfTypeSpeechSynthesisEvent.Count == 0) AddEventListener("mark", _DispatcherForMarkOfTypeSpeechSynthesisEvent);
            _handlersForMarkOfTypeSpeechSynthesisEvent.Add(value);
        }
        remove
        {
            if (_handlersForMarkOfTypeSpeechSynthesisEvent != null)
            {
                _handlersForMarkOfTypeSpeechSynthesisEvent.Remove(value);
                if (_handlersForMarkOfTypeSpeechSynthesisEvent.Count == 0)
                {
                    RemoveEventListener("mark", _DispatcherForMarkOfTypeSpeechSynthesisEvent);
                    _handlersForMarkOfTypeSpeechSynthesisEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Mark
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SpeechSynthesisEvent?>>? _handlersForMarkOfTypeSpeechSynthesisEvent;
    private void _DispatcherForMarkOfTypeSpeechSynthesisEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SpeechSynthesisUtterance>();
        foreach (var handler in _handlersForMarkOfTypeSpeechSynthesisEvent!) handler?.Invoke(castedSender, args?.Cast<SpeechSynthesisEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SpeechSynthesisEvent?> WhenPaused
    {
        add
        {
            _handlersForWhenPausedOfTypeSpeechSynthesisEvent ??= new();
            if (_handlersForWhenPausedOfTypeSpeechSynthesisEvent.Count == 0) AddEventListener("pause", _DispatcherForWhenPausedOfTypeSpeechSynthesisEvent);
            _handlersForWhenPausedOfTypeSpeechSynthesisEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenPausedOfTypeSpeechSynthesisEvent != null)
            {
                _handlersForWhenPausedOfTypeSpeechSynthesisEvent.Remove(value);
                if (_handlersForWhenPausedOfTypeSpeechSynthesisEvent.Count == 0)
                {
                    RemoveEventListener("pause", _DispatcherForWhenPausedOfTypeSpeechSynthesisEvent);
                    _handlersForWhenPausedOfTypeSpeechSynthesisEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenPaused
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SpeechSynthesisEvent?>>? _handlersForWhenPausedOfTypeSpeechSynthesisEvent;
    private void _DispatcherForWhenPausedOfTypeSpeechSynthesisEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SpeechSynthesisUtterance>();
        foreach (var handler in _handlersForWhenPausedOfTypeSpeechSynthesisEvent!) handler?.Invoke(castedSender, args?.Cast<SpeechSynthesisEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SpeechSynthesisEvent?> Resumed
    {
        add
        {
            _handlersForResumedOfTypeSpeechSynthesisEvent ??= new();
            if (_handlersForResumedOfTypeSpeechSynthesisEvent.Count == 0) AddEventListener("resume", _DispatcherForResumedOfTypeSpeechSynthesisEvent);
            _handlersForResumedOfTypeSpeechSynthesisEvent.Add(value);
        }
        remove
        {
            if (_handlersForResumedOfTypeSpeechSynthesisEvent != null)
            {
                _handlersForResumedOfTypeSpeechSynthesisEvent.Remove(value);
                if (_handlersForResumedOfTypeSpeechSynthesisEvent.Count == 0)
                {
                    RemoveEventListener("resume", _DispatcherForResumedOfTypeSpeechSynthesisEvent);
                    _handlersForResumedOfTypeSpeechSynthesisEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Resumed
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SpeechSynthesisEvent?>>? _handlersForResumedOfTypeSpeechSynthesisEvent;
    private void _DispatcherForResumedOfTypeSpeechSynthesisEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SpeechSynthesisUtterance>();
        foreach (var handler in _handlersForResumedOfTypeSpeechSynthesisEvent!) handler?.Invoke(castedSender, args?.Cast<SpeechSynthesisEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SpeechSynthesisEvent?> Started
    {
        add
        {
            _handlersForStartedOfTypeSpeechSynthesisEvent ??= new();
            if (_handlersForStartedOfTypeSpeechSynthesisEvent.Count == 0) AddEventListener("start", _DispatcherForStartedOfTypeSpeechSynthesisEvent);
            _handlersForStartedOfTypeSpeechSynthesisEvent.Add(value);
        }
        remove
        {
            if (_handlersForStartedOfTypeSpeechSynthesisEvent != null)
            {
                _handlersForStartedOfTypeSpeechSynthesisEvent.Remove(value);
                if (_handlersForStartedOfTypeSpeechSynthesisEvent.Count == 0)
                {
                    RemoveEventListener("start", _DispatcherForStartedOfTypeSpeechSynthesisEvent);
                    _handlersForStartedOfTypeSpeechSynthesisEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Started
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SpeechSynthesisEvent?>>? _handlersForStartedOfTypeSpeechSynthesisEvent;
    private void _DispatcherForStartedOfTypeSpeechSynthesisEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SpeechSynthesisUtterance>();
        foreach (var handler in _handlersForStartedOfTypeSpeechSynthesisEvent!) handler?.Invoke(castedSender, args?.Cast<SpeechSynthesisEvent>());
    }
    #endregion

    
}
#pragma warning restore CS0108, CS8764, CS8766

