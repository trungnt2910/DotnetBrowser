// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A chunk of media to be passed into an HTMLMediaElement and played, via a MediaSourceÂ object. This can be made up of one or several media segments.
/// </summary>
[JsObject]
public partial class SourceBuffer: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? AppendWindowEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.appendWindowEnd");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.appendWindowEnd = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? AppendWindowStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.appendWindowStart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.appendWindowStart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public TimeRanges? Buffered
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<TimeRanges>.ValueOrNullFromJs($"{_jsThis}.buffered");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Mode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.mode");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.mode = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SourceBuffer?, Event?, JsObject?>? OnAbort
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SourceBuffer?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onabort");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onabort = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SourceBuffer?, Event?, JsObject?>? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SourceBuffer?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SourceBuffer?, Event?, JsObject?>? OnUpdate
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SourceBuffer?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onupdate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onupdate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SourceBuffer?, Event?, JsObject?>? OnUpdateEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SourceBuffer?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onupdateend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onupdateend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<SourceBuffer?, Event?, JsObject?>? OnUpdateStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<SourceBuffer?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onupdatestart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onupdatestart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TimestampOffset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.timestampOffset");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.timestampOffset = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Updating
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.updating");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Abort() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.abort()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AppendBuffer(Union<ArrayBufferView, ArrayBuffer>? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.appendBuffer({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ChangeType(string? type) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.changeType({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Remove(double? start, double? end) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.remove({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(start))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(end))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenAborted
    {
        add => AddEventListener("abort", value);
        remove => RemoveEventListener("abort", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Errored
    {
        add => AddEventListener("error", value);
        remove => RemoveEventListener("error", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Update
    {
        add => AddEventListener("update", value);
        remove => RemoveEventListener("update", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> UpdateEnd
    {
        add => AddEventListener("updateend", value);
        remove => RemoveEventListener("updateend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> UpdateStart
    {
        add => AddEventListener("updatestart", value);
        remove => RemoveEventListener("updatestart", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

