// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
/// </summary>
[JsObject]
public partial class MediaStreamTrack: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? ContentHint
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.contentHint");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.contentHint = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Enabled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.enabled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.enabled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Id
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.id");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Kind
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.kind");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Label
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.label");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Muted
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.muted");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaStreamTrack?, Event?, JsObject?>? OnEnded
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaStreamTrack?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onended");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onended = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaStreamTrack?, Event?, JsObject?>? OnMute
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaStreamTrack?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmute");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmute = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaStreamTrack?, Event?, JsObject?>? OnUnmute
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaStreamTrack?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onunmute");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onunmute = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? ReadyState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.readyState");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise? ApplyConstraints(MediaTrackConstraints? constraints) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise>.ValueOrNullFromJs($"{_jsThis}.applyConstraints({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(constraints))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public MediaStreamTrack? Clone() => global::Trungnt2910.Browser.WebAssemblyRuntime<MediaStreamTrack>.ValueOrNullFromJs($"{_jsThis}.clone()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public MediaTrackCapabilities? GetCapabilities() => global::Trungnt2910.Browser.WebAssemblyRuntime<MediaTrackCapabilities>.ValueOrNullFromJs($"{_jsThis}.getCapabilities()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public MediaTrackConstraints? GetConstraints() => global::Trungnt2910.Browser.WebAssemblyRuntime<MediaTrackConstraints>.ValueOrNullFromJs($"{_jsThis}.getConstraints()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public MediaTrackSettings? GetSettings() => global::Trungnt2910.Browser.WebAssemblyRuntime<MediaTrackSettings>.ValueOrNullFromJs($"{_jsThis}.getSettings()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Stop() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.stop()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenEnded
    {
        add => AddEventListener("ended", value);
        remove => RemoveEventListener("ended", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Mute
    {
        add => AddEventListener("mute", value);
        remove => RemoveEventListener("mute", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Unmute
    {
        add => AddEventListener("unmute", value);
        remove => RemoveEventListener("unmute", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

