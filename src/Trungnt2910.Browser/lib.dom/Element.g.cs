// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
/// </summary>
[JsObject]
public partial class Element: Node, IARIAMixin, IAnimatable, IChildNode, IHasInnerHTML, INonDocumentTypeChildNode, IParentNode, ISlottable, IElement
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public NamedNodeMap? Attributes
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<NamedNodeMap>.ValueOrNullFromJs($"{_jsThis}.attributes");
    }
    
    
    /// <summary>
    /// Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.
    /// </summary>
    public DOMTokenList? ClassList
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMTokenList>.ValueOrNullFromJs($"{_jsThis}.classList");
    }
    
    
    /// <summary>
    /// Returns the value of element's class content attribute. Can be set to change it.
    /// </summary>
    public string? ClassName
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.className");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.className = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ClientHeight
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.clientHeight");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ClientLeft
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.clientLeft");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ClientTop
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.clientTop");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ClientWidth
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.clientWidth");
    }
    
    
    /// <summary>
    /// Returns the value of element's id content attribute. Can be set to change it.
    /// </summary>
    public string? Id
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.id");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.id = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the local name.
    /// </summary>
    public string? LocalName
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.localName");
    }
    
    
    /// <summary>
    /// Returns the namespace.
    /// </summary>
    public string? NamespaceURI
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.namespaceURI");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Element?, Event?, JsObject?>? OnFullscreenChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Element?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onfullscreenchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onfullscreenchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Element?, Event?, JsObject?>? OnFullscreenError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Element?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onfullscreenerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onfullscreenerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? OuterHTML
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.outerHTML");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.outerHTML = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the node document. Returns null for documents.
    /// </summary>
    public Document? OwnerDocument
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Document>.ValueOrNullFromJs($"{_jsThis}.ownerDocument");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public DOMTokenList? Part
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMTokenList>.ValueOrNullFromJs($"{_jsThis}.part");
    }
    
    
    /// <summary>
    /// Returns the namespace prefix.
    /// </summary>
    public string? Prefix
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.prefix");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScrollHeight
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.scrollHeight");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScrollLeft
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.scrollLeft");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollLeft = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScrollTop
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.scrollTop");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollTop = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScrollWidth
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.scrollWidth");
    }
    
    
    /// <summary>
    /// Returns element's shadow root, if any, and if shadow root's mode is "open", and null otherwise.
    /// </summary>
    public ShadowRoot? ShadowRoot
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<ShadowRoot>.ValueOrNullFromJs($"{_jsThis}.shadowRoot");
    }
    
    
    /// <summary>
    /// Returns the value of element's slot content attribute. Can be set to change it.
    /// </summary>
    public string? Slot
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.slot");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.slot = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the HTML-uppercased qualified name.
    /// </summary>
    public string? TagName
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.tagName");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaAtomic
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaAtomic");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaAtomic = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaAutoComplete
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaAutoComplete");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaAutoComplete = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaBusy
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaBusy");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaBusy = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaChecked
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaChecked");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaChecked = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaColCount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaColCount");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaColCount = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaColIndex
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaColIndex");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaColIndex = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaColSpan
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaColSpan");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaColSpan = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaCurrent
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaCurrent");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaCurrent = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaDisabled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaDisabled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaDisabled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaExpanded
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaExpanded");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaExpanded = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaHasPopup
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaHasPopup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaHasPopup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaHidden
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaHidden");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaHidden = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaKeyShortcuts
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaKeyShortcuts");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaKeyShortcuts = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaLabel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaLabel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaLabel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaLevel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaLevel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaLevel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaLive
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaLive");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaLive = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaModal
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaModal");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaModal = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaMultiLine
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaMultiLine");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaMultiLine = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaMultiSelectable
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaMultiSelectable");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaMultiSelectable = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaOrientation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaOrientation");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaOrientation = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaPlaceholder
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaPlaceholder");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaPlaceholder = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaPosInSet
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaPosInSet");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaPosInSet = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaPressed
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaPressed");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaPressed = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaReadOnly
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaReadOnly");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaReadOnly = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaRequired
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaRequired");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaRequired = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaRoleDescription
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaRoleDescription");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaRoleDescription = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaRowCount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaRowCount");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaRowCount = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaRowIndex
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaRowIndex");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaRowIndex = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaRowSpan
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaRowSpan");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaRowSpan = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaSelected
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaSelected");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaSelected = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaSetSize
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaSetSize");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaSetSize = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaSort
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaSort");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaSort = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaValueMax
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaValueMax");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaValueMax = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaValueMin
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaValueMin");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaValueMin = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaValueNow
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaValueNow");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaValueNow = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? AriaValueText
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.ariaValueText");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ariaValueText = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? InnerHTML
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.innerHTML");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.innerHTML = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the first following sibling that is an element, and null otherwise.
    /// </summary>
    public Element? NextElementSibling
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.nextElementSibling");
    }
    
    
    /// <summary>
    /// Returns the first preceding sibling that is an element, and null otherwise.
    /// </summary>
    public Element? PreviousElementSibling
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.previousElementSibling");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ChildElementCount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.childElementCount");
    }
    
    
    /// <summary>
    /// Returns the child elements.
    /// </summary>
    public HTMLCollection? Children
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollection>.ValueOrNullFromJs($"{_jsThis}.children");
    }
    
    
    /// <summary>
    /// Returns the first child that is an element, and null otherwise.
    /// </summary>
    public Element? FirstElementChild
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.firstElementChild");
    }
    
    
    /// <summary>
    /// Returns the last child that is an element, and null otherwise.
    /// </summary>
    public Element? LastElementChild
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.lastElementChild");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public HTMLSlotElement? AssignedSlot
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLSlotElement>.ValueOrNullFromJs($"{_jsThis}.assignedSlot");
    }
    
    
    /// <summary>
    /// Creates a shadow root for element and returns it.
    /// </summary>
    public ShadowRoot? AttachShadow(ShadowRootInit? init) => global::Trungnt2910.Browser.WebAssemblyRuntime<ShadowRoot>.ValueOrNullFromJs($"{_jsThis}.attachShadow({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(init))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public E? Closest<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] E>(string? selectors) where E: global::Trungnt2910.Browser.JsObject, IElement => global::Trungnt2910.Browser.WebAssemblyRuntime<E>.ValueOrNullFromJs($"{_jsThis}.closest({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.
    /// </summary>
    public string? GetAttribute(string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.getAttribute({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.
    /// </summary>
    public string? GetAttributeNS(string? @namespace, string? localName) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.getAttributeNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(localName))})");
    
    
    /// <summary>
    /// Returns the qualified names of all element's attributes. Can contain duplicates.
    /// </summary>
    public JsArray<string>? GetAttributeNames() => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<string>>.ValueOrNullFromJs($"{_jsThis}.getAttributeNames()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Attr? GetAttributeNode(string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime<Attr>.ValueOrNullFromJs($"{_jsThis}.getAttributeNode({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Attr? GetAttributeNodeNS(string? @namespace, string? localName) => global::Trungnt2910.Browser.WebAssemblyRuntime<Attr>.ValueOrNullFromJs($"{_jsThis}.getAttributeNodeNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(localName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public DOMRect? GetBoundingClientRect() => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMRect>.ValueOrNullFromJs($"{_jsThis}.getBoundingClientRect()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public DOMRectList? GetClientRects() => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMRectList>.ValueOrNullFromJs($"{_jsThis}.getClientRects()");
    
    
    /// <summary>
    /// Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.
    /// </summary>
    public HTMLCollectionOf<Element>? GetElementsByClassName(string? classNames) => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<Element>>.ValueOrNullFromJs($"{_jsThis}.getElementsByClassName({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(classNames))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public HTMLCollectionOf<Element>? GetElementsByTagName(string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<Element>>.ValueOrNullFromJs($"{_jsThis}.getElementsByTagName({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Union<HTMLCollectionOf<HTMLElement>, HTMLCollectionOf<SVGElement>, HTMLCollectionOf<Element>>? GetElementsByTagNameNS(string? namespaceURI, string? localName) => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<HTMLCollectionOf<HTMLElement>, HTMLCollectionOf<SVGElement>, HTMLCollectionOf<Element>>>.ValueOrNullFromJs($"{_jsThis}.getElementsByTagNameNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(namespaceURI))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(localName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.
    /// </summary>
    public bool? HasAttribute(string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.hasAttribute({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// Returns true if element has an attribute whose namespace is namespace and local name is localName.
    /// </summary>
    public bool? HasAttributeNS(string? @namespace, string? localName) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.hasAttributeNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(localName))})");
    
    
    /// <summary>
    /// Returns true if element has attributes, and false otherwise.
    /// </summary>
    public bool? HasAttributes() => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.hasAttributes()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? HasPointerCapture(double? pointerId) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.hasPointerCapture({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(pointerId))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Element? InsertAdjacentElement(string? where, IElement? element) => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.insertAdjacentElement({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(where))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(element))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void InsertAdjacentHTML(string? position, string? text) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.insertAdjacentHTML({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(position))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(text))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void InsertAdjacentText(string? where, string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.insertAdjacentText({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(where))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// Returns true if matching selectors against element's root yields element, and false otherwise.
    /// </summary>
    public bool? Matches(string? selectors) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.matches({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ReleasePointerCapture(double? pointerId) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.releasePointerCapture({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(pointerId))})");
    
    
    /// <summary>
    /// Removes element's first attribute whose qualified name is qualifiedName.
    /// </summary>
    public void RemoveAttribute(string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeAttribute({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// Removes element's attribute whose namespace is namespace and local name is localName.
    /// </summary>
    public void RemoveAttributeNS(string? @namespace, string? localName) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeAttributeNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(localName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Attr? RemoveAttributeNode(Attr? attr) => global::Trungnt2910.Browser.WebAssemblyRuntime<Attr>.ValueOrNullFromJs($"{_jsThis}.removeAttributeNode({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(attr))})");
    
    
    /// <summary>
    /// Displays element fullscreen and resolves promise when done.
    /// When supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to "show", navigation simplicity is preferred over screen space, and if set to "hide", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value "auto" indicates no application preference.
    /// </summary>
    public Promise? RequestFullscreen(FullscreenOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise>.ValueOrNullFromJs($"{_jsThis}.requestFullscreen({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RequestPointerLock() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.requestPointerLock()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Scroll(ScrollToOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scroll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Scroll(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scroll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollBy(ScrollToOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollBy({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollBy(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollBy({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollIntoView(Union<bool, ScrollIntoViewOptions>? arg) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollIntoView({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(arg))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollTo(ScrollToOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollTo({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollTo(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollTo({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// Sets the value of element's first attribute whose qualified name is qualifiedName to value.
    /// </summary>
    public void SetAttribute(string? qualifiedName, string? value) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setAttribute({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))})");
    
    
    /// <summary>
    /// Sets the value of element's attribute whose namespace is namespace and local name is localName to value.
    /// </summary>
    public void SetAttributeNS(string? @namespace, string? qualifiedName, string? value) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setAttributeNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Attr? SetAttributeNode(Attr? attr) => global::Trungnt2910.Browser.WebAssemblyRuntime<Attr>.ValueOrNullFromJs($"{_jsThis}.setAttributeNode({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(attr))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Attr? SetAttributeNodeNS(Attr? attr) => global::Trungnt2910.Browser.WebAssemblyRuntime<Attr>.ValueOrNullFromJs($"{_jsThis}.setAttributeNodeNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(attr))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void SetPointerCapture(double? pointerId) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setPointerCapture({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(pointerId))})");
    
    
    /// <summary>
    /// If force is not given, "toggles" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.
    /// Returns true if qualifiedName is now present, and false otherwise.
    /// </summary>
    public bool? ToggleAttribute(string? qualifiedName, bool? force) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.toggleAttribute({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(force))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `matches`.")]
    public bool? WebkitMatchesSelector(string? selectors) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.webkitMatchesSelector({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Animation? Animate(Union<JsArray<Keyframe>, PropertyIndexedKeyframes>? keyframes, Union<double, KeyframeAnimationOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Animation>.ValueOrNullFromJs($"{_jsThis}.animate({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(keyframes))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<Animation>? GetAnimations(GetAnimationsOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<Animation>>.ValueOrNullFromJs($"{_jsThis}.getAnimations({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void After(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.after({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void Before(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.before({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// Removes node.
    /// </summary>
    public void Remove() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.remove()");
    
    
    /// <summary>
    /// Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void ReplaceWith(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.replaceWith({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void Append(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.append({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void Prepend(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.prepend({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public E? QuerySelector<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] E>(string? selectors) where E: global::Trungnt2910.Browser.JsObject, IElement => global::Trungnt2910.Browser.WebAssemblyRuntime<E>.ValueOrNullFromJs($"{_jsThis}.querySelector({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public NodeListOf<E>? QuerySelectorAll<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] E>(string? selectors) where E: global::Trungnt2910.Browser.JsObject, IElement => global::Trungnt2910.Browser.WebAssemblyRuntime<NodeListOf<E>>.ValueOrNullFromJs($"{_jsThis}.querySelectorAll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void ReplaceChildren(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.replaceChildren({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> FullscreenChange
    {
        add => AddEventListener("fullscreenchange", value);
        remove => RemoveEventListener("fullscreenchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> FullscreenError
    {
        add => AddEventListener("fullscreenerror", value);
        remove => RemoveEventListener("fullscreenerror", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

