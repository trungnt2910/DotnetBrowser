// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class RTCDataChannel: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? BinaryType
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.binaryType");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.binaryType = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BufferedAmount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.bufferedAmount");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BufferedAmountLowThreshold
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.bufferedAmountLowThreshold");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.bufferedAmountLowThreshold = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Id
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.id");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Label
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.label");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MaxPacketLifeTime
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.maxPacketLifeTime");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MaxRetransmits
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.maxRetransmits");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Negotiated
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.negotiated");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<RTCDataChannel?, Event?, JsObject?>? OnBufferedAmountLow
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<RTCDataChannel?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onbufferedamountlow");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onbufferedamountlow = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<RTCDataChannel?, Event?, JsObject?>? OnClose
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<RTCDataChannel?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclose");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclose = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<RTCDataChannel?, Event?, JsObject?>? OnClosing
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<RTCDataChannel?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclosing");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclosing = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<RTCDataChannel?, Event?, JsObject?>? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<RTCDataChannel?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<RTCDataChannel?, MessageEvent?, JsObject?>? OnMessage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<RTCDataChannel?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<RTCDataChannel?, Event?, JsObject?>? OnOpen
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<RTCDataChannel?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onopen");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onopen = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Ordered
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.ordered");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Protocol
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.protocol");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? ReadyState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.readyState");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Close() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.close()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Send(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.send({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Send(Blob? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.send({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Send(ArrayBuffer? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.send({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Send(ArrayBufferView? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.send({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> BufferedAmountLow
    {
        add => AddEventListener("bufferedamountlow", value);
        remove => RemoveEventListener("bufferedamountlow", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenClosed
    {
        add => AddEventListener("close", value);
        remove => RemoveEventListener("close", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Closing
    {
        add => AddEventListener("closing", value);
        remove => RemoveEventListener("closing", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Errored
    {
        add => AddEventListener("error", value);
        remove => RemoveEventListener("error", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> Message
    {
        add
        {
            _handlersForMessageOfTypeMessageEvent ??= new();
            if (_handlersForMessageOfTypeMessageEvent.Count == 0) AddEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
            _handlersForMessageOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageOfTypeMessageEvent != null)
            {
                _handlersForMessageOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
                    _handlersForMessageOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Message
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageOfTypeMessageEvent;
    private void _DispatcherForMessageOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<RTCDataChannel>();
        foreach (var handler in _handlersForMessageOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Open
    {
        add => AddEventListener("open", value);
        remove => RemoveEventListener("open", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

