// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.
/// </summary>
[JsObject]
public partial class HTMLOptionsCollection: HTMLCollectionOf<HTMLOptionElement>
{
    
    /// <summary>
    /// Returns the number of elements in the collection.
    /// When set to a smaller number, truncates the number of option elements in the corresponding container.
    /// When set to a greater number, adds new blank option elements to that container.
    /// </summary>
    public double? Length
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.length");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.length = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the index of the first selected item, if any, or âˆ’1 if there is no selected item.
    /// Can be set, to change the selection.
    /// </summary>
    public double? SelectedIndex
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.selectedIndex");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.selectedIndex = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Inserts element before the node given by before.
    /// The before argument can be a number, in which case element is inserted before the item with that number, or an element from the collection, in which case element is inserted before that element.
    /// If before is omitted, null, or a number out of range, then element will be added at the end of the list.
    /// This method will throw a "HierarchyRequestError" DOMException if element is an ancestor of the element into which it is to be inserted.
    /// </summary>
    public void Add(Union<HTMLOptionElement, HTMLOptGroupElement>? element, Union<IHTMLElement, double>? before) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.add({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(element))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(before))})");
    
    
    /// <summary>
    /// Removes the item with index index from the collection.
    /// </summary>
    public void Remove(double? index) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.remove({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

