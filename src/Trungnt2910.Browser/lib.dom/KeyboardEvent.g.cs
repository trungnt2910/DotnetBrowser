// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
/// </summary>
[JsObject]
public partial class KeyboardEvent: UIEvent
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? AltKey
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.altKey");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public double? CharCode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.charCode");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Code
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.code");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? CtrlKey
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.ctrlKey");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsComposing
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.isComposing");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Key
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.key");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public double? KeyCode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.keyCode");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Location
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.location");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? MetaKey
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.metaKey");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Repeat
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.repeat");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? ShiftKey
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.shiftKey");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DOM_KEY_LOCATION_LEFT
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.DOM_KEY_LOCATION_LEFT");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DOM_KEY_LOCATION_NUMPAD
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.DOM_KEY_LOCATION_NUMPAD");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DOM_KEY_LOCATION_RIGHT
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.DOM_KEY_LOCATION_RIGHT");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DOM_KEY_LOCATION_STANDARD
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.DOM_KEY_LOCATION_STANDARD");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? GetModifierState(string? keyArg) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.getModifierState({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(keyArg))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void InitKeyboardEvent(string? typeArg, bool? bubblesArg, bool? cancelableArg, Window? viewArg, string? keyArg, double? locationArg, bool? ctrlKey, bool? altKey, bool? shiftKey, bool? metaKey) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.initKeyboardEvent({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(typeArg))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(bubblesArg))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(cancelableArg))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(viewArg))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(keyArg))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(locationArg))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(ctrlKey))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(altKey))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(shiftKey))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(metaKey))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

