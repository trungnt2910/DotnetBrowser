// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// Corresponds to the &amp;lt;switch&amp;gt; element.
/// </summary>
[JsObject]
public partial class SVGSwitchElement: SVGGraphicsElement
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> FullscreenChange
    {
        add => AddEventListener("fullscreenchange", value);
        remove => RemoveEventListener("fullscreenchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> FullscreenError
    {
        add => AddEventListener("fullscreenerror", value);
        remove => RemoveEventListener("fullscreenerror", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Copy
    {
        add
        {
            _handlersForCopyOfTypeClipboardEvent ??= new();
            if (_handlersForCopyOfTypeClipboardEvent.Count == 0) AddEventListener("copy", _DispatcherForCopyOfTypeClipboardEvent);
            _handlersForCopyOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForCopyOfTypeClipboardEvent != null)
            {
                _handlersForCopyOfTypeClipboardEvent.Remove(value);
                if (_handlersForCopyOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("copy", _DispatcherForCopyOfTypeClipboardEvent);
                    _handlersForCopyOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Copy
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForCopyOfTypeClipboardEvent;
    private void _DispatcherForCopyOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForCopyOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Cut
    {
        add
        {
            _handlersForCutOfTypeClipboardEvent ??= new();
            if (_handlersForCutOfTypeClipboardEvent.Count == 0) AddEventListener("cut", _DispatcherForCutOfTypeClipboardEvent);
            _handlersForCutOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForCutOfTypeClipboardEvent != null)
            {
                _handlersForCutOfTypeClipboardEvent.Remove(value);
                if (_handlersForCutOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("cut", _DispatcherForCutOfTypeClipboardEvent);
                    _handlersForCutOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Cut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForCutOfTypeClipboardEvent;
    private void _DispatcherForCutOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForCutOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Paste
    {
        add
        {
            _handlersForPasteOfTypeClipboardEvent ??= new();
            if (_handlersForPasteOfTypeClipboardEvent.Count == 0) AddEventListener("paste", _DispatcherForPasteOfTypeClipboardEvent);
            _handlersForPasteOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForPasteOfTypeClipboardEvent != null)
            {
                _handlersForPasteOfTypeClipboardEvent.Remove(value);
                if (_handlersForPasteOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("paste", _DispatcherForPasteOfTypeClipboardEvent);
                    _handlersForPasteOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Paste
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForPasteOfTypeClipboardEvent;
    private void _DispatcherForPasteOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPasteOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<UIEvent?> WhenAborted
    {
        add
        {
            _handlersForWhenAbortedOfTypeUIEvent ??= new();
            if (_handlersForWhenAbortedOfTypeUIEvent.Count == 0) AddEventListener("abort", _DispatcherForWhenAbortedOfTypeUIEvent);
            _handlersForWhenAbortedOfTypeUIEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenAbortedOfTypeUIEvent != null)
            {
                _handlersForWhenAbortedOfTypeUIEvent.Remove(value);
                if (_handlersForWhenAbortedOfTypeUIEvent.Count == 0)
                {
                    RemoveEventListener("abort", _DispatcherForWhenAbortedOfTypeUIEvent);
                    _handlersForWhenAbortedOfTypeUIEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenAborted
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<UIEvent?>>? _handlersForWhenAbortedOfTypeUIEvent;
    private void _DispatcherForWhenAbortedOfTypeUIEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForWhenAbortedOfTypeUIEvent!) handler?.Invoke(castedSender, args?.Cast<UIEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationCancel
    {
        add
        {
            _handlersForAnimationCancelOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationCancelOfTypeAnimationEvent.Count == 0) AddEventListener("animationcancel", _DispatcherForAnimationCancelOfTypeAnimationEvent);
            _handlersForAnimationCancelOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationCancelOfTypeAnimationEvent != null)
            {
                _handlersForAnimationCancelOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationCancelOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationcancel", _DispatcherForAnimationCancelOfTypeAnimationEvent);
                    _handlersForAnimationCancelOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationCancelOfTypeAnimationEvent;
    private void _DispatcherForAnimationCancelOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForAnimationCancelOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationEnd
    {
        add
        {
            _handlersForAnimationEndOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationEndOfTypeAnimationEvent.Count == 0) AddEventListener("animationend", _DispatcherForAnimationEndOfTypeAnimationEvent);
            _handlersForAnimationEndOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationEndOfTypeAnimationEvent != null)
            {
                _handlersForAnimationEndOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationEndOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationend", _DispatcherForAnimationEndOfTypeAnimationEvent);
                    _handlersForAnimationEndOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationEndOfTypeAnimationEvent;
    private void _DispatcherForAnimationEndOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForAnimationEndOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationIteration
    {
        add
        {
            _handlersForAnimationIterationOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationIterationOfTypeAnimationEvent.Count == 0) AddEventListener("animationiteration", _DispatcherForAnimationIterationOfTypeAnimationEvent);
            _handlersForAnimationIterationOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationIterationOfTypeAnimationEvent != null)
            {
                _handlersForAnimationIterationOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationIterationOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationiteration", _DispatcherForAnimationIterationOfTypeAnimationEvent);
                    _handlersForAnimationIterationOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationIteration
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationIterationOfTypeAnimationEvent;
    private void _DispatcherForAnimationIterationOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForAnimationIterationOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationStart
    {
        add
        {
            _handlersForAnimationStartOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationStartOfTypeAnimationEvent.Count == 0) AddEventListener("animationstart", _DispatcherForAnimationStartOfTypeAnimationEvent);
            _handlersForAnimationStartOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationStartOfTypeAnimationEvent != null)
            {
                _handlersForAnimationStartOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationStartOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationstart", _DispatcherForAnimationStartOfTypeAnimationEvent);
                    _handlersForAnimationStartOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationStartOfTypeAnimationEvent;
    private void _DispatcherForAnimationStartOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForAnimationStartOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> AuxClick
    {
        add
        {
            _handlersForAuxClickOfTypeMouseEvent ??= new();
            if (_handlersForAuxClickOfTypeMouseEvent.Count == 0) AddEventListener("auxclick", _DispatcherForAuxClickOfTypeMouseEvent);
            _handlersForAuxClickOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForAuxClickOfTypeMouseEvent != null)
            {
                _handlersForAuxClickOfTypeMouseEvent.Remove(value);
                if (_handlersForAuxClickOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("auxclick", _DispatcherForAuxClickOfTypeMouseEvent);
                    _handlersForAuxClickOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AuxClick
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForAuxClickOfTypeMouseEvent;
    private void _DispatcherForAuxClickOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForAuxClickOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<InputEvent?> BeforeInput
    {
        add
        {
            _handlersForBeforeInputOfTypeInputEvent ??= new();
            if (_handlersForBeforeInputOfTypeInputEvent.Count == 0) AddEventListener("beforeinput", _DispatcherForBeforeInputOfTypeInputEvent);
            _handlersForBeforeInputOfTypeInputEvent.Add(value);
        }
        remove
        {
            if (_handlersForBeforeInputOfTypeInputEvent != null)
            {
                _handlersForBeforeInputOfTypeInputEvent.Remove(value);
                if (_handlersForBeforeInputOfTypeInputEvent.Count == 0)
                {
                    RemoveEventListener("beforeinput", _DispatcherForBeforeInputOfTypeInputEvent);
                    _handlersForBeforeInputOfTypeInputEvent = null;
                }
            }
        }
    }
    #region Internal event management members for BeforeInput
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<InputEvent?>>? _handlersForBeforeInputOfTypeInputEvent;
    private void _DispatcherForBeforeInputOfTypeInputEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForBeforeInputOfTypeInputEvent!) handler?.Invoke(castedSender, args?.Cast<InputEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> Blurred
    {
        add
        {
            _handlersForBlurredOfTypeFocusEvent ??= new();
            if (_handlersForBlurredOfTypeFocusEvent.Count == 0) AddEventListener("blur", _DispatcherForBlurredOfTypeFocusEvent);
            _handlersForBlurredOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForBlurredOfTypeFocusEvent != null)
            {
                _handlersForBlurredOfTypeFocusEvent.Remove(value);
                if (_handlersForBlurredOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("blur", _DispatcherForBlurredOfTypeFocusEvent);
                    _handlersForBlurredOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Blurred
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForBlurredOfTypeFocusEvent;
    private void _DispatcherForBlurredOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForBlurredOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CanPlay
    {
        add => AddEventListener("canplay", value);
        remove => RemoveEventListener("canplay", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CanPlayThrough
    {
        add => AddEventListener("canplaythrough", value);
        remove => RemoveEventListener("canplaythrough", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Change
    {
        add => AddEventListener("change", value);
        remove => RemoveEventListener("change", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> Clicked
    {
        add
        {
            _handlersForClickedOfTypeMouseEvent ??= new();
            if (_handlersForClickedOfTypeMouseEvent.Count == 0) AddEventListener("click", _DispatcherForClickedOfTypeMouseEvent);
            _handlersForClickedOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForClickedOfTypeMouseEvent != null)
            {
                _handlersForClickedOfTypeMouseEvent.Remove(value);
                if (_handlersForClickedOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("click", _DispatcherForClickedOfTypeMouseEvent);
                    _handlersForClickedOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Clicked
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForClickedOfTypeMouseEvent;
    private void _DispatcherForClickedOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForClickedOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenClosed
    {
        add => AddEventListener("close", value);
        remove => RemoveEventListener("close", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionEnd
    {
        add
        {
            _handlersForCompositionEndOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionEndOfTypeCompositionEvent.Count == 0) AddEventListener("compositionend", _DispatcherForCompositionEndOfTypeCompositionEvent);
            _handlersForCompositionEndOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionEndOfTypeCompositionEvent != null)
            {
                _handlersForCompositionEndOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionEndOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionend", _DispatcherForCompositionEndOfTypeCompositionEvent);
                    _handlersForCompositionEndOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionEndOfTypeCompositionEvent;
    private void _DispatcherForCompositionEndOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForCompositionEndOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionStart
    {
        add
        {
            _handlersForCompositionStartOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionStartOfTypeCompositionEvent.Count == 0) AddEventListener("compositionstart", _DispatcherForCompositionStartOfTypeCompositionEvent);
            _handlersForCompositionStartOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionStartOfTypeCompositionEvent != null)
            {
                _handlersForCompositionStartOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionStartOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionstart", _DispatcherForCompositionStartOfTypeCompositionEvent);
                    _handlersForCompositionStartOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionStartOfTypeCompositionEvent;
    private void _DispatcherForCompositionStartOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForCompositionStartOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionUpdate
    {
        add
        {
            _handlersForCompositionUpdateOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionUpdateOfTypeCompositionEvent.Count == 0) AddEventListener("compositionupdate", _DispatcherForCompositionUpdateOfTypeCompositionEvent);
            _handlersForCompositionUpdateOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionUpdateOfTypeCompositionEvent != null)
            {
                _handlersForCompositionUpdateOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionUpdateOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionupdate", _DispatcherForCompositionUpdateOfTypeCompositionEvent);
                    _handlersForCompositionUpdateOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionUpdate
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionUpdateOfTypeCompositionEvent;
    private void _DispatcherForCompositionUpdateOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForCompositionUpdateOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> ContextMenu
    {
        add
        {
            _handlersForContextMenuOfTypeMouseEvent ??= new();
            if (_handlersForContextMenuOfTypeMouseEvent.Count == 0) AddEventListener("contextmenu", _DispatcherForContextMenuOfTypeMouseEvent);
            _handlersForContextMenuOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForContextMenuOfTypeMouseEvent != null)
            {
                _handlersForContextMenuOfTypeMouseEvent.Remove(value);
                if (_handlersForContextMenuOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("contextmenu", _DispatcherForContextMenuOfTypeMouseEvent);
                    _handlersForContextMenuOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for ContextMenu
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForContextMenuOfTypeMouseEvent;
    private void _DispatcherForContextMenuOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForContextMenuOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CueChange
    {
        add => AddEventListener("cuechange", value);
        remove => RemoveEventListener("cuechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> DblClick
    {
        add
        {
            _handlersForDblClickOfTypeMouseEvent ??= new();
            if (_handlersForDblClickOfTypeMouseEvent.Count == 0) AddEventListener("dblclick", _DispatcherForDblClickOfTypeMouseEvent);
            _handlersForDblClickOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForDblClickOfTypeMouseEvent != null)
            {
                _handlersForDblClickOfTypeMouseEvent.Remove(value);
                if (_handlersForDblClickOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("dblclick", _DispatcherForDblClickOfTypeMouseEvent);
                    _handlersForDblClickOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DblClick
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForDblClickOfTypeMouseEvent;
    private void _DispatcherForDblClickOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDblClickOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> Drag
    {
        add
        {
            _handlersForDragOfTypeDragEvent ??= new();
            if (_handlersForDragOfTypeDragEvent.Count == 0) AddEventListener("drag", _DispatcherForDragOfTypeDragEvent);
            _handlersForDragOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragOfTypeDragEvent != null)
            {
                _handlersForDragOfTypeDragEvent.Remove(value);
                if (_handlersForDragOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("drag", _DispatcherForDragOfTypeDragEvent);
                    _handlersForDragOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Drag
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragOfTypeDragEvent;
    private void _DispatcherForDragOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDragOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragEnd
    {
        add
        {
            _handlersForDragEndOfTypeDragEvent ??= new();
            if (_handlersForDragEndOfTypeDragEvent.Count == 0) AddEventListener("dragend", _DispatcherForDragEndOfTypeDragEvent);
            _handlersForDragEndOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragEndOfTypeDragEvent != null)
            {
                _handlersForDragEndOfTypeDragEvent.Remove(value);
                if (_handlersForDragEndOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragend", _DispatcherForDragEndOfTypeDragEvent);
                    _handlersForDragEndOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragEndOfTypeDragEvent;
    private void _DispatcherForDragEndOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDragEndOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragEnter
    {
        add
        {
            _handlersForDragEnterOfTypeDragEvent ??= new();
            if (_handlersForDragEnterOfTypeDragEvent.Count == 0) AddEventListener("dragenter", _DispatcherForDragEnterOfTypeDragEvent);
            _handlersForDragEnterOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragEnterOfTypeDragEvent != null)
            {
                _handlersForDragEnterOfTypeDragEvent.Remove(value);
                if (_handlersForDragEnterOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragenter", _DispatcherForDragEnterOfTypeDragEvent);
                    _handlersForDragEnterOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragEnterOfTypeDragEvent;
    private void _DispatcherForDragEnterOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDragEnterOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragLeave
    {
        add
        {
            _handlersForDragLeaveOfTypeDragEvent ??= new();
            if (_handlersForDragLeaveOfTypeDragEvent.Count == 0) AddEventListener("dragleave", _DispatcherForDragLeaveOfTypeDragEvent);
            _handlersForDragLeaveOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragLeaveOfTypeDragEvent != null)
            {
                _handlersForDragLeaveOfTypeDragEvent.Remove(value);
                if (_handlersForDragLeaveOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragleave", _DispatcherForDragLeaveOfTypeDragEvent);
                    _handlersForDragLeaveOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragLeaveOfTypeDragEvent;
    private void _DispatcherForDragLeaveOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDragLeaveOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragOver
    {
        add
        {
            _handlersForDragOverOfTypeDragEvent ??= new();
            if (_handlersForDragOverOfTypeDragEvent.Count == 0) AddEventListener("dragover", _DispatcherForDragOverOfTypeDragEvent);
            _handlersForDragOverOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragOverOfTypeDragEvent != null)
            {
                _handlersForDragOverOfTypeDragEvent.Remove(value);
                if (_handlersForDragOverOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragover", _DispatcherForDragOverOfTypeDragEvent);
                    _handlersForDragOverOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragOverOfTypeDragEvent;
    private void _DispatcherForDragOverOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDragOverOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragStart
    {
        add
        {
            _handlersForDragStartOfTypeDragEvent ??= new();
            if (_handlersForDragStartOfTypeDragEvent.Count == 0) AddEventListener("dragstart", _DispatcherForDragStartOfTypeDragEvent);
            _handlersForDragStartOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragStartOfTypeDragEvent != null)
            {
                _handlersForDragStartOfTypeDragEvent.Remove(value);
                if (_handlersForDragStartOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragstart", _DispatcherForDragStartOfTypeDragEvent);
                    _handlersForDragStartOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragStartOfTypeDragEvent;
    private void _DispatcherForDragStartOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDragStartOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> Drop
    {
        add
        {
            _handlersForDropOfTypeDragEvent ??= new();
            if (_handlersForDropOfTypeDragEvent.Count == 0) AddEventListener("drop", _DispatcherForDropOfTypeDragEvent);
            _handlersForDropOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDropOfTypeDragEvent != null)
            {
                _handlersForDropOfTypeDragEvent.Remove(value);
                if (_handlersForDropOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("drop", _DispatcherForDropOfTypeDragEvent);
                    _handlersForDropOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Drop
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDropOfTypeDragEvent;
    private void _DispatcherForDropOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForDropOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> DurationChange
    {
        add => AddEventListener("durationchange", value);
        remove => RemoveEventListener("durationchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Emptied
    {
        add => AddEventListener("emptied", value);
        remove => RemoveEventListener("emptied", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenEnded
    {
        add => AddEventListener("ended", value);
        remove => RemoveEventListener("ended", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ErrorEvent?> Errored
    {
        add
        {
            _handlersForErroredOfTypeErrorEvent ??= new();
            if (_handlersForErroredOfTypeErrorEvent.Count == 0) AddEventListener("error", _DispatcherForErroredOfTypeErrorEvent);
            _handlersForErroredOfTypeErrorEvent.Add(value);
        }
        remove
        {
            if (_handlersForErroredOfTypeErrorEvent != null)
            {
                _handlersForErroredOfTypeErrorEvent.Remove(value);
                if (_handlersForErroredOfTypeErrorEvent.Count == 0)
                {
                    RemoveEventListener("error", _DispatcherForErroredOfTypeErrorEvent);
                    _handlersForErroredOfTypeErrorEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Errored
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ErrorEvent?>>? _handlersForErroredOfTypeErrorEvent;
    private void _DispatcherForErroredOfTypeErrorEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForErroredOfTypeErrorEvent!) handler?.Invoke(castedSender, args?.Cast<ErrorEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> Focused
    {
        add
        {
            _handlersForFocusedOfTypeFocusEvent ??= new();
            if (_handlersForFocusedOfTypeFocusEvent.Count == 0) AddEventListener("focus", _DispatcherForFocusedOfTypeFocusEvent);
            _handlersForFocusedOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusedOfTypeFocusEvent != null)
            {
                _handlersForFocusedOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusedOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focus", _DispatcherForFocusedOfTypeFocusEvent);
                    _handlersForFocusedOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Focused
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusedOfTypeFocusEvent;
    private void _DispatcherForFocusedOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForFocusedOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> FocusIn
    {
        add
        {
            _handlersForFocusInOfTypeFocusEvent ??= new();
            if (_handlersForFocusInOfTypeFocusEvent.Count == 0) AddEventListener("focusin", _DispatcherForFocusInOfTypeFocusEvent);
            _handlersForFocusInOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusInOfTypeFocusEvent != null)
            {
                _handlersForFocusInOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusInOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focusin", _DispatcherForFocusInOfTypeFocusEvent);
                    _handlersForFocusInOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FocusIn
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusInOfTypeFocusEvent;
    private void _DispatcherForFocusInOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForFocusInOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> FocusOut
    {
        add
        {
            _handlersForFocusOutOfTypeFocusEvent ??= new();
            if (_handlersForFocusOutOfTypeFocusEvent.Count == 0) AddEventListener("focusout", _DispatcherForFocusOutOfTypeFocusEvent);
            _handlersForFocusOutOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusOutOfTypeFocusEvent != null)
            {
                _handlersForFocusOutOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusOutOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focusout", _DispatcherForFocusOutOfTypeFocusEvent);
                    _handlersForFocusOutOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FocusOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusOutOfTypeFocusEvent;
    private void _DispatcherForFocusOutOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForFocusOutOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FormDataEvent?> FormData
    {
        add
        {
            _handlersForFormDataOfTypeFormDataEvent ??= new();
            if (_handlersForFormDataOfTypeFormDataEvent.Count == 0) AddEventListener("formdata", _DispatcherForFormDataOfTypeFormDataEvent);
            _handlersForFormDataOfTypeFormDataEvent.Add(value);
        }
        remove
        {
            if (_handlersForFormDataOfTypeFormDataEvent != null)
            {
                _handlersForFormDataOfTypeFormDataEvent.Remove(value);
                if (_handlersForFormDataOfTypeFormDataEvent.Count == 0)
                {
                    RemoveEventListener("formdata", _DispatcherForFormDataOfTypeFormDataEvent);
                    _handlersForFormDataOfTypeFormDataEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FormData
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FormDataEvent?>>? _handlersForFormDataOfTypeFormDataEvent;
    private void _DispatcherForFormDataOfTypeFormDataEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForFormDataOfTypeFormDataEvent!) handler?.Invoke(castedSender, args?.Cast<FormDataEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> GotPointerCapture
    {
        add
        {
            _handlersForGotPointerCaptureOfTypePointerEvent ??= new();
            if (_handlersForGotPointerCaptureOfTypePointerEvent.Count == 0) AddEventListener("gotpointercapture", _DispatcherForGotPointerCaptureOfTypePointerEvent);
            _handlersForGotPointerCaptureOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForGotPointerCaptureOfTypePointerEvent != null)
            {
                _handlersForGotPointerCaptureOfTypePointerEvent.Remove(value);
                if (_handlersForGotPointerCaptureOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("gotpointercapture", _DispatcherForGotPointerCaptureOfTypePointerEvent);
                    _handlersForGotPointerCaptureOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for GotPointerCapture
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForGotPointerCaptureOfTypePointerEvent;
    private void _DispatcherForGotPointerCaptureOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForGotPointerCaptureOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Input
    {
        add => AddEventListener("input", value);
        remove => RemoveEventListener("input", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Invalid
    {
        add => AddEventListener("invalid", value);
        remove => RemoveEventListener("invalid", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyDown
    {
        add
        {
            _handlersForKeyDownOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyDownOfTypeKeyboardEvent.Count == 0) AddEventListener("keydown", _DispatcherForKeyDownOfTypeKeyboardEvent);
            _handlersForKeyDownOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyDownOfTypeKeyboardEvent != null)
            {
                _handlersForKeyDownOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyDownOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keydown", _DispatcherForKeyDownOfTypeKeyboardEvent);
                    _handlersForKeyDownOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyDownOfTypeKeyboardEvent;
    private void _DispatcherForKeyDownOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForKeyDownOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyPress
    {
        add
        {
            _handlersForKeyPressOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyPressOfTypeKeyboardEvent.Count == 0) AddEventListener("keypress", _DispatcherForKeyPressOfTypeKeyboardEvent);
            _handlersForKeyPressOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyPressOfTypeKeyboardEvent != null)
            {
                _handlersForKeyPressOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyPressOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keypress", _DispatcherForKeyPressOfTypeKeyboardEvent);
                    _handlersForKeyPressOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyPress
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyPressOfTypeKeyboardEvent;
    private void _DispatcherForKeyPressOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForKeyPressOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyUp
    {
        add
        {
            _handlersForKeyUpOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyUpOfTypeKeyboardEvent.Count == 0) AddEventListener("keyup", _DispatcherForKeyUpOfTypeKeyboardEvent);
            _handlersForKeyUpOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyUpOfTypeKeyboardEvent != null)
            {
                _handlersForKeyUpOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyUpOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keyup", _DispatcherForKeyUpOfTypeKeyboardEvent);
                    _handlersForKeyUpOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyUpOfTypeKeyboardEvent;
    private void _DispatcherForKeyUpOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForKeyUpOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Loaded
    {
        add => AddEventListener("load", value);
        remove => RemoveEventListener("load", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadedData
    {
        add => AddEventListener("loadeddata", value);
        remove => RemoveEventListener("loadeddata", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadedMetadata
    {
        add => AddEventListener("loadedmetadata", value);
        remove => RemoveEventListener("loadedmetadata", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadStart
    {
        add => AddEventListener("loadstart", value);
        remove => RemoveEventListener("loadstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> LostPointerCapture
    {
        add
        {
            _handlersForLostPointerCaptureOfTypePointerEvent ??= new();
            if (_handlersForLostPointerCaptureOfTypePointerEvent.Count == 0) AddEventListener("lostpointercapture", _DispatcherForLostPointerCaptureOfTypePointerEvent);
            _handlersForLostPointerCaptureOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForLostPointerCaptureOfTypePointerEvent != null)
            {
                _handlersForLostPointerCaptureOfTypePointerEvent.Remove(value);
                if (_handlersForLostPointerCaptureOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("lostpointercapture", _DispatcherForLostPointerCaptureOfTypePointerEvent);
                    _handlersForLostPointerCaptureOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for LostPointerCapture
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForLostPointerCaptureOfTypePointerEvent;
    private void _DispatcherForLostPointerCaptureOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForLostPointerCaptureOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseDown
    {
        add
        {
            _handlersForMouseDownOfTypeMouseEvent ??= new();
            if (_handlersForMouseDownOfTypeMouseEvent.Count == 0) AddEventListener("mousedown", _DispatcherForMouseDownOfTypeMouseEvent);
            _handlersForMouseDownOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseDownOfTypeMouseEvent != null)
            {
                _handlersForMouseDownOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseDownOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mousedown", _DispatcherForMouseDownOfTypeMouseEvent);
                    _handlersForMouseDownOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseDownOfTypeMouseEvent;
    private void _DispatcherForMouseDownOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForMouseDownOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseEnter
    {
        add
        {
            _handlersForMouseEnterOfTypeMouseEvent ??= new();
            if (_handlersForMouseEnterOfTypeMouseEvent.Count == 0) AddEventListener("mouseenter", _DispatcherForMouseEnterOfTypeMouseEvent);
            _handlersForMouseEnterOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseEnterOfTypeMouseEvent != null)
            {
                _handlersForMouseEnterOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseEnterOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseenter", _DispatcherForMouseEnterOfTypeMouseEvent);
                    _handlersForMouseEnterOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseEnterOfTypeMouseEvent;
    private void _DispatcherForMouseEnterOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForMouseEnterOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseLeave
    {
        add
        {
            _handlersForMouseLeaveOfTypeMouseEvent ??= new();
            if (_handlersForMouseLeaveOfTypeMouseEvent.Count == 0) AddEventListener("mouseleave", _DispatcherForMouseLeaveOfTypeMouseEvent);
            _handlersForMouseLeaveOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseLeaveOfTypeMouseEvent != null)
            {
                _handlersForMouseLeaveOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseLeaveOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseleave", _DispatcherForMouseLeaveOfTypeMouseEvent);
                    _handlersForMouseLeaveOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseLeaveOfTypeMouseEvent;
    private void _DispatcherForMouseLeaveOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForMouseLeaveOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseMove
    {
        add
        {
            _handlersForMouseMoveOfTypeMouseEvent ??= new();
            if (_handlersForMouseMoveOfTypeMouseEvent.Count == 0) AddEventListener("mousemove", _DispatcherForMouseMoveOfTypeMouseEvent);
            _handlersForMouseMoveOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseMoveOfTypeMouseEvent != null)
            {
                _handlersForMouseMoveOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseMoveOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mousemove", _DispatcherForMouseMoveOfTypeMouseEvent);
                    _handlersForMouseMoveOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseMoveOfTypeMouseEvent;
    private void _DispatcherForMouseMoveOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForMouseMoveOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseOut
    {
        add
        {
            _handlersForMouseOutOfTypeMouseEvent ??= new();
            if (_handlersForMouseOutOfTypeMouseEvent.Count == 0) AddEventListener("mouseout", _DispatcherForMouseOutOfTypeMouseEvent);
            _handlersForMouseOutOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseOutOfTypeMouseEvent != null)
            {
                _handlersForMouseOutOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseOutOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseout", _DispatcherForMouseOutOfTypeMouseEvent);
                    _handlersForMouseOutOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseOutOfTypeMouseEvent;
    private void _DispatcherForMouseOutOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForMouseOutOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseOver
    {
        add
        {
            _handlersForMouseOverOfTypeMouseEvent ??= new();
            if (_handlersForMouseOverOfTypeMouseEvent.Count == 0) AddEventListener("mouseover", _DispatcherForMouseOverOfTypeMouseEvent);
            _handlersForMouseOverOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseOverOfTypeMouseEvent != null)
            {
                _handlersForMouseOverOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseOverOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseover", _DispatcherForMouseOverOfTypeMouseEvent);
                    _handlersForMouseOverOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseOverOfTypeMouseEvent;
    private void _DispatcherForMouseOverOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForMouseOverOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseUp
    {
        add
        {
            _handlersForMouseUpOfTypeMouseEvent ??= new();
            if (_handlersForMouseUpOfTypeMouseEvent.Count == 0) AddEventListener("mouseup", _DispatcherForMouseUpOfTypeMouseEvent);
            _handlersForMouseUpOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseUpOfTypeMouseEvent != null)
            {
                _handlersForMouseUpOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseUpOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseup", _DispatcherForMouseUpOfTypeMouseEvent);
                    _handlersForMouseUpOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseUpOfTypeMouseEvent;
    private void _DispatcherForMouseUpOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForMouseUpOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenPaused
    {
        add => AddEventListener("pause", value);
        remove => RemoveEventListener("pause", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenPlayed
    {
        add => AddEventListener("play", value);
        remove => RemoveEventListener("play", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Playing
    {
        add => AddEventListener("playing", value);
        remove => RemoveEventListener("playing", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerCancel
    {
        add
        {
            _handlersForPointerCancelOfTypePointerEvent ??= new();
            if (_handlersForPointerCancelOfTypePointerEvent.Count == 0) AddEventListener("pointercancel", _DispatcherForPointerCancelOfTypePointerEvent);
            _handlersForPointerCancelOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerCancelOfTypePointerEvent != null)
            {
                _handlersForPointerCancelOfTypePointerEvent.Remove(value);
                if (_handlersForPointerCancelOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointercancel", _DispatcherForPointerCancelOfTypePointerEvent);
                    _handlersForPointerCancelOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerCancelOfTypePointerEvent;
    private void _DispatcherForPointerCancelOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerCancelOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerDown
    {
        add
        {
            _handlersForPointerDownOfTypePointerEvent ??= new();
            if (_handlersForPointerDownOfTypePointerEvent.Count == 0) AddEventListener("pointerdown", _DispatcherForPointerDownOfTypePointerEvent);
            _handlersForPointerDownOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerDownOfTypePointerEvent != null)
            {
                _handlersForPointerDownOfTypePointerEvent.Remove(value);
                if (_handlersForPointerDownOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerdown", _DispatcherForPointerDownOfTypePointerEvent);
                    _handlersForPointerDownOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerDownOfTypePointerEvent;
    private void _DispatcherForPointerDownOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerDownOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerEnter
    {
        add
        {
            _handlersForPointerEnterOfTypePointerEvent ??= new();
            if (_handlersForPointerEnterOfTypePointerEvent.Count == 0) AddEventListener("pointerenter", _DispatcherForPointerEnterOfTypePointerEvent);
            _handlersForPointerEnterOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerEnterOfTypePointerEvent != null)
            {
                _handlersForPointerEnterOfTypePointerEvent.Remove(value);
                if (_handlersForPointerEnterOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerenter", _DispatcherForPointerEnterOfTypePointerEvent);
                    _handlersForPointerEnterOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerEnterOfTypePointerEvent;
    private void _DispatcherForPointerEnterOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerEnterOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerLeave
    {
        add
        {
            _handlersForPointerLeaveOfTypePointerEvent ??= new();
            if (_handlersForPointerLeaveOfTypePointerEvent.Count == 0) AddEventListener("pointerleave", _DispatcherForPointerLeaveOfTypePointerEvent);
            _handlersForPointerLeaveOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerLeaveOfTypePointerEvent != null)
            {
                _handlersForPointerLeaveOfTypePointerEvent.Remove(value);
                if (_handlersForPointerLeaveOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerleave", _DispatcherForPointerLeaveOfTypePointerEvent);
                    _handlersForPointerLeaveOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerLeaveOfTypePointerEvent;
    private void _DispatcherForPointerLeaveOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerLeaveOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerMove
    {
        add
        {
            _handlersForPointerMoveOfTypePointerEvent ??= new();
            if (_handlersForPointerMoveOfTypePointerEvent.Count == 0) AddEventListener("pointermove", _DispatcherForPointerMoveOfTypePointerEvent);
            _handlersForPointerMoveOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerMoveOfTypePointerEvent != null)
            {
                _handlersForPointerMoveOfTypePointerEvent.Remove(value);
                if (_handlersForPointerMoveOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointermove", _DispatcherForPointerMoveOfTypePointerEvent);
                    _handlersForPointerMoveOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerMoveOfTypePointerEvent;
    private void _DispatcherForPointerMoveOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerMoveOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerOut
    {
        add
        {
            _handlersForPointerOutOfTypePointerEvent ??= new();
            if (_handlersForPointerOutOfTypePointerEvent.Count == 0) AddEventListener("pointerout", _DispatcherForPointerOutOfTypePointerEvent);
            _handlersForPointerOutOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerOutOfTypePointerEvent != null)
            {
                _handlersForPointerOutOfTypePointerEvent.Remove(value);
                if (_handlersForPointerOutOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerout", _DispatcherForPointerOutOfTypePointerEvent);
                    _handlersForPointerOutOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerOutOfTypePointerEvent;
    private void _DispatcherForPointerOutOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerOutOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerOver
    {
        add
        {
            _handlersForPointerOverOfTypePointerEvent ??= new();
            if (_handlersForPointerOverOfTypePointerEvent.Count == 0) AddEventListener("pointerover", _DispatcherForPointerOverOfTypePointerEvent);
            _handlersForPointerOverOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerOverOfTypePointerEvent != null)
            {
                _handlersForPointerOverOfTypePointerEvent.Remove(value);
                if (_handlersForPointerOverOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerover", _DispatcherForPointerOverOfTypePointerEvent);
                    _handlersForPointerOverOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerOverOfTypePointerEvent;
    private void _DispatcherForPointerOverOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerOverOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerUp
    {
        add
        {
            _handlersForPointerUpOfTypePointerEvent ??= new();
            if (_handlersForPointerUpOfTypePointerEvent.Count == 0) AddEventListener("pointerup", _DispatcherForPointerUpOfTypePointerEvent);
            _handlersForPointerUpOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerUpOfTypePointerEvent != null)
            {
                _handlersForPointerUpOfTypePointerEvent.Remove(value);
                if (_handlersForPointerUpOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerup", _DispatcherForPointerUpOfTypePointerEvent);
                    _handlersForPointerUpOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerUpOfTypePointerEvent;
    private void _DispatcherForPointerUpOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForPointerUpOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ProgressEvent?> Progress
    {
        add
        {
            _handlersForProgressOfTypeProgressEvent ??= new();
            if (_handlersForProgressOfTypeProgressEvent.Count == 0) AddEventListener("progress", _DispatcherForProgressOfTypeProgressEvent);
            _handlersForProgressOfTypeProgressEvent.Add(value);
        }
        remove
        {
            if (_handlersForProgressOfTypeProgressEvent != null)
            {
                _handlersForProgressOfTypeProgressEvent.Remove(value);
                if (_handlersForProgressOfTypeProgressEvent.Count == 0)
                {
                    RemoveEventListener("progress", _DispatcherForProgressOfTypeProgressEvent);
                    _handlersForProgressOfTypeProgressEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Progress
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ProgressEvent?>>? _handlersForProgressOfTypeProgressEvent;
    private void _DispatcherForProgressOfTypeProgressEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForProgressOfTypeProgressEvent!) handler?.Invoke(castedSender, args?.Cast<ProgressEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> RateChange
    {
        add => AddEventListener("ratechange", value);
        remove => RemoveEventListener("ratechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenReset
    {
        add => AddEventListener("reset", value);
        remove => RemoveEventListener("reset", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<UIEvent?> Resize
    {
        add
        {
            _handlersForResizeOfTypeUIEvent ??= new();
            if (_handlersForResizeOfTypeUIEvent.Count == 0) AddEventListener("resize", _DispatcherForResizeOfTypeUIEvent);
            _handlersForResizeOfTypeUIEvent.Add(value);
        }
        remove
        {
            if (_handlersForResizeOfTypeUIEvent != null)
            {
                _handlersForResizeOfTypeUIEvent.Remove(value);
                if (_handlersForResizeOfTypeUIEvent.Count == 0)
                {
                    RemoveEventListener("resize", _DispatcherForResizeOfTypeUIEvent);
                    _handlersForResizeOfTypeUIEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Resize
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<UIEvent?>>? _handlersForResizeOfTypeUIEvent;
    private void _DispatcherForResizeOfTypeUIEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForResizeOfTypeUIEvent!) handler?.Invoke(castedSender, args?.Cast<UIEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Scrolled
    {
        add => AddEventListener("scroll", value);
        remove => RemoveEventListener("scroll", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SecurityPolicyViolationEvent?> SecurityPolicyViolation
    {
        add
        {
            _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent ??= new();
            if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Count == 0) AddEventListener("securitypolicyviolation", _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent);
            _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Add(value);
        }
        remove
        {
            if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent != null)
            {
                _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Remove(value);
                if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Count == 0)
                {
                    RemoveEventListener("securitypolicyviolation", _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent);
                    _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for SecurityPolicyViolation
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SecurityPolicyViolationEvent?>>? _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent;
    private void _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent!) handler?.Invoke(castedSender, args?.Cast<SecurityPolicyViolationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Seeked
    {
        add => AddEventListener("seeked", value);
        remove => RemoveEventListener("seeked", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenSeeking
    {
        add => AddEventListener("seeking", value);
        remove => RemoveEventListener("seeking", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenSelected
    {
        add => AddEventListener("select", value);
        remove => RemoveEventListener("select", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SelectionChange
    {
        add => AddEventListener("selectionchange", value);
        remove => RemoveEventListener("selectionchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SelectStart
    {
        add => AddEventListener("selectstart", value);
        remove => RemoveEventListener("selectstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SlotChange
    {
        add => AddEventListener("slotchange", value);
        remove => RemoveEventListener("slotchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Stalled
    {
        add => AddEventListener("stalled", value);
        remove => RemoveEventListener("stalled", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SubmitEvent?> Submitted
    {
        add
        {
            _handlersForSubmittedOfTypeSubmitEvent ??= new();
            if (_handlersForSubmittedOfTypeSubmitEvent.Count == 0) AddEventListener("submit", _DispatcherForSubmittedOfTypeSubmitEvent);
            _handlersForSubmittedOfTypeSubmitEvent.Add(value);
        }
        remove
        {
            if (_handlersForSubmittedOfTypeSubmitEvent != null)
            {
                _handlersForSubmittedOfTypeSubmitEvent.Remove(value);
                if (_handlersForSubmittedOfTypeSubmitEvent.Count == 0)
                {
                    RemoveEventListener("submit", _DispatcherForSubmittedOfTypeSubmitEvent);
                    _handlersForSubmittedOfTypeSubmitEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Submitted
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SubmitEvent?>>? _handlersForSubmittedOfTypeSubmitEvent;
    private void _DispatcherForSubmittedOfTypeSubmitEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForSubmittedOfTypeSubmitEvent!) handler?.Invoke(castedSender, args?.Cast<SubmitEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Suspend
    {
        add => AddEventListener("suspend", value);
        remove => RemoveEventListener("suspend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> TimeUpdate
    {
        add => AddEventListener("timeupdate", value);
        remove => RemoveEventListener("timeupdate", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Toggle
    {
        add => AddEventListener("toggle", value);
        remove => RemoveEventListener("toggle", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchCancel
    {
        add
        {
            _handlersForTouchCancelOfTypeTouchEvent ??= new();
            if (_handlersForTouchCancelOfTypeTouchEvent.Count == 0) AddEventListener("touchcancel", _DispatcherForTouchCancelOfTypeTouchEvent);
            _handlersForTouchCancelOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchCancelOfTypeTouchEvent != null)
            {
                _handlersForTouchCancelOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchCancelOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchcancel", _DispatcherForTouchCancelOfTypeTouchEvent);
                    _handlersForTouchCancelOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchCancelOfTypeTouchEvent;
    private void _DispatcherForTouchCancelOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTouchCancelOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchEnd
    {
        add
        {
            _handlersForTouchEndOfTypeTouchEvent ??= new();
            if (_handlersForTouchEndOfTypeTouchEvent.Count == 0) AddEventListener("touchend", _DispatcherForTouchEndOfTypeTouchEvent);
            _handlersForTouchEndOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchEndOfTypeTouchEvent != null)
            {
                _handlersForTouchEndOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchEndOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchend", _DispatcherForTouchEndOfTypeTouchEvent);
                    _handlersForTouchEndOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchEndOfTypeTouchEvent;
    private void _DispatcherForTouchEndOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTouchEndOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchMove
    {
        add
        {
            _handlersForTouchMoveOfTypeTouchEvent ??= new();
            if (_handlersForTouchMoveOfTypeTouchEvent.Count == 0) AddEventListener("touchmove", _DispatcherForTouchMoveOfTypeTouchEvent);
            _handlersForTouchMoveOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchMoveOfTypeTouchEvent != null)
            {
                _handlersForTouchMoveOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchMoveOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchmove", _DispatcherForTouchMoveOfTypeTouchEvent);
                    _handlersForTouchMoveOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchMoveOfTypeTouchEvent;
    private void _DispatcherForTouchMoveOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTouchMoveOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchStart
    {
        add
        {
            _handlersForTouchStartOfTypeTouchEvent ??= new();
            if (_handlersForTouchStartOfTypeTouchEvent.Count == 0) AddEventListener("touchstart", _DispatcherForTouchStartOfTypeTouchEvent);
            _handlersForTouchStartOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchStartOfTypeTouchEvent != null)
            {
                _handlersForTouchStartOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchStartOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchstart", _DispatcherForTouchStartOfTypeTouchEvent);
                    _handlersForTouchStartOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchStartOfTypeTouchEvent;
    private void _DispatcherForTouchStartOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTouchStartOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionCancel
    {
        add
        {
            _handlersForTransitionCancelOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionCancelOfTypeTransitionEvent.Count == 0) AddEventListener("transitioncancel", _DispatcherForTransitionCancelOfTypeTransitionEvent);
            _handlersForTransitionCancelOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionCancelOfTypeTransitionEvent != null)
            {
                _handlersForTransitionCancelOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionCancelOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitioncancel", _DispatcherForTransitionCancelOfTypeTransitionEvent);
                    _handlersForTransitionCancelOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionCancelOfTypeTransitionEvent;
    private void _DispatcherForTransitionCancelOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTransitionCancelOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionEnd
    {
        add
        {
            _handlersForTransitionEndOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionEndOfTypeTransitionEvent.Count == 0) AddEventListener("transitionend", _DispatcherForTransitionEndOfTypeTransitionEvent);
            _handlersForTransitionEndOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionEndOfTypeTransitionEvent != null)
            {
                _handlersForTransitionEndOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionEndOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionend", _DispatcherForTransitionEndOfTypeTransitionEvent);
                    _handlersForTransitionEndOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionEndOfTypeTransitionEvent;
    private void _DispatcherForTransitionEndOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTransitionEndOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionRun
    {
        add
        {
            _handlersForTransitionRunOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionRunOfTypeTransitionEvent.Count == 0) AddEventListener("transitionrun", _DispatcherForTransitionRunOfTypeTransitionEvent);
            _handlersForTransitionRunOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionRunOfTypeTransitionEvent != null)
            {
                _handlersForTransitionRunOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionRunOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionrun", _DispatcherForTransitionRunOfTypeTransitionEvent);
                    _handlersForTransitionRunOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionRun
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionRunOfTypeTransitionEvent;
    private void _DispatcherForTransitionRunOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTransitionRunOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionStart
    {
        add
        {
            _handlersForTransitionStartOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionStartOfTypeTransitionEvent.Count == 0) AddEventListener("transitionstart", _DispatcherForTransitionStartOfTypeTransitionEvent);
            _handlersForTransitionStartOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionStartOfTypeTransitionEvent != null)
            {
                _handlersForTransitionStartOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionStartOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionstart", _DispatcherForTransitionStartOfTypeTransitionEvent);
                    _handlersForTransitionStartOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionStartOfTypeTransitionEvent;
    private void _DispatcherForTransitionStartOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForTransitionStartOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> VolumeChange
    {
        add => AddEventListener("volumechange", value);
        remove => RemoveEventListener("volumechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Waiting
    {
        add => AddEventListener("waiting", value);
        remove => RemoveEventListener("waiting", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationEnd
    {
        add => AddEventListener("webkitanimationend", value);
        remove => RemoveEventListener("webkitanimationend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationIteration
    {
        add => AddEventListener("webkitanimationiteration", value);
        remove => RemoveEventListener("webkitanimationiteration", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationStart
    {
        add => AddEventListener("webkitanimationstart", value);
        remove => RemoveEventListener("webkitanimationstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitTransitionEnd
    {
        add => AddEventListener("webkittransitionend", value);
        remove => RemoveEventListener("webkittransitionend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<WheelEvent?> Wheel
    {
        add
        {
            _handlersForWheelOfTypeWheelEvent ??= new();
            if (_handlersForWheelOfTypeWheelEvent.Count == 0) AddEventListener("wheel", _DispatcherForWheelOfTypeWheelEvent);
            _handlersForWheelOfTypeWheelEvent.Add(value);
        }
        remove
        {
            if (_handlersForWheelOfTypeWheelEvent != null)
            {
                _handlersForWheelOfTypeWheelEvent.Remove(value);
                if (_handlersForWheelOfTypeWheelEvent.Count == 0)
                {
                    RemoveEventListener("wheel", _DispatcherForWheelOfTypeWheelEvent);
                    _handlersForWheelOfTypeWheelEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Wheel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<WheelEvent?>>? _handlersForWheelOfTypeWheelEvent;
    private void _DispatcherForWheelOfTypeWheelEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<SVGSwitchElement>();
        foreach (var handler in _handlersForWheelOfTypeWheelEvent!) handler?.Invoke(castedSender, args?.Cast<WheelEvent>());
    }
    #endregion

    
}
#pragma warning restore CS0108, CS8764, CS8766

