// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
/// Available only in secure contexts.
/// </summary>
[JsObject]
public partial class ServiceWorkerContainer: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public ServiceWorker? Controller
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<ServiceWorker>.ValueOrNullFromJs($"{_jsThis}.controller");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<ServiceWorkerContainer?, Event?, JsObject?>? OnControllerChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<ServiceWorkerContainer?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncontrollerchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncontrollerchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<ServiceWorkerContainer?, MessageEvent?, JsObject?>? OnMessage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<ServiceWorkerContainer?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<ServiceWorkerContainer?, MessageEvent?, JsObject?>? OnMessageError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<ServiceWorkerContainer?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessageerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessageerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ServiceWorkerRegistration>? Ready
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ServiceWorkerRegistration>>.ValueOrNullFromJs($"{_jsThis}.ready");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ServiceWorkerRegistration>? GetRegistration(Union<string, URL>? clientURL) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ServiceWorkerRegistration>>.ValueOrNullFromJs($"{_jsThis}.getRegistration({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(clientURL))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ReadonlyArray<ServiceWorkerRegistration>>? GetRegistrations() => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ReadonlyArray<ServiceWorkerRegistration>>>.ValueOrNullFromJs($"{_jsThis}.getRegistrations()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ServiceWorkerRegistration>? Register(Union<string, URL>? scriptURL, RegistrationOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ServiceWorkerRegistration>>.ValueOrNullFromJs($"{_jsThis}.register({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(scriptURL))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void StartMessages() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.startMessages()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> ControllerChange
    {
        add => AddEventListener("controllerchange", value);
        remove => RemoveEventListener("controllerchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> Message
    {
        add
        {
            _handlersForMessageOfTypeMessageEvent ??= new();
            if (_handlersForMessageOfTypeMessageEvent.Count == 0) AddEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
            _handlersForMessageOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageOfTypeMessageEvent != null)
            {
                _handlersForMessageOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
                    _handlersForMessageOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Message
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageOfTypeMessageEvent;
    private void _DispatcherForMessageOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<ServiceWorkerContainer>();
        foreach (var handler in _handlersForMessageOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> MessageError
    {
        add
        {
            _handlersForMessageErrorOfTypeMessageEvent ??= new();
            if (_handlersForMessageErrorOfTypeMessageEvent.Count == 0) AddEventListener("messageerror", _DispatcherForMessageErrorOfTypeMessageEvent);
            _handlersForMessageErrorOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageErrorOfTypeMessageEvent != null)
            {
                _handlersForMessageErrorOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageErrorOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("messageerror", _DispatcherForMessageErrorOfTypeMessageEvent);
                    _handlersForMessageErrorOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MessageError
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageErrorOfTypeMessageEvent;
    private void _DispatcherForMessageErrorOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<ServiceWorkerContainer>();
        foreach (var handler in _handlersForMessageErrorOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
}
#pragma warning restore CS0108, CS8764, CS8766

