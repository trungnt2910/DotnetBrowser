// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
public interface IWindowOrWorkerGlobalScope
{
    /// <summary>
    /// Available only in secure contexts.
    /// </summary>
    public CacheStorage? Caches { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? CrossOriginIsolated { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public Crypto? Crypto { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public IDBFactory? IndexedDB { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsSecureContext { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Origin { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public Performance? Performance { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Atob(string? data);
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Btoa(string? data);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearInterval(double? id);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearTimeout(double? id);
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ImageBitmap>? CreateImageBitmap(Union<HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, Blob, ImageData>? image, ImageBitmapOptions? options);
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ImageBitmap>? CreateImageBitmap(Union<HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, Blob, ImageData>? image, double? sx, double? sy, double? sw, double? sh, ImageBitmapOptions? options);
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<Response>? Fetch(Union<Request, string, URL>? input, RequestInit? init);
    /// <summary>
    /// To be added.
    /// </summary>
    public void QueueMicrotask(VoidFunction? callback);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ReportError(JsObject? e);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SetInterval(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SetTimeout(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? StructuredClone(JsObject? value, StructuredSerializeOptions? options);
}
#pragma warning restore CS0108, CS8764, CS8766

