// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// Any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
/// </summary>
[JsObject]
public partial class Document: Node, IDocumentAndElementEventHandlers, IDocumentOrShadowRoot, IFontFaceSource, IGlobalEventHandlers, INonElementParentNode, IParentNode, IXPathEvaluatorBase
{
    
    /// <summary>
    /// Sets or gets the URL for the current document.
    /// </summary>
    public string? URL
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.URL");
    }
    
    
    /// <summary>
    /// Sets or gets the color of all active links in the document.
    /// </summary>
    [global::System.Obsolete]
    public string? AlinkColor
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.alinkColor");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.alinkColor = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns a reference to the collection of elements contained by the object.
    /// </summary>
    [global::System.Obsolete]
    public HTMLAllCollection? All
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLAllCollection>.ValueOrNullFromJs($"{_jsThis}.all");
    }
    
    
    /// <summary>
    /// Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
    /// </summary>
    [global::System.Obsolete]
    public HTMLCollectionOf<HTMLAnchorElement>? Anchors
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<HTMLAnchorElement>>.ValueOrNullFromJs($"{_jsThis}.anchors");
    }
    
    
    /// <summary>
    /// Retrieves a collection of all applet objects in the document.
    /// </summary>
    [global::System.Obsolete]
    public HTMLCollection? Applets
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollection>.ValueOrNullFromJs($"{_jsThis}.applets");
    }
    
    
    /// <summary>
    /// Deprecated. Sets or retrieves a value that indicates the background color behind the object.
    /// </summary>
    [global::System.Obsolete]
    public string? BgColor
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.bgColor");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.bgColor = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Specifies the beginning and end of the document body.
    /// </summary>
    public HTMLElement? Body
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLElement>.ValueOrNullFromJs($"{_jsThis}.body");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.body = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns document's encoding.
    /// </summary>
    public string? CharacterSet
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.characterSet");
    }
    
    
    /// <summary>
    /// Gets or sets the character set used to encode the object.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `characterSet`.")]
    public string? Charset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.charset");
    }
    
    
    /// <summary>
    /// Gets a value that indicates whether standards-compliant mode is switched on for the object.
    /// </summary>
    public string? CompatMode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.compatMode");
    }
    
    
    /// <summary>
    /// Returns document's content type.
    /// </summary>
    public string? ContentType
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.contentType");
    }
    
    
    /// <summary>
    /// Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can't be applied to this resource, the empty string will be returned.
    /// Can be set, to add a new cookie to the element's set of HTTP cookies.
    /// If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a "SecurityError" DOMException will be thrown on getting and setting.
    /// </summary>
    public string? Cookie
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.cookie");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.cookie = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the script element, or the SVG script element, that is currently executing, as long as the element represents a classic script. In the case of reentrant script execution, returns the one that most recently started executing amongst those that have not yet finished executing.
    /// Returns null if the Document is not currently executing a script or SVG script element (e.g., because the running script is an event handler, or a timeout), or if the currently executing script or SVG script element represents a module script.
    /// </summary>
    public Union<HTMLScriptElement, SVGScriptElement>? CurrentScript
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<HTMLScriptElement, SVGScriptElement>>.ValueOrNullFromJs($"{_jsThis}.currentScript");
    }
    
    
    /// <summary>
    /// Returns the Window object of the active document.
    /// </summary>
    public Window? DefaultView
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}.defaultView");
    }
    
    
    /// <summary>
    /// Sets or gets a value that indicates whether the document can be edited.
    /// </summary>
    public string? DesignMode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.designMode");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.designMode = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Sets or retrieves a value that indicates the reading order of the object.
    /// </summary>
    public string? Dir
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.dir");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.dir = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Gets an object representing the document type declaration associated with the current document.
    /// </summary>
    public DocumentType? Doctype
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DocumentType>.ValueOrNullFromJs($"{_jsThis}.doctype");
    }
    
    
    /// <summary>
    /// Gets a reference to the root node of the document.
    /// </summary>
    public HTMLElement? DocumentElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLElement>.ValueOrNullFromJs($"{_jsThis}.documentElement");
    }
    
    
    /// <summary>
    /// Returns document's URL.
    /// </summary>
    public string? DocumentURI
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.documentURI");
    }
    
    
    /// <summary>
    /// Sets or gets the security domain of the document.
    /// </summary>
    public string? Domain
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.domain");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.domain = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Retrieves a collection of all embed objects in the document.
    /// </summary>
    public HTMLCollectionOf<HTMLEmbedElement>? Embeds
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<HTMLEmbedElement>>.ValueOrNullFromJs($"{_jsThis}.embeds");
    }
    
    
    /// <summary>
    /// Sets or gets the foreground (text) color of the document.
    /// </summary>
    [global::System.Obsolete]
    public string? FgColor
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.fgColor");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.fgColor = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Retrieves a collection, in source order, of all form objects in the document.
    /// </summary>
    public HTMLCollectionOf<HTMLFormElement>? Forms
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<HTMLFormElement>>.ValueOrNullFromJs($"{_jsThis}.forms");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public bool? Fullscreen
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.fullscreen");
    }
    
    
    /// <summary>
    /// Returns true if document has the ability to display elements fullscreen and fullscreen is supported, or false otherwise.
    /// </summary>
    public bool? FullscreenEnabled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.fullscreenEnabled");
    }
    
    
    /// <summary>
    /// Returns the head element.
    /// </summary>
    public HTMLHeadElement? Head
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLHeadElement>.ValueOrNullFromJs($"{_jsThis}.head");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Hidden
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.hidden");
    }
    
    
    /// <summary>
    /// Retrieves a collection, in source order, of img objects in the document.
    /// </summary>
    public HTMLCollectionOf<HTMLImageElement>? Images
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<HTMLImageElement>>.ValueOrNullFromJs($"{_jsThis}.images");
    }
    
    
    /// <summary>
    /// Gets the implementation object of the current document.
    /// </summary>
    public DOMImplementation? Implementation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMImplementation>.ValueOrNullFromJs($"{_jsThis}.implementation");
    }
    
    
    /// <summary>
    /// Returns the character encoding used to create the webpage that is loaded into the document object.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `characterSet`.")]
    public string? InputEncoding
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.inputEncoding");
    }
    
    
    /// <summary>
    /// Gets the date that the page was last modified, if the page supplies one.
    /// </summary>
    public string? LastModified
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.lastModified");
    }
    
    
    /// <summary>
    /// Sets or gets the color of the document links.
    /// </summary>
    [global::System.Obsolete]
    public string? LinkColor
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.linkColor");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.linkColor = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Retrieves a collection of all a objects that specify the href property and all area objects in the document.
    /// </summary>
    public HTMLCollectionOf<Union<HTMLAnchorElement, HTMLAreaElement>>? Links
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<Union<HTMLAnchorElement, HTMLAreaElement>>>.ValueOrNullFromJs($"{_jsThis}.links");
    }
    
    
    /// <summary>
    /// Contains information about the current URL.
    /// </summary>
    public JsFunc<Document?, Event?, JsObject?>? OnFullscreenChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Document?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onfullscreenchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onfullscreenchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Document?, Event?, JsObject?>? OnFullscreenError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Document?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onfullscreenerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onfullscreenerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Document?, Event?, JsObject?>? OnPointerLockChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Document?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerlockchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerlockchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Document?, Event?, JsObject?>? OnPointerLockError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Document?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerlockerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerlockerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the state of the object has changed.
    /// </summary>
    public JsFunc<Document?, Event?, JsObject?>? OnReadyStateChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Document?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onreadystatechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onreadystatechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Document?, Event?, JsObject?>? OnVisibilityChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Document?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onvisibilitychange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onvisibilitychange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? PictureInPictureEnabled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.pictureInPictureEnabled");
    }
    
    
    /// <summary>
    /// Return an HTMLCollection of the embed elements in the Document.
    /// </summary>
    public HTMLCollectionOf<HTMLEmbedElement>? Plugins
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<HTMLEmbedElement>>.ValueOrNullFromJs($"{_jsThis}.plugins");
    }
    
    
    /// <summary>
    /// Retrieves a value that indicates the current state of the object.
    /// </summary>
    public string? ReadyState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.readyState");
    }
    
    
    /// <summary>
    /// Gets the URL of the location that referred the user to the current page.
    /// </summary>
    public string? Referrer
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.referrer");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public SVGSVGElement? RootElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<SVGSVGElement>.ValueOrNullFromJs($"{_jsThis}.rootElement");
    }
    
    
    /// <summary>
    /// Retrieves a collection of all script objects in the document.
    /// </summary>
    public HTMLCollectionOf<HTMLScriptElement>? Scripts
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<HTMLScriptElement>>.ValueOrNullFromJs($"{_jsThis}.scripts");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Element? ScrollingElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.scrollingElement");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public DocumentTimeline? Timeline
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DocumentTimeline>.ValueOrNullFromJs($"{_jsThis}.timeline");
    }
    
    
    /// <summary>
    /// Contains the title of the document.
    /// </summary>
    public string? Title
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.title");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.title = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? VisibilityState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.visibilityState");
    }
    
    
    /// <summary>
    /// Sets or gets the color of the links that the user has visited.
    /// </summary>
    [global::System.Obsolete]
    public string? VlinkColor
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.vlinkColor");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.vlinkColor = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>? OnCopy
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncopy");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncopy = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>? OnCut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncut");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncut = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>? OnPaste
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<DocumentAndElementEventHandlers?, ClipboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpaste");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpaste = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.
    /// For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe's node document.
    /// Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that's located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.
    /// </summary>
    public Element? ActiveElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.activeElement");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<CSSStyleSheet>? AdoptedStyleSheets
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<CSSStyleSheet>>.ValueOrNullFromJs($"{_jsThis}.adoptedStyleSheets");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.adoptedStyleSheets = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns document's fullscreen element.
    /// </summary>
    public Element? FullscreenElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.fullscreenElement");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Element? PictureInPictureElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.pictureInPictureElement");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Element? PointerLockElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.pointerLockElement");
    }
    
    
    /// <summary>
    /// Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
    /// </summary>
    public StyleSheetList? StyleSheets
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<StyleSheetList>.ValueOrNullFromJs($"{_jsThis}.styleSheets");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public FontFaceSet? Fonts
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<FontFaceSet>.ValueOrNullFromJs($"{_jsThis}.fonts");
    }
    
    
    /// <summary>
    /// Fires when the user aborts the download.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>? OnAbort
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onabort");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onabort = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? OnAnimationCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationcancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationcancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? OnAnimationEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? OnAnimationIteration
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationiteration");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationiteration = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? OnAnimationStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnAuxClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onauxclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onauxclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the object loses the input focus.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>? OnBlur
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onblur");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onblur = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when playback is possible, but would require further buffering.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnCanPlay
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncanplay");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncanplay = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnCanPlayThrough
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncanplaythrough");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncanplaythrough = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the contents of the object or selection have changed.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user clicks the left mouse button on the object
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnClose
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclose");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclose = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user clicks the right mouse button in the client area, opening the context menu.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnContextMenu
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncontextmenu");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncontextmenu = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnCueChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncuechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncuechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user double-clicks the object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnDblClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondblclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondblclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the source object continuously during a drag operation.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? OnDrag
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondrag");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondrag = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the source object when the user releases the mouse at the close of a drag operation.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? OnDragEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the target element when the user drags the object to a valid drop target.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? OnDragEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? OnDragLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the target element continuously while the user drags the object over a valid drop target.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? OnDragOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the source object when the user starts to drag a text selection or selected object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? OnDragStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? OnDrop
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondrop");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondrop = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the duration attribute is updated.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnDurationChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondurationchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondurationchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the media element is reset to its initial state.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnEmptied
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onemptied");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onemptied = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the end of playback is reached.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnEnded
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onended");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onended = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when an error occurs during object loading.
    /// </summary>
    public OnErrorEventHandlerNonNull? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<OnErrorEventHandlerNonNull>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the object receives focus.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>? OnFocus
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onfocus");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onfocus = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, FormDataEvent?, JsObject?>? OnFormData
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, FormDataEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onformdata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onformdata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnGotPointerCapture
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongotpointercapture");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongotpointercapture = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnInput
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oninput");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oninput = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnInvalid
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oninvalid");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oninvalid = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user presses a key.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>? OnKeyDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeydown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeydown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user presses an alphanumeric key.
    /// </summary>
    [global::System.Obsolete]
    public JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>? OnKeyPress
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeypress");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeypress = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user releases a key.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>? OnKeyUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeyup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeyup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires immediately after the browser loads the object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnLoad
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when media data is loaded at the current playback position.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnLoadedData
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadeddata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadeddata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the duration and dimensions of the media have been determined.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnLoadedMetadata
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadedmetadata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadedmetadata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when Internet Explorer begins looking for media data.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnLoadStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnLostPointerCapture
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onlostpointercapture");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onlostpointercapture = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user clicks the object with either mouse button.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnMouseDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmousedown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmousedown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnMouseEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnMouseLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user moves the mouse over the object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnMouseMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmousemove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmousemove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user moves the mouse pointer outside the boundaries of the object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnMouseOut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseout");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseout = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user moves the mouse pointer into the object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnMouseOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user releases a mouse button while the mouse is over the object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? OnMouseUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when playback is paused.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnPause
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpause");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpause = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the play method is requested.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnPlay
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onplay");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onplay = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the audio or video has started playing.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnPlaying
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onplaying");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onplaying = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointercancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointercancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerdown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerdown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointermove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointermove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerOut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerout");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerout = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? OnPointerUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs to indicate progress while downloading media data.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, ProgressEvent?, JsObject?>? OnProgress
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, ProgressEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onprogress");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onprogress = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the playback rate is increased or decreased.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnRateChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onratechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onratechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user resets a form.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnReset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onreset");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onreset = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>? OnResize
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onresize");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onresize = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user repositions the scroll box in the scroll bar on the object.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnScroll
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onscroll");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onscroll = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, SecurityPolicyViolationEvent?, JsObject?>? OnSecurityPolicyViolation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, SecurityPolicyViolationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsecuritypolicyviolation");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsecuritypolicyviolation = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the seek operation ends.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnSeeked
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onseeked");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onseeked = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the current playback position is moved.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnSeeking
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onseeking");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onseeking = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the current selection changes.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnSelect
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselect");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselect = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnSelectionChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselectionchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselectionchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnSelectStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselectstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselectstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnSlotChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onslotchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onslotchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the download has stopped.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnStalled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onstalled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onstalled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, SubmitEvent?, JsObject?>? OnSubmit
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, SubmitEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsubmit");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsubmit = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs if the load operation has been intentionally halted.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnSuspend
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsuspend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsuspend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs to indicate the current playback position.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnTimeUpdate
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontimeupdate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontimeupdate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnToggle
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontoggle");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontoggle = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? OnTouchCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchcancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchcancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? OnTouchEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? OnTouchMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchmove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchmove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? OnTouchStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? OnTransitionCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitioncancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitioncancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? OnTransitionEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? OnTransitionRun
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionrun");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionrun = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? OnTransitionStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the volume is changed, or playback is muted or unmuted.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnVolumeChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onvolumechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onvolumechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when playback stops because the next frame of a video resource is not available.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnWaiting
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwaiting");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwaiting = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `onanimationend`.")]
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnWebkitAnimationEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `onanimationiteration`.")]
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnWebkitAnimationIteration
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationiteration");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationiteration = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `onanimationstart`.")]
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnWebkitAnimationStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `ontransitionend`.")]
    public JsFunc<GlobalEventHandlers?, Event?, JsObject?>? OnWebkitTransitionEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkittransitionend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkittransitionend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<GlobalEventHandlers?, WheelEvent?, JsObject?>? OnWheel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, WheelEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwheel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwheel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ChildElementCount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.childElementCount");
    }
    
    
    /// <summary>
    /// Returns the child elements.
    /// </summary>
    public HTMLCollection? Children
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollection>.ValueOrNullFromJs($"{_jsThis}.children");
    }
    
    
    /// <summary>
    /// Returns the first child that is an element, and null otherwise.
    /// </summary>
    public Element? FirstElementChild
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.firstElementChild");
    }
    
    
    /// <summary>
    /// Returns the last child that is an element, and null otherwise.
    /// </summary>
    public Element? LastElementChild
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.lastElementChild");
    }
    
    
    /// <summary>
    /// Moves node from another document and returns it.
    /// If node is a document, throws a "NotSupportedError" DOMException or, if node is a shadow root, throws a "HierarchyRequestError" DOMException.
    /// </summary>
    public T? AdoptNode<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] T>(T? node) where T: global::Trungnt2910.Browser.JsObject, INode => global::Trungnt2910.Browser.WebAssemblyRuntime<T>.ValueOrNullFromJs($"{_jsThis}.adoptNode({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(node))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void CaptureEvents() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.captureEvents()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public Range? CaretRangeFromPoint(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime<Range>.ValueOrNullFromJs($"{_jsThis}.caretRangeFromPoint({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void Clear() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clear()");
    
    
    /// <summary>
    /// Closes an output stream and forces the sent data to display.
    /// </summary>
    public void Close() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.close()");
    
    
    /// <summary>
    /// Creates an attribute object with a specified name.
    /// </summary>
    /// <param name="name">String that sets the attribute object's name.</param>
    public Attr? CreateAttribute(string? localName) => global::Trungnt2910.Browser.WebAssemblyRuntime<Attr>.ValueOrNullFromJs($"{_jsThis}.createAttribute({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(localName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Attr? CreateAttributeNS(string? @namespace, string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime<Attr>.ValueOrNullFromJs($"{_jsThis}.createAttributeNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// Returns a CDATASection node whose data is data.
    /// </summary>
    public CDATASection? CreateCDATASection(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime<CDATASection>.ValueOrNullFromJs($"{_jsThis}.createCDATASection({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// Creates a comment object with the specified data.
    /// </summary>
    /// <param name="data">Sets the comment object's data.</param>
    public Comment? CreateComment(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime<Comment>.ValueOrNullFromJs($"{_jsThis}.createComment({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// Creates a new document.
    /// </summary>
    public DocumentFragment? CreateDocumentFragment() => global::Trungnt2910.Browser.WebAssemblyRuntime<DocumentFragment>.ValueOrNullFromJs($"{_jsThis}.createDocumentFragment()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public HTMLElement? CreateElement(string? tagName, ElementCreationOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLElement>.ValueOrNullFromJs($"{_jsThis}.createElement({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(tagName))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    /// If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    /// If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    /// localName does not match the QName production.
    /// Namespace prefix is not null and namespace is the empty string.
    /// Namespace prefix is "xml" and namespace is not the XML namespace.
    /// qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    /// namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    /// When supplied, options's is can be used to create a customized built-in element.<br/>
    /// </summary>
    public Union<HTMLElement, SVGElement>? CreateElementNS(string? namespaceURI, string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<HTMLElement, SVGElement>>.ValueOrNullFromJs($"{_jsThis}.createElementNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(namespaceURI))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Element? CreateElementNS(string? namespaceURI, string? qualifiedName, ElementCreationOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.createElementNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(namespaceURI))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Element? CreateElementNS(string? @namespace, string? qualifiedName, Union<string, ElementCreationOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.createElementNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Union<AnimationEvent, AnimationPlaybackEvent, AudioProcessingEvent, BeforeUnloadEvent, BlobEvent, ClipboardEvent, CloseEvent, CompositionEvent, CustomEvent, DeviceMotionEvent, DeviceOrientationEvent, DragEvent, ErrorEvent, Event, FocusEvent, FontFaceSetLoadEvent, FormDataEvent, GamepadEvent, HashChangeEvent, IDBVersionChangeEvent, InputEvent, KeyboardEvent, MediaEncryptedEvent, MediaKeyMessageEvent, MediaQueryListEvent, MediaRecorderErrorEvent, MediaStreamTrackEvent, MessageEvent, MouseEvent, MutationEvent, OfflineAudioCompletionEvent, WheelEvent, WebGLContextEvent, UIEvent, TransitionEvent, TrackEvent, TouchEvent, SubmitEvent, StorageEvent, SpeechSynthesisEvent, SpeechSynthesisErrorEvent, SecurityPolicyViolationEvent, RTCTrackEvent, RTCPeerConnectionIceEvent, RTCPeerConnectionIceErrorEvent, RTCErrorEvent, RTCDataChannelEvent, RTCDTMFToneChangeEvent, PromiseRejectionEvent, ProgressEvent, PopStateEvent, PointerEvent, PaymentRequestUpdateEvent, PaymentMethodChangeEvent, PageTransitionEvent>? CreateEvent(string? eventInterface) => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<AnimationEvent, AnimationPlaybackEvent, AudioProcessingEvent, BeforeUnloadEvent, BlobEvent, ClipboardEvent, CloseEvent, CompositionEvent, CustomEvent, DeviceMotionEvent, DeviceOrientationEvent, DragEvent, ErrorEvent, Event, FocusEvent, FontFaceSetLoadEvent, FormDataEvent, GamepadEvent, HashChangeEvent, IDBVersionChangeEvent, InputEvent, KeyboardEvent, MediaEncryptedEvent, MediaKeyMessageEvent, MediaQueryListEvent, MediaRecorderErrorEvent, MediaStreamTrackEvent, MessageEvent, MouseEvent, MutationEvent, OfflineAudioCompletionEvent, WheelEvent, WebGLContextEvent, UIEvent, TransitionEvent, TrackEvent, TouchEvent, SubmitEvent, StorageEvent, SpeechSynthesisEvent, SpeechSynthesisErrorEvent, SecurityPolicyViolationEvent, RTCTrackEvent, RTCPeerConnectionIceEvent, RTCPeerConnectionIceErrorEvent, RTCErrorEvent, RTCDataChannelEvent, RTCDTMFToneChangeEvent, PromiseRejectionEvent, ProgressEvent, PopStateEvent, PointerEvent, PaymentRequestUpdateEvent, PaymentMethodChangeEvent, PageTransitionEvent>>.ValueOrNullFromJs($"{_jsThis}.createEvent({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(eventInterface))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
    /// </summary>
    /// <param name="content">The text and HTML tags to write.</param>
    public void Writeln(params string?[]? text) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.writeln({(string.Join(",", global::System.Linq.Enumerable.Select(text ?? global::System.Array.Empty<string>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// Writes one or more HTML expressions to a document in the specified window.
    /// </summary>
    /// <param name="content">Specifies the text and HTML tags to write.</param>
    public void Write(params string?[]? text) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.write({(string.Join(",", global::System.Linq.Enumerable.Select(text ?? global::System.Array.Empty<string>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise? RequestStorageAccess() => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise>.ValueOrNullFromJs($"{_jsThis}.requestStorageAccess()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void ReleaseEvents() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.releaseEvents()");
    
    
    /// <summary>
    /// Returns the current value of the document, range, or current selection for the given command.
    /// </summary>
    /// <param name="commandId">String that specifies a command identifier.</param>
    public string? QueryCommandValue(string? commandId) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.queryCommandValue({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(commandId))})");
    
    
    /// <summary>
    /// Returns a Boolean value that indicates whether the current command is supported on the current range.
    /// </summary>
    /// <param name="commandId">Specifies a command identifier.</param>
    [global::System.Obsolete]
    public bool? QueryCommandSupported(string? commandId) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.queryCommandSupported({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(commandId))})");
    
    
    /// <summary>
    /// Returns a Boolean value that indicates the current state of the command.
    /// </summary>
    /// <param name="commandId">String that specifies a command identifier.</param>
    [global::System.Obsolete]
    public bool? QueryCommandState(string? commandId) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.queryCommandState({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(commandId))})");
    
    
    /// <summary>
    /// Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
    /// </summary>
    /// <param name="commandId">String that specifies a command identifier.</param>
    public bool? QueryCommandIndeterm(string? commandId) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.queryCommandIndeterm({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(commandId))})");
    
    
    /// <summary>
    /// Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
    /// </summary>
    /// <param name="commandId">Specifies a command identifier.</param>
    [global::System.Obsolete]
    public bool? QueryCommandEnabled(string? commandId) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.queryCommandEnabled({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(commandId))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Window? Open(Union<string, URL>? url, string? name, string? features) => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}.open({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(url))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(features))})");
    
    
    /// <summary>
    /// Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
    /// </summary>
    /// <param name="url">Specifies a MIME type for the document.</param>
    /// <param name="name">Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.</param>
    /// <param name="features">Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.</param>
    /// <param name="replace">Specifies whether the existing entry for the document is replaced in the history list.</param>
    public Document? Open(string? unused1, string? unused2) => global::Trungnt2910.Browser.WebAssemblyRuntime<Document>.ValueOrNullFromJs($"{_jsThis}.open({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(unused1))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(unused2))})");
    
    
    /// <summary>
    /// Returns a copy of node. If deep is true, the copy also includes the node's descendants.
    /// If node is a document or a shadow root, throws a "NotSupportedError" DOMException.
    /// </summary>
    public T? ImportNode<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] T>(T? node, bool? deep) where T: global::Trungnt2910.Browser.JsObject, INode => global::Trungnt2910.Browser.WebAssemblyRuntime<T>.ValueOrNullFromJs($"{_jsThis}.importNode({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(node))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(deep))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<bool>? HasStorageAccess() => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<bool>>.ValueOrNullFromJs($"{_jsThis}.hasStorageAccess()");
    
    
    /// <summary>
    /// Gets a value indicating whether the object currently has focus.
    /// </summary>
    public bool? HasFocus() => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.hasFocus()");
    
    
    /// <summary>
    /// Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
    /// </summary>
    public Selection? GetSelection() => global::Trungnt2910.Browser.WebAssemblyRuntime<Selection>.ValueOrNullFromJs($"{_jsThis}.getSelection()");
    
    
    /// <summary>
    /// If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    /// If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    /// If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    /// Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    /// </summary>
    public Union<HTMLCollectionOf<Element>, HTMLCollectionOf<SVGElement>, HTMLCollectionOf<HTMLElement>>? GetElementsByTagNameNS(string? @namespace, string? localName) => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<HTMLCollectionOf<Element>, HTMLCollectionOf<SVGElement>, HTMLCollectionOf<HTMLElement>>>.ValueOrNullFromJs($"{_jsThis}.getElementsByTagNameNS({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@namespace))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(localName))})");
    
    
    /// <summary>
    /// Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
    /// </summary>
    /// <param name="root">The root element or node to start traversing on.</param>
    /// <param name="whatToShow">The type of nodes or elements to appear in the node list</param>
    /// <param name="filter">A custom NodeFilter function to use. For more information, see filter. Use null for no filter.</param>
    public NodeIterator? CreateNodeIterator(INode? root, double? whatToShow, Union<JsFunc<INode?, double?>, InlineHasAcceptNode>? filter) => global::Trungnt2910.Browser.WebAssemblyRuntime<NodeIterator>.ValueOrNullFromJs($"{_jsThis}.createNodeIterator({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(root))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(whatToShow))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(filter))})");
    
    
    /// <summary>
    /// Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an "InvalidCharacterError" DOMException will be thrown. If data contains "?&amp;gt;" an "InvalidCharacterError" DOMException will be thrown.
    /// </summary>
    public ProcessingInstruction? CreateProcessingInstruction(string? target, string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime<ProcessingInstruction>.ValueOrNullFromJs($"{_jsThis}.createProcessingInstruction({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(target))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public HTMLCollectionOf<Element>? GetElementsByTagName(string? qualifiedName) => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<Element>>.ValueOrNullFromJs($"{_jsThis}.getElementsByTagName({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(qualifiedName))})");
    
    
    /// <summary>
    /// Gets a collection of objects based on the value of the NAME or ID attribute.
    /// </summary>
    /// <param name="elementName">Gets a collection of objects based on the value of the NAME or ID attribute.</param>
    public NodeListOf<HTMLElement>? GetElementsByName(string? elementName) => global::Trungnt2910.Browser.WebAssemblyRuntime<NodeListOf<HTMLElement>>.ValueOrNullFromJs($"{_jsThis}.getElementsByName({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(elementName))})");
    
    
    /// <summary>
    /// Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.
    /// </summary>
    public HTMLCollectionOf<Element>? GetElementsByClassName(string? classNames) => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLCollectionOf<Element>>.ValueOrNullFromJs($"{_jsThis}.getElementsByClassName({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(classNames))})");
    
    
    /// <summary>
    /// Returns a reference to the first object with the specified value of the ID attribute.
    /// </summary>
    /// <param name="elementId">String that specifies the ID value.</param>
    public HTMLElement? GetElementById(string? elementId) => global::Trungnt2910.Browser.WebAssemblyRuntime<HTMLElement>.ValueOrNullFromJs($"{_jsThis}.getElementById({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(elementId))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ExitPointerLock() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.exitPointerLock()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise? ExitPictureInPicture() => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise>.ValueOrNullFromJs($"{_jsThis}.exitPictureInPicture()");
    
    
    /// <summary>
    /// Stops document's fullscreen element from being displayed fullscreen and resolves promise when done.
    /// </summary>
    public Promise? ExitFullscreen() => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise>.ValueOrNullFromJs($"{_jsThis}.exitFullscreen()");
    
    
    /// <summary>
    /// Executes a command on the current document, current selection, or the given range.
    /// </summary>
    /// <param name="commandId">String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.</param>
    /// <param name="showUI">Display the user interface, defaults to false.</param>
    /// <param name="value">Value to assign.</param>
    [global::System.Obsolete]
    public bool? ExecCommand(string? commandId, bool? showUI, string? value) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.execCommand({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(commandId))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(showUI))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))})");
    
    
    /// <summary>
    /// Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
    /// </summary>
    /// <param name="root">The root element or node to start traversing on.</param>
    /// <param name="whatToShow">The type of nodes or elements to appear in the node list. For more information, see whatToShow.</param>
    /// <param name="filter">A custom NodeFilter function to use.</param>
    public TreeWalker? CreateTreeWalker(INode? root, double? whatToShow, Union<JsFunc<INode?, double?>, InlineHasAcceptNode>? filter) => global::Trungnt2910.Browser.WebAssemblyRuntime<TreeWalker>.ValueOrNullFromJs($"{_jsThis}.createTreeWalker({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(root))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(whatToShow))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(filter))})");
    
    
    /// <summary>
    /// Creates a text string from the specified value.
    /// </summary>
    /// <param name="data">String that specifies the nodeValue property of the text node.</param>
    public Text? CreateTextNode(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime<Text>.ValueOrNullFromJs($"{_jsThis}.createTextNode({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
    /// </summary>
    public Range? CreateRange() => global::Trungnt2910.Browser.WebAssemblyRuntime<Range>.ValueOrNullFromJs($"{_jsThis}.createRange()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IDocumentAndElementEventHandlers.AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IDocumentAndElementEventHandlers.RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Returns the element for the specified x coordinate and the specified y coordinate.
    /// </summary>
    /// <param name="x">The x-offset</param>
    /// <param name="y">The y-offset</param>
    public Element? ElementFromPoint(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.elementFromPoint({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<Element>? ElementsFromPoint(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<Element>>.ValueOrNullFromJs($"{_jsThis}.elementsFromPoint({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<Animation>? GetAnimations() => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<Animation>>.ValueOrNullFromJs($"{_jsThis}.getAnimations()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IGlobalEventHandlers.AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IGlobalEventHandlers.RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Returns the first element within node's descendants whose ID is elementId.
    /// </summary>
    Element? INonElementParentNode.GetElementById(string? elementId) => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.getElementById({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(elementId))})");
    
    
    /// <summary>
    /// Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void Append(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.append({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void Prepend(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.prepend({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public E? QuerySelector<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] E>(string? selectors) where E: global::Trungnt2910.Browser.JsObject, IElement => global::Trungnt2910.Browser.WebAssemblyRuntime<E>.ValueOrNullFromJs($"{_jsThis}.querySelector({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public NodeListOf<E>? QuerySelectorAll<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] E>(string? selectors) where E: global::Trungnt2910.Browser.JsObject, IElement => global::Trungnt2910.Browser.WebAssemblyRuntime<NodeListOf<E>>.ValueOrNullFromJs($"{_jsThis}.querySelectorAll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(selectors))})");
    
    
    /// <summary>
    /// Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.
    /// Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    /// </summary>
    public void ReplaceChildren(params Union<INode, string>?[]? nodes) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.replaceChildren({(string.Join(",", global::System.Linq.Enumerable.Select(nodes ?? global::System.Array.Empty<Union<INode, string>>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public XPathExpression? CreateExpression(string? expression, Union<JsFunc<string?, string?>, InlineHasLookupNamespaceURI>? resolver) => global::Trungnt2910.Browser.WebAssemblyRuntime<XPathExpression>.ValueOrNullFromJs($"{_jsThis}.createExpression({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(expression))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(resolver))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Union<JsFunc<string?, string?>, InlineHasLookupNamespaceURI>? CreateNSResolver(INode? nodeResolver) => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<JsFunc<string?, string?>, InlineHasLookupNamespaceURI>>.ValueOrNullFromJs($"{_jsThis}.createNSResolver({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(nodeResolver))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public XPathResult? Evaluate(string? expression, INode? contextNode, Union<JsFunc<string?, string?>, InlineHasLookupNamespaceURI>? resolver, double? type, XPathResult? result) => global::Trungnt2910.Browser.WebAssemblyRuntime<XPathResult>.ValueOrNullFromJs($"{_jsThis}.evaluate({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(expression))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(contextNode))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(resolver))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(result))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Copy
    {
        add
        {
            _handlersForCopyOfTypeClipboardEvent ??= new();
            if (_handlersForCopyOfTypeClipboardEvent.Count == 0) AddEventListener("copy", _DispatcherForCopyOfTypeClipboardEvent);
            _handlersForCopyOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForCopyOfTypeClipboardEvent != null)
            {
                _handlersForCopyOfTypeClipboardEvent.Remove(value);
                if (_handlersForCopyOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("copy", _DispatcherForCopyOfTypeClipboardEvent);
                    _handlersForCopyOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Copy
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForCopyOfTypeClipboardEvent;
    private void _DispatcherForCopyOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForCopyOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Cut
    {
        add
        {
            _handlersForCutOfTypeClipboardEvent ??= new();
            if (_handlersForCutOfTypeClipboardEvent.Count == 0) AddEventListener("cut", _DispatcherForCutOfTypeClipboardEvent);
            _handlersForCutOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForCutOfTypeClipboardEvent != null)
            {
                _handlersForCutOfTypeClipboardEvent.Remove(value);
                if (_handlersForCutOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("cut", _DispatcherForCutOfTypeClipboardEvent);
                    _handlersForCutOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Cut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForCutOfTypeClipboardEvent;
    private void _DispatcherForCutOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForCutOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ClipboardEvent?> Paste
    {
        add
        {
            _handlersForPasteOfTypeClipboardEvent ??= new();
            if (_handlersForPasteOfTypeClipboardEvent.Count == 0) AddEventListener("paste", _DispatcherForPasteOfTypeClipboardEvent);
            _handlersForPasteOfTypeClipboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForPasteOfTypeClipboardEvent != null)
            {
                _handlersForPasteOfTypeClipboardEvent.Remove(value);
                if (_handlersForPasteOfTypeClipboardEvent.Count == 0)
                {
                    RemoveEventListener("paste", _DispatcherForPasteOfTypeClipboardEvent);
                    _handlersForPasteOfTypeClipboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Paste
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ClipboardEvent?>>? _handlersForPasteOfTypeClipboardEvent;
    private void _DispatcherForPasteOfTypeClipboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPasteOfTypeClipboardEvent!) handler?.Invoke(castedSender, args?.Cast<ClipboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<UIEvent?> WhenAborted
    {
        add
        {
            _handlersForWhenAbortedOfTypeUIEvent ??= new();
            if (_handlersForWhenAbortedOfTypeUIEvent.Count == 0) AddEventListener("abort", _DispatcherForWhenAbortedOfTypeUIEvent);
            _handlersForWhenAbortedOfTypeUIEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenAbortedOfTypeUIEvent != null)
            {
                _handlersForWhenAbortedOfTypeUIEvent.Remove(value);
                if (_handlersForWhenAbortedOfTypeUIEvent.Count == 0)
                {
                    RemoveEventListener("abort", _DispatcherForWhenAbortedOfTypeUIEvent);
                    _handlersForWhenAbortedOfTypeUIEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenAborted
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<UIEvent?>>? _handlersForWhenAbortedOfTypeUIEvent;
    private void _DispatcherForWhenAbortedOfTypeUIEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForWhenAbortedOfTypeUIEvent!) handler?.Invoke(castedSender, args?.Cast<UIEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationCancel
    {
        add
        {
            _handlersForAnimationCancelOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationCancelOfTypeAnimationEvent.Count == 0) AddEventListener("animationcancel", _DispatcherForAnimationCancelOfTypeAnimationEvent);
            _handlersForAnimationCancelOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationCancelOfTypeAnimationEvent != null)
            {
                _handlersForAnimationCancelOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationCancelOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationcancel", _DispatcherForAnimationCancelOfTypeAnimationEvent);
                    _handlersForAnimationCancelOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationCancelOfTypeAnimationEvent;
    private void _DispatcherForAnimationCancelOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForAnimationCancelOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationEnd
    {
        add
        {
            _handlersForAnimationEndOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationEndOfTypeAnimationEvent.Count == 0) AddEventListener("animationend", _DispatcherForAnimationEndOfTypeAnimationEvent);
            _handlersForAnimationEndOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationEndOfTypeAnimationEvent != null)
            {
                _handlersForAnimationEndOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationEndOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationend", _DispatcherForAnimationEndOfTypeAnimationEvent);
                    _handlersForAnimationEndOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationEndOfTypeAnimationEvent;
    private void _DispatcherForAnimationEndOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForAnimationEndOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationIteration
    {
        add
        {
            _handlersForAnimationIterationOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationIterationOfTypeAnimationEvent.Count == 0) AddEventListener("animationiteration", _DispatcherForAnimationIterationOfTypeAnimationEvent);
            _handlersForAnimationIterationOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationIterationOfTypeAnimationEvent != null)
            {
                _handlersForAnimationIterationOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationIterationOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationiteration", _DispatcherForAnimationIterationOfTypeAnimationEvent);
                    _handlersForAnimationIterationOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationIteration
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationIterationOfTypeAnimationEvent;
    private void _DispatcherForAnimationIterationOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForAnimationIterationOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationStart
    {
        add
        {
            _handlersForAnimationStartOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationStartOfTypeAnimationEvent.Count == 0) AddEventListener("animationstart", _DispatcherForAnimationStartOfTypeAnimationEvent);
            _handlersForAnimationStartOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationStartOfTypeAnimationEvent != null)
            {
                _handlersForAnimationStartOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationStartOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationstart", _DispatcherForAnimationStartOfTypeAnimationEvent);
                    _handlersForAnimationStartOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationStartOfTypeAnimationEvent;
    private void _DispatcherForAnimationStartOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForAnimationStartOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> AuxClick
    {
        add
        {
            _handlersForAuxClickOfTypeMouseEvent ??= new();
            if (_handlersForAuxClickOfTypeMouseEvent.Count == 0) AddEventListener("auxclick", _DispatcherForAuxClickOfTypeMouseEvent);
            _handlersForAuxClickOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForAuxClickOfTypeMouseEvent != null)
            {
                _handlersForAuxClickOfTypeMouseEvent.Remove(value);
                if (_handlersForAuxClickOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("auxclick", _DispatcherForAuxClickOfTypeMouseEvent);
                    _handlersForAuxClickOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AuxClick
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForAuxClickOfTypeMouseEvent;
    private void _DispatcherForAuxClickOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForAuxClickOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<InputEvent?> BeforeInput
    {
        add
        {
            _handlersForBeforeInputOfTypeInputEvent ??= new();
            if (_handlersForBeforeInputOfTypeInputEvent.Count == 0) AddEventListener("beforeinput", _DispatcherForBeforeInputOfTypeInputEvent);
            _handlersForBeforeInputOfTypeInputEvent.Add(value);
        }
        remove
        {
            if (_handlersForBeforeInputOfTypeInputEvent != null)
            {
                _handlersForBeforeInputOfTypeInputEvent.Remove(value);
                if (_handlersForBeforeInputOfTypeInputEvent.Count == 0)
                {
                    RemoveEventListener("beforeinput", _DispatcherForBeforeInputOfTypeInputEvent);
                    _handlersForBeforeInputOfTypeInputEvent = null;
                }
            }
        }
    }
    #region Internal event management members for BeforeInput
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<InputEvent?>>? _handlersForBeforeInputOfTypeInputEvent;
    private void _DispatcherForBeforeInputOfTypeInputEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForBeforeInputOfTypeInputEvent!) handler?.Invoke(castedSender, args?.Cast<InputEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> Blurred
    {
        add
        {
            _handlersForBlurredOfTypeFocusEvent ??= new();
            if (_handlersForBlurredOfTypeFocusEvent.Count == 0) AddEventListener("blur", _DispatcherForBlurredOfTypeFocusEvent);
            _handlersForBlurredOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForBlurredOfTypeFocusEvent != null)
            {
                _handlersForBlurredOfTypeFocusEvent.Remove(value);
                if (_handlersForBlurredOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("blur", _DispatcherForBlurredOfTypeFocusEvent);
                    _handlersForBlurredOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Blurred
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForBlurredOfTypeFocusEvent;
    private void _DispatcherForBlurredOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForBlurredOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CanPlay
    {
        add => AddEventListener("canplay", value);
        remove => RemoveEventListener("canplay", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CanPlayThrough
    {
        add => AddEventListener("canplaythrough", value);
        remove => RemoveEventListener("canplaythrough", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Change
    {
        add => AddEventListener("change", value);
        remove => RemoveEventListener("change", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> Clicked
    {
        add
        {
            _handlersForClickedOfTypeMouseEvent ??= new();
            if (_handlersForClickedOfTypeMouseEvent.Count == 0) AddEventListener("click", _DispatcherForClickedOfTypeMouseEvent);
            _handlersForClickedOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForClickedOfTypeMouseEvent != null)
            {
                _handlersForClickedOfTypeMouseEvent.Remove(value);
                if (_handlersForClickedOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("click", _DispatcherForClickedOfTypeMouseEvent);
                    _handlersForClickedOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Clicked
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForClickedOfTypeMouseEvent;
    private void _DispatcherForClickedOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForClickedOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenClosed
    {
        add => AddEventListener("close", value);
        remove => RemoveEventListener("close", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionEnd
    {
        add
        {
            _handlersForCompositionEndOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionEndOfTypeCompositionEvent.Count == 0) AddEventListener("compositionend", _DispatcherForCompositionEndOfTypeCompositionEvent);
            _handlersForCompositionEndOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionEndOfTypeCompositionEvent != null)
            {
                _handlersForCompositionEndOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionEndOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionend", _DispatcherForCompositionEndOfTypeCompositionEvent);
                    _handlersForCompositionEndOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionEndOfTypeCompositionEvent;
    private void _DispatcherForCompositionEndOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForCompositionEndOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionStart
    {
        add
        {
            _handlersForCompositionStartOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionStartOfTypeCompositionEvent.Count == 0) AddEventListener("compositionstart", _DispatcherForCompositionStartOfTypeCompositionEvent);
            _handlersForCompositionStartOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionStartOfTypeCompositionEvent != null)
            {
                _handlersForCompositionStartOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionStartOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionstart", _DispatcherForCompositionStartOfTypeCompositionEvent);
                    _handlersForCompositionStartOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionStartOfTypeCompositionEvent;
    private void _DispatcherForCompositionStartOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForCompositionStartOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionUpdate
    {
        add
        {
            _handlersForCompositionUpdateOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionUpdateOfTypeCompositionEvent.Count == 0) AddEventListener("compositionupdate", _DispatcherForCompositionUpdateOfTypeCompositionEvent);
            _handlersForCompositionUpdateOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionUpdateOfTypeCompositionEvent != null)
            {
                _handlersForCompositionUpdateOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionUpdateOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionupdate", _DispatcherForCompositionUpdateOfTypeCompositionEvent);
                    _handlersForCompositionUpdateOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionUpdate
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionUpdateOfTypeCompositionEvent;
    private void _DispatcherForCompositionUpdateOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForCompositionUpdateOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> ContextMenu
    {
        add
        {
            _handlersForContextMenuOfTypeMouseEvent ??= new();
            if (_handlersForContextMenuOfTypeMouseEvent.Count == 0) AddEventListener("contextmenu", _DispatcherForContextMenuOfTypeMouseEvent);
            _handlersForContextMenuOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForContextMenuOfTypeMouseEvent != null)
            {
                _handlersForContextMenuOfTypeMouseEvent.Remove(value);
                if (_handlersForContextMenuOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("contextmenu", _DispatcherForContextMenuOfTypeMouseEvent);
                    _handlersForContextMenuOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for ContextMenu
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForContextMenuOfTypeMouseEvent;
    private void _DispatcherForContextMenuOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForContextMenuOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CueChange
    {
        add => AddEventListener("cuechange", value);
        remove => RemoveEventListener("cuechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> DblClick
    {
        add
        {
            _handlersForDblClickOfTypeMouseEvent ??= new();
            if (_handlersForDblClickOfTypeMouseEvent.Count == 0) AddEventListener("dblclick", _DispatcherForDblClickOfTypeMouseEvent);
            _handlersForDblClickOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForDblClickOfTypeMouseEvent != null)
            {
                _handlersForDblClickOfTypeMouseEvent.Remove(value);
                if (_handlersForDblClickOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("dblclick", _DispatcherForDblClickOfTypeMouseEvent);
                    _handlersForDblClickOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DblClick
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForDblClickOfTypeMouseEvent;
    private void _DispatcherForDblClickOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDblClickOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> Drag
    {
        add
        {
            _handlersForDragOfTypeDragEvent ??= new();
            if (_handlersForDragOfTypeDragEvent.Count == 0) AddEventListener("drag", _DispatcherForDragOfTypeDragEvent);
            _handlersForDragOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragOfTypeDragEvent != null)
            {
                _handlersForDragOfTypeDragEvent.Remove(value);
                if (_handlersForDragOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("drag", _DispatcherForDragOfTypeDragEvent);
                    _handlersForDragOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Drag
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragOfTypeDragEvent;
    private void _DispatcherForDragOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDragOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragEnd
    {
        add
        {
            _handlersForDragEndOfTypeDragEvent ??= new();
            if (_handlersForDragEndOfTypeDragEvent.Count == 0) AddEventListener("dragend", _DispatcherForDragEndOfTypeDragEvent);
            _handlersForDragEndOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragEndOfTypeDragEvent != null)
            {
                _handlersForDragEndOfTypeDragEvent.Remove(value);
                if (_handlersForDragEndOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragend", _DispatcherForDragEndOfTypeDragEvent);
                    _handlersForDragEndOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragEndOfTypeDragEvent;
    private void _DispatcherForDragEndOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDragEndOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragEnter
    {
        add
        {
            _handlersForDragEnterOfTypeDragEvent ??= new();
            if (_handlersForDragEnterOfTypeDragEvent.Count == 0) AddEventListener("dragenter", _DispatcherForDragEnterOfTypeDragEvent);
            _handlersForDragEnterOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragEnterOfTypeDragEvent != null)
            {
                _handlersForDragEnterOfTypeDragEvent.Remove(value);
                if (_handlersForDragEnterOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragenter", _DispatcherForDragEnterOfTypeDragEvent);
                    _handlersForDragEnterOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragEnterOfTypeDragEvent;
    private void _DispatcherForDragEnterOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDragEnterOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragLeave
    {
        add
        {
            _handlersForDragLeaveOfTypeDragEvent ??= new();
            if (_handlersForDragLeaveOfTypeDragEvent.Count == 0) AddEventListener("dragleave", _DispatcherForDragLeaveOfTypeDragEvent);
            _handlersForDragLeaveOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragLeaveOfTypeDragEvent != null)
            {
                _handlersForDragLeaveOfTypeDragEvent.Remove(value);
                if (_handlersForDragLeaveOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragleave", _DispatcherForDragLeaveOfTypeDragEvent);
                    _handlersForDragLeaveOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragLeaveOfTypeDragEvent;
    private void _DispatcherForDragLeaveOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDragLeaveOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragOver
    {
        add
        {
            _handlersForDragOverOfTypeDragEvent ??= new();
            if (_handlersForDragOverOfTypeDragEvent.Count == 0) AddEventListener("dragover", _DispatcherForDragOverOfTypeDragEvent);
            _handlersForDragOverOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragOverOfTypeDragEvent != null)
            {
                _handlersForDragOverOfTypeDragEvent.Remove(value);
                if (_handlersForDragOverOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragover", _DispatcherForDragOverOfTypeDragEvent);
                    _handlersForDragOverOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragOverOfTypeDragEvent;
    private void _DispatcherForDragOverOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDragOverOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragStart
    {
        add
        {
            _handlersForDragStartOfTypeDragEvent ??= new();
            if (_handlersForDragStartOfTypeDragEvent.Count == 0) AddEventListener("dragstart", _DispatcherForDragStartOfTypeDragEvent);
            _handlersForDragStartOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragStartOfTypeDragEvent != null)
            {
                _handlersForDragStartOfTypeDragEvent.Remove(value);
                if (_handlersForDragStartOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragstart", _DispatcherForDragStartOfTypeDragEvent);
                    _handlersForDragStartOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragStartOfTypeDragEvent;
    private void _DispatcherForDragStartOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDragStartOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> Drop
    {
        add
        {
            _handlersForDropOfTypeDragEvent ??= new();
            if (_handlersForDropOfTypeDragEvent.Count == 0) AddEventListener("drop", _DispatcherForDropOfTypeDragEvent);
            _handlersForDropOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDropOfTypeDragEvent != null)
            {
                _handlersForDropOfTypeDragEvent.Remove(value);
                if (_handlersForDropOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("drop", _DispatcherForDropOfTypeDragEvent);
                    _handlersForDropOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Drop
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDropOfTypeDragEvent;
    private void _DispatcherForDropOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForDropOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> DurationChange
    {
        add => AddEventListener("durationchange", value);
        remove => RemoveEventListener("durationchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Emptied
    {
        add => AddEventListener("emptied", value);
        remove => RemoveEventListener("emptied", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenEnded
    {
        add => AddEventListener("ended", value);
        remove => RemoveEventListener("ended", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ErrorEvent?> Errored
    {
        add
        {
            _handlersForErroredOfTypeErrorEvent ??= new();
            if (_handlersForErroredOfTypeErrorEvent.Count == 0) AddEventListener("error", _DispatcherForErroredOfTypeErrorEvent);
            _handlersForErroredOfTypeErrorEvent.Add(value);
        }
        remove
        {
            if (_handlersForErroredOfTypeErrorEvent != null)
            {
                _handlersForErroredOfTypeErrorEvent.Remove(value);
                if (_handlersForErroredOfTypeErrorEvent.Count == 0)
                {
                    RemoveEventListener("error", _DispatcherForErroredOfTypeErrorEvent);
                    _handlersForErroredOfTypeErrorEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Errored
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ErrorEvent?>>? _handlersForErroredOfTypeErrorEvent;
    private void _DispatcherForErroredOfTypeErrorEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForErroredOfTypeErrorEvent!) handler?.Invoke(castedSender, args?.Cast<ErrorEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> Focused
    {
        add
        {
            _handlersForFocusedOfTypeFocusEvent ??= new();
            if (_handlersForFocusedOfTypeFocusEvent.Count == 0) AddEventListener("focus", _DispatcherForFocusedOfTypeFocusEvent);
            _handlersForFocusedOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusedOfTypeFocusEvent != null)
            {
                _handlersForFocusedOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusedOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focus", _DispatcherForFocusedOfTypeFocusEvent);
                    _handlersForFocusedOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Focused
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusedOfTypeFocusEvent;
    private void _DispatcherForFocusedOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForFocusedOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> FocusIn
    {
        add
        {
            _handlersForFocusInOfTypeFocusEvent ??= new();
            if (_handlersForFocusInOfTypeFocusEvent.Count == 0) AddEventListener("focusin", _DispatcherForFocusInOfTypeFocusEvent);
            _handlersForFocusInOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusInOfTypeFocusEvent != null)
            {
                _handlersForFocusInOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusInOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focusin", _DispatcherForFocusInOfTypeFocusEvent);
                    _handlersForFocusInOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FocusIn
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusInOfTypeFocusEvent;
    private void _DispatcherForFocusInOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForFocusInOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> FocusOut
    {
        add
        {
            _handlersForFocusOutOfTypeFocusEvent ??= new();
            if (_handlersForFocusOutOfTypeFocusEvent.Count == 0) AddEventListener("focusout", _DispatcherForFocusOutOfTypeFocusEvent);
            _handlersForFocusOutOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusOutOfTypeFocusEvent != null)
            {
                _handlersForFocusOutOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusOutOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focusout", _DispatcherForFocusOutOfTypeFocusEvent);
                    _handlersForFocusOutOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FocusOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusOutOfTypeFocusEvent;
    private void _DispatcherForFocusOutOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForFocusOutOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FormDataEvent?> FormData
    {
        add
        {
            _handlersForFormDataOfTypeFormDataEvent ??= new();
            if (_handlersForFormDataOfTypeFormDataEvent.Count == 0) AddEventListener("formdata", _DispatcherForFormDataOfTypeFormDataEvent);
            _handlersForFormDataOfTypeFormDataEvent.Add(value);
        }
        remove
        {
            if (_handlersForFormDataOfTypeFormDataEvent != null)
            {
                _handlersForFormDataOfTypeFormDataEvent.Remove(value);
                if (_handlersForFormDataOfTypeFormDataEvent.Count == 0)
                {
                    RemoveEventListener("formdata", _DispatcherForFormDataOfTypeFormDataEvent);
                    _handlersForFormDataOfTypeFormDataEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FormData
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FormDataEvent?>>? _handlersForFormDataOfTypeFormDataEvent;
    private void _DispatcherForFormDataOfTypeFormDataEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForFormDataOfTypeFormDataEvent!) handler?.Invoke(castedSender, args?.Cast<FormDataEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> GotPointerCapture
    {
        add
        {
            _handlersForGotPointerCaptureOfTypePointerEvent ??= new();
            if (_handlersForGotPointerCaptureOfTypePointerEvent.Count == 0) AddEventListener("gotpointercapture", _DispatcherForGotPointerCaptureOfTypePointerEvent);
            _handlersForGotPointerCaptureOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForGotPointerCaptureOfTypePointerEvent != null)
            {
                _handlersForGotPointerCaptureOfTypePointerEvent.Remove(value);
                if (_handlersForGotPointerCaptureOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("gotpointercapture", _DispatcherForGotPointerCaptureOfTypePointerEvent);
                    _handlersForGotPointerCaptureOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for GotPointerCapture
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForGotPointerCaptureOfTypePointerEvent;
    private void _DispatcherForGotPointerCaptureOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForGotPointerCaptureOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Input
    {
        add => AddEventListener("input", value);
        remove => RemoveEventListener("input", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Invalid
    {
        add => AddEventListener("invalid", value);
        remove => RemoveEventListener("invalid", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyDown
    {
        add
        {
            _handlersForKeyDownOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyDownOfTypeKeyboardEvent.Count == 0) AddEventListener("keydown", _DispatcherForKeyDownOfTypeKeyboardEvent);
            _handlersForKeyDownOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyDownOfTypeKeyboardEvent != null)
            {
                _handlersForKeyDownOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyDownOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keydown", _DispatcherForKeyDownOfTypeKeyboardEvent);
                    _handlersForKeyDownOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyDownOfTypeKeyboardEvent;
    private void _DispatcherForKeyDownOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForKeyDownOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyPress
    {
        add
        {
            _handlersForKeyPressOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyPressOfTypeKeyboardEvent.Count == 0) AddEventListener("keypress", _DispatcherForKeyPressOfTypeKeyboardEvent);
            _handlersForKeyPressOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyPressOfTypeKeyboardEvent != null)
            {
                _handlersForKeyPressOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyPressOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keypress", _DispatcherForKeyPressOfTypeKeyboardEvent);
                    _handlersForKeyPressOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyPress
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyPressOfTypeKeyboardEvent;
    private void _DispatcherForKeyPressOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForKeyPressOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyUp
    {
        add
        {
            _handlersForKeyUpOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyUpOfTypeKeyboardEvent.Count == 0) AddEventListener("keyup", _DispatcherForKeyUpOfTypeKeyboardEvent);
            _handlersForKeyUpOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyUpOfTypeKeyboardEvent != null)
            {
                _handlersForKeyUpOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyUpOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keyup", _DispatcherForKeyUpOfTypeKeyboardEvent);
                    _handlersForKeyUpOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyUpOfTypeKeyboardEvent;
    private void _DispatcherForKeyUpOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForKeyUpOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Loaded
    {
        add => AddEventListener("load", value);
        remove => RemoveEventListener("load", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadedData
    {
        add => AddEventListener("loadeddata", value);
        remove => RemoveEventListener("loadeddata", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadedMetadata
    {
        add => AddEventListener("loadedmetadata", value);
        remove => RemoveEventListener("loadedmetadata", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadStart
    {
        add => AddEventListener("loadstart", value);
        remove => RemoveEventListener("loadstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> LostPointerCapture
    {
        add
        {
            _handlersForLostPointerCaptureOfTypePointerEvent ??= new();
            if (_handlersForLostPointerCaptureOfTypePointerEvent.Count == 0) AddEventListener("lostpointercapture", _DispatcherForLostPointerCaptureOfTypePointerEvent);
            _handlersForLostPointerCaptureOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForLostPointerCaptureOfTypePointerEvent != null)
            {
                _handlersForLostPointerCaptureOfTypePointerEvent.Remove(value);
                if (_handlersForLostPointerCaptureOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("lostpointercapture", _DispatcherForLostPointerCaptureOfTypePointerEvent);
                    _handlersForLostPointerCaptureOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for LostPointerCapture
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForLostPointerCaptureOfTypePointerEvent;
    private void _DispatcherForLostPointerCaptureOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForLostPointerCaptureOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseDown
    {
        add
        {
            _handlersForMouseDownOfTypeMouseEvent ??= new();
            if (_handlersForMouseDownOfTypeMouseEvent.Count == 0) AddEventListener("mousedown", _DispatcherForMouseDownOfTypeMouseEvent);
            _handlersForMouseDownOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseDownOfTypeMouseEvent != null)
            {
                _handlersForMouseDownOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseDownOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mousedown", _DispatcherForMouseDownOfTypeMouseEvent);
                    _handlersForMouseDownOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseDownOfTypeMouseEvent;
    private void _DispatcherForMouseDownOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForMouseDownOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseEnter
    {
        add
        {
            _handlersForMouseEnterOfTypeMouseEvent ??= new();
            if (_handlersForMouseEnterOfTypeMouseEvent.Count == 0) AddEventListener("mouseenter", _DispatcherForMouseEnterOfTypeMouseEvent);
            _handlersForMouseEnterOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseEnterOfTypeMouseEvent != null)
            {
                _handlersForMouseEnterOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseEnterOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseenter", _DispatcherForMouseEnterOfTypeMouseEvent);
                    _handlersForMouseEnterOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseEnterOfTypeMouseEvent;
    private void _DispatcherForMouseEnterOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForMouseEnterOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseLeave
    {
        add
        {
            _handlersForMouseLeaveOfTypeMouseEvent ??= new();
            if (_handlersForMouseLeaveOfTypeMouseEvent.Count == 0) AddEventListener("mouseleave", _DispatcherForMouseLeaveOfTypeMouseEvent);
            _handlersForMouseLeaveOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseLeaveOfTypeMouseEvent != null)
            {
                _handlersForMouseLeaveOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseLeaveOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseleave", _DispatcherForMouseLeaveOfTypeMouseEvent);
                    _handlersForMouseLeaveOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseLeaveOfTypeMouseEvent;
    private void _DispatcherForMouseLeaveOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForMouseLeaveOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseMove
    {
        add
        {
            _handlersForMouseMoveOfTypeMouseEvent ??= new();
            if (_handlersForMouseMoveOfTypeMouseEvent.Count == 0) AddEventListener("mousemove", _DispatcherForMouseMoveOfTypeMouseEvent);
            _handlersForMouseMoveOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseMoveOfTypeMouseEvent != null)
            {
                _handlersForMouseMoveOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseMoveOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mousemove", _DispatcherForMouseMoveOfTypeMouseEvent);
                    _handlersForMouseMoveOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseMoveOfTypeMouseEvent;
    private void _DispatcherForMouseMoveOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForMouseMoveOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseOut
    {
        add
        {
            _handlersForMouseOutOfTypeMouseEvent ??= new();
            if (_handlersForMouseOutOfTypeMouseEvent.Count == 0) AddEventListener("mouseout", _DispatcherForMouseOutOfTypeMouseEvent);
            _handlersForMouseOutOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseOutOfTypeMouseEvent != null)
            {
                _handlersForMouseOutOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseOutOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseout", _DispatcherForMouseOutOfTypeMouseEvent);
                    _handlersForMouseOutOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseOutOfTypeMouseEvent;
    private void _DispatcherForMouseOutOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForMouseOutOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseOver
    {
        add
        {
            _handlersForMouseOverOfTypeMouseEvent ??= new();
            if (_handlersForMouseOverOfTypeMouseEvent.Count == 0) AddEventListener("mouseover", _DispatcherForMouseOverOfTypeMouseEvent);
            _handlersForMouseOverOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseOverOfTypeMouseEvent != null)
            {
                _handlersForMouseOverOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseOverOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseover", _DispatcherForMouseOverOfTypeMouseEvent);
                    _handlersForMouseOverOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseOverOfTypeMouseEvent;
    private void _DispatcherForMouseOverOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForMouseOverOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseUp
    {
        add
        {
            _handlersForMouseUpOfTypeMouseEvent ??= new();
            if (_handlersForMouseUpOfTypeMouseEvent.Count == 0) AddEventListener("mouseup", _DispatcherForMouseUpOfTypeMouseEvent);
            _handlersForMouseUpOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseUpOfTypeMouseEvent != null)
            {
                _handlersForMouseUpOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseUpOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseup", _DispatcherForMouseUpOfTypeMouseEvent);
                    _handlersForMouseUpOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseUpOfTypeMouseEvent;
    private void _DispatcherForMouseUpOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForMouseUpOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenPaused
    {
        add => AddEventListener("pause", value);
        remove => RemoveEventListener("pause", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenPlayed
    {
        add => AddEventListener("play", value);
        remove => RemoveEventListener("play", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Playing
    {
        add => AddEventListener("playing", value);
        remove => RemoveEventListener("playing", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerCancel
    {
        add
        {
            _handlersForPointerCancelOfTypePointerEvent ??= new();
            if (_handlersForPointerCancelOfTypePointerEvent.Count == 0) AddEventListener("pointercancel", _DispatcherForPointerCancelOfTypePointerEvent);
            _handlersForPointerCancelOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerCancelOfTypePointerEvent != null)
            {
                _handlersForPointerCancelOfTypePointerEvent.Remove(value);
                if (_handlersForPointerCancelOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointercancel", _DispatcherForPointerCancelOfTypePointerEvent);
                    _handlersForPointerCancelOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerCancelOfTypePointerEvent;
    private void _DispatcherForPointerCancelOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerCancelOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerDown
    {
        add
        {
            _handlersForPointerDownOfTypePointerEvent ??= new();
            if (_handlersForPointerDownOfTypePointerEvent.Count == 0) AddEventListener("pointerdown", _DispatcherForPointerDownOfTypePointerEvent);
            _handlersForPointerDownOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerDownOfTypePointerEvent != null)
            {
                _handlersForPointerDownOfTypePointerEvent.Remove(value);
                if (_handlersForPointerDownOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerdown", _DispatcherForPointerDownOfTypePointerEvent);
                    _handlersForPointerDownOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerDownOfTypePointerEvent;
    private void _DispatcherForPointerDownOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerDownOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerEnter
    {
        add
        {
            _handlersForPointerEnterOfTypePointerEvent ??= new();
            if (_handlersForPointerEnterOfTypePointerEvent.Count == 0) AddEventListener("pointerenter", _DispatcherForPointerEnterOfTypePointerEvent);
            _handlersForPointerEnterOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerEnterOfTypePointerEvent != null)
            {
                _handlersForPointerEnterOfTypePointerEvent.Remove(value);
                if (_handlersForPointerEnterOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerenter", _DispatcherForPointerEnterOfTypePointerEvent);
                    _handlersForPointerEnterOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerEnterOfTypePointerEvent;
    private void _DispatcherForPointerEnterOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerEnterOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerLeave
    {
        add
        {
            _handlersForPointerLeaveOfTypePointerEvent ??= new();
            if (_handlersForPointerLeaveOfTypePointerEvent.Count == 0) AddEventListener("pointerleave", _DispatcherForPointerLeaveOfTypePointerEvent);
            _handlersForPointerLeaveOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerLeaveOfTypePointerEvent != null)
            {
                _handlersForPointerLeaveOfTypePointerEvent.Remove(value);
                if (_handlersForPointerLeaveOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerleave", _DispatcherForPointerLeaveOfTypePointerEvent);
                    _handlersForPointerLeaveOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerLeaveOfTypePointerEvent;
    private void _DispatcherForPointerLeaveOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerLeaveOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerMove
    {
        add
        {
            _handlersForPointerMoveOfTypePointerEvent ??= new();
            if (_handlersForPointerMoveOfTypePointerEvent.Count == 0) AddEventListener("pointermove", _DispatcherForPointerMoveOfTypePointerEvent);
            _handlersForPointerMoveOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerMoveOfTypePointerEvent != null)
            {
                _handlersForPointerMoveOfTypePointerEvent.Remove(value);
                if (_handlersForPointerMoveOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointermove", _DispatcherForPointerMoveOfTypePointerEvent);
                    _handlersForPointerMoveOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerMoveOfTypePointerEvent;
    private void _DispatcherForPointerMoveOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerMoveOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerOut
    {
        add
        {
            _handlersForPointerOutOfTypePointerEvent ??= new();
            if (_handlersForPointerOutOfTypePointerEvent.Count == 0) AddEventListener("pointerout", _DispatcherForPointerOutOfTypePointerEvent);
            _handlersForPointerOutOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerOutOfTypePointerEvent != null)
            {
                _handlersForPointerOutOfTypePointerEvent.Remove(value);
                if (_handlersForPointerOutOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerout", _DispatcherForPointerOutOfTypePointerEvent);
                    _handlersForPointerOutOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerOutOfTypePointerEvent;
    private void _DispatcherForPointerOutOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerOutOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerOver
    {
        add
        {
            _handlersForPointerOverOfTypePointerEvent ??= new();
            if (_handlersForPointerOverOfTypePointerEvent.Count == 0) AddEventListener("pointerover", _DispatcherForPointerOverOfTypePointerEvent);
            _handlersForPointerOverOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerOverOfTypePointerEvent != null)
            {
                _handlersForPointerOverOfTypePointerEvent.Remove(value);
                if (_handlersForPointerOverOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerover", _DispatcherForPointerOverOfTypePointerEvent);
                    _handlersForPointerOverOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerOverOfTypePointerEvent;
    private void _DispatcherForPointerOverOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerOverOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerUp
    {
        add
        {
            _handlersForPointerUpOfTypePointerEvent ??= new();
            if (_handlersForPointerUpOfTypePointerEvent.Count == 0) AddEventListener("pointerup", _DispatcherForPointerUpOfTypePointerEvent);
            _handlersForPointerUpOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerUpOfTypePointerEvent != null)
            {
                _handlersForPointerUpOfTypePointerEvent.Remove(value);
                if (_handlersForPointerUpOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerup", _DispatcherForPointerUpOfTypePointerEvent);
                    _handlersForPointerUpOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerUpOfTypePointerEvent;
    private void _DispatcherForPointerUpOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForPointerUpOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ProgressEvent?> Progress
    {
        add
        {
            _handlersForProgressOfTypeProgressEvent ??= new();
            if (_handlersForProgressOfTypeProgressEvent.Count == 0) AddEventListener("progress", _DispatcherForProgressOfTypeProgressEvent);
            _handlersForProgressOfTypeProgressEvent.Add(value);
        }
        remove
        {
            if (_handlersForProgressOfTypeProgressEvent != null)
            {
                _handlersForProgressOfTypeProgressEvent.Remove(value);
                if (_handlersForProgressOfTypeProgressEvent.Count == 0)
                {
                    RemoveEventListener("progress", _DispatcherForProgressOfTypeProgressEvent);
                    _handlersForProgressOfTypeProgressEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Progress
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ProgressEvent?>>? _handlersForProgressOfTypeProgressEvent;
    private void _DispatcherForProgressOfTypeProgressEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForProgressOfTypeProgressEvent!) handler?.Invoke(castedSender, args?.Cast<ProgressEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> RateChange
    {
        add => AddEventListener("ratechange", value);
        remove => RemoveEventListener("ratechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenReset
    {
        add => AddEventListener("reset", value);
        remove => RemoveEventListener("reset", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<UIEvent?> Resize
    {
        add
        {
            _handlersForResizeOfTypeUIEvent ??= new();
            if (_handlersForResizeOfTypeUIEvent.Count == 0) AddEventListener("resize", _DispatcherForResizeOfTypeUIEvent);
            _handlersForResizeOfTypeUIEvent.Add(value);
        }
        remove
        {
            if (_handlersForResizeOfTypeUIEvent != null)
            {
                _handlersForResizeOfTypeUIEvent.Remove(value);
                if (_handlersForResizeOfTypeUIEvent.Count == 0)
                {
                    RemoveEventListener("resize", _DispatcherForResizeOfTypeUIEvent);
                    _handlersForResizeOfTypeUIEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Resize
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<UIEvent?>>? _handlersForResizeOfTypeUIEvent;
    private void _DispatcherForResizeOfTypeUIEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForResizeOfTypeUIEvent!) handler?.Invoke(castedSender, args?.Cast<UIEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Scrolled
    {
        add => AddEventListener("scroll", value);
        remove => RemoveEventListener("scroll", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SecurityPolicyViolationEvent?> SecurityPolicyViolation
    {
        add
        {
            _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent ??= new();
            if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Count == 0) AddEventListener("securitypolicyviolation", _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent);
            _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Add(value);
        }
        remove
        {
            if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent != null)
            {
                _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Remove(value);
                if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Count == 0)
                {
                    RemoveEventListener("securitypolicyviolation", _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent);
                    _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for SecurityPolicyViolation
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SecurityPolicyViolationEvent?>>? _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent;
    private void _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent!) handler?.Invoke(castedSender, args?.Cast<SecurityPolicyViolationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Seeked
    {
        add => AddEventListener("seeked", value);
        remove => RemoveEventListener("seeked", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenSeeking
    {
        add => AddEventListener("seeking", value);
        remove => RemoveEventListener("seeking", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenSelected
    {
        add => AddEventListener("select", value);
        remove => RemoveEventListener("select", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SelectionChange
    {
        add => AddEventListener("selectionchange", value);
        remove => RemoveEventListener("selectionchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SelectStart
    {
        add => AddEventListener("selectstart", value);
        remove => RemoveEventListener("selectstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SlotChange
    {
        add => AddEventListener("slotchange", value);
        remove => RemoveEventListener("slotchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Stalled
    {
        add => AddEventListener("stalled", value);
        remove => RemoveEventListener("stalled", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SubmitEvent?> Submitted
    {
        add
        {
            _handlersForSubmittedOfTypeSubmitEvent ??= new();
            if (_handlersForSubmittedOfTypeSubmitEvent.Count == 0) AddEventListener("submit", _DispatcherForSubmittedOfTypeSubmitEvent);
            _handlersForSubmittedOfTypeSubmitEvent.Add(value);
        }
        remove
        {
            if (_handlersForSubmittedOfTypeSubmitEvent != null)
            {
                _handlersForSubmittedOfTypeSubmitEvent.Remove(value);
                if (_handlersForSubmittedOfTypeSubmitEvent.Count == 0)
                {
                    RemoveEventListener("submit", _DispatcherForSubmittedOfTypeSubmitEvent);
                    _handlersForSubmittedOfTypeSubmitEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Submitted
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SubmitEvent?>>? _handlersForSubmittedOfTypeSubmitEvent;
    private void _DispatcherForSubmittedOfTypeSubmitEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForSubmittedOfTypeSubmitEvent!) handler?.Invoke(castedSender, args?.Cast<SubmitEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Suspend
    {
        add => AddEventListener("suspend", value);
        remove => RemoveEventListener("suspend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> TimeUpdate
    {
        add => AddEventListener("timeupdate", value);
        remove => RemoveEventListener("timeupdate", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Toggle
    {
        add => AddEventListener("toggle", value);
        remove => RemoveEventListener("toggle", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchCancel
    {
        add
        {
            _handlersForTouchCancelOfTypeTouchEvent ??= new();
            if (_handlersForTouchCancelOfTypeTouchEvent.Count == 0) AddEventListener("touchcancel", _DispatcherForTouchCancelOfTypeTouchEvent);
            _handlersForTouchCancelOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchCancelOfTypeTouchEvent != null)
            {
                _handlersForTouchCancelOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchCancelOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchcancel", _DispatcherForTouchCancelOfTypeTouchEvent);
                    _handlersForTouchCancelOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchCancelOfTypeTouchEvent;
    private void _DispatcherForTouchCancelOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTouchCancelOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchEnd
    {
        add
        {
            _handlersForTouchEndOfTypeTouchEvent ??= new();
            if (_handlersForTouchEndOfTypeTouchEvent.Count == 0) AddEventListener("touchend", _DispatcherForTouchEndOfTypeTouchEvent);
            _handlersForTouchEndOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchEndOfTypeTouchEvent != null)
            {
                _handlersForTouchEndOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchEndOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchend", _DispatcherForTouchEndOfTypeTouchEvent);
                    _handlersForTouchEndOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchEndOfTypeTouchEvent;
    private void _DispatcherForTouchEndOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTouchEndOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchMove
    {
        add
        {
            _handlersForTouchMoveOfTypeTouchEvent ??= new();
            if (_handlersForTouchMoveOfTypeTouchEvent.Count == 0) AddEventListener("touchmove", _DispatcherForTouchMoveOfTypeTouchEvent);
            _handlersForTouchMoveOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchMoveOfTypeTouchEvent != null)
            {
                _handlersForTouchMoveOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchMoveOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchmove", _DispatcherForTouchMoveOfTypeTouchEvent);
                    _handlersForTouchMoveOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchMoveOfTypeTouchEvent;
    private void _DispatcherForTouchMoveOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTouchMoveOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchStart
    {
        add
        {
            _handlersForTouchStartOfTypeTouchEvent ??= new();
            if (_handlersForTouchStartOfTypeTouchEvent.Count == 0) AddEventListener("touchstart", _DispatcherForTouchStartOfTypeTouchEvent);
            _handlersForTouchStartOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchStartOfTypeTouchEvent != null)
            {
                _handlersForTouchStartOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchStartOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchstart", _DispatcherForTouchStartOfTypeTouchEvent);
                    _handlersForTouchStartOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchStartOfTypeTouchEvent;
    private void _DispatcherForTouchStartOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTouchStartOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionCancel
    {
        add
        {
            _handlersForTransitionCancelOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionCancelOfTypeTransitionEvent.Count == 0) AddEventListener("transitioncancel", _DispatcherForTransitionCancelOfTypeTransitionEvent);
            _handlersForTransitionCancelOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionCancelOfTypeTransitionEvent != null)
            {
                _handlersForTransitionCancelOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionCancelOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitioncancel", _DispatcherForTransitionCancelOfTypeTransitionEvent);
                    _handlersForTransitionCancelOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionCancelOfTypeTransitionEvent;
    private void _DispatcherForTransitionCancelOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTransitionCancelOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionEnd
    {
        add
        {
            _handlersForTransitionEndOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionEndOfTypeTransitionEvent.Count == 0) AddEventListener("transitionend", _DispatcherForTransitionEndOfTypeTransitionEvent);
            _handlersForTransitionEndOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionEndOfTypeTransitionEvent != null)
            {
                _handlersForTransitionEndOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionEndOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionend", _DispatcherForTransitionEndOfTypeTransitionEvent);
                    _handlersForTransitionEndOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionEndOfTypeTransitionEvent;
    private void _DispatcherForTransitionEndOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTransitionEndOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionRun
    {
        add
        {
            _handlersForTransitionRunOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionRunOfTypeTransitionEvent.Count == 0) AddEventListener("transitionrun", _DispatcherForTransitionRunOfTypeTransitionEvent);
            _handlersForTransitionRunOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionRunOfTypeTransitionEvent != null)
            {
                _handlersForTransitionRunOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionRunOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionrun", _DispatcherForTransitionRunOfTypeTransitionEvent);
                    _handlersForTransitionRunOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionRun
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionRunOfTypeTransitionEvent;
    private void _DispatcherForTransitionRunOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTransitionRunOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionStart
    {
        add
        {
            _handlersForTransitionStartOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionStartOfTypeTransitionEvent.Count == 0) AddEventListener("transitionstart", _DispatcherForTransitionStartOfTypeTransitionEvent);
            _handlersForTransitionStartOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionStartOfTypeTransitionEvent != null)
            {
                _handlersForTransitionStartOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionStartOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionstart", _DispatcherForTransitionStartOfTypeTransitionEvent);
                    _handlersForTransitionStartOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionStartOfTypeTransitionEvent;
    private void _DispatcherForTransitionStartOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForTransitionStartOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> VolumeChange
    {
        add => AddEventListener("volumechange", value);
        remove => RemoveEventListener("volumechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Waiting
    {
        add => AddEventListener("waiting", value);
        remove => RemoveEventListener("waiting", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationEnd
    {
        add => AddEventListener("webkitanimationend", value);
        remove => RemoveEventListener("webkitanimationend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationIteration
    {
        add => AddEventListener("webkitanimationiteration", value);
        remove => RemoveEventListener("webkitanimationiteration", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationStart
    {
        add => AddEventListener("webkitanimationstart", value);
        remove => RemoveEventListener("webkitanimationstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitTransitionEnd
    {
        add => AddEventListener("webkittransitionend", value);
        remove => RemoveEventListener("webkittransitionend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<WheelEvent?> Wheel
    {
        add
        {
            _handlersForWheelOfTypeWheelEvent ??= new();
            if (_handlersForWheelOfTypeWheelEvent.Count == 0) AddEventListener("wheel", _DispatcherForWheelOfTypeWheelEvent);
            _handlersForWheelOfTypeWheelEvent.Add(value);
        }
        remove
        {
            if (_handlersForWheelOfTypeWheelEvent != null)
            {
                _handlersForWheelOfTypeWheelEvent.Remove(value);
                if (_handlersForWheelOfTypeWheelEvent.Count == 0)
                {
                    RemoveEventListener("wheel", _DispatcherForWheelOfTypeWheelEvent);
                    _handlersForWheelOfTypeWheelEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Wheel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<WheelEvent?>>? _handlersForWheelOfTypeWheelEvent;
    private void _DispatcherForWheelOfTypeWheelEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Document>();
        foreach (var handler in _handlersForWheelOfTypeWheelEvent!) handler?.Invoke(castedSender, args?.Cast<WheelEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> DOMContentLoaded
    {
        add => AddEventListener("DOMContentLoaded", value);
        remove => RemoveEventListener("DOMContentLoaded", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> FullscreenChange
    {
        add => AddEventListener("fullscreenchange", value);
        remove => RemoveEventListener("fullscreenchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> FullscreenError
    {
        add => AddEventListener("fullscreenerror", value);
        remove => RemoveEventListener("fullscreenerror", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> PointerLockChange
    {
        add => AddEventListener("pointerlockchange", value);
        remove => RemoveEventListener("pointerlockchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> PointerLockError
    {
        add => AddEventListener("pointerlockerror", value);
        remove => RemoveEventListener("pointerlockerror", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> ReadyStateChange
    {
        add => AddEventListener("readystatechange", value);
        remove => RemoveEventListener("readystatechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> VisibilityChange
    {
        add => AddEventListener("visibilitychange", value);
        remove => RemoveEventListener("visibilitychange", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

