// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class WindowEventHandlers: EventTarget, IWindowEventHandlers
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, Event?, JsObject?>? OnAfterPrint
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onafterprint");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onafterprint = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, Event?, JsObject?>? OnBeforePrint
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onbeforeprint");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onbeforeprint = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, BeforeUnloadEvent?, JsObject?>? OnBeforeUnload
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, BeforeUnloadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onbeforeunload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onbeforeunload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>? OnGamepadConnected
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongamepadconnected");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongamepadconnected = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>? OnGamepadDisconnected
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongamepaddisconnected");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongamepaddisconnected = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, HashChangeEvent?, JsObject?>? OnHashChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, HashChangeEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onhashchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onhashchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, Event?, JsObject?>? OnLanguageChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onlanguagechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onlanguagechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>? OnMessage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>? OnMessageError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessageerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessageerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, Event?, JsObject?>? OnOffline
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onoffline");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onoffline = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, Event?, JsObject?>? OnOnline
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ononline");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ononline = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>? OnPageHide
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpagehide");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpagehide = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>? OnPageShow
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpageshow");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpageshow = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, PopStateEvent?, JsObject?>? OnPopState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PopStateEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpopstate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpopstate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>? OnRejectionHandled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onrejectionhandled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onrejectionhandled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, StorageEvent?, JsObject?>? OnStorage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, StorageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onstorage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onstorage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>? OnUnhandledRejection
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onunhandledrejection");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onunhandledrejection = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WindowEventHandlers?, Event?, JsObject?>? OnUnload
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onunload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onunload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> AfterPrint
    {
        add => AddEventListener("afterprint", value);
        remove => RemoveEventListener("afterprint", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> BeforePrint
    {
        add => AddEventListener("beforeprint", value);
        remove => RemoveEventListener("beforeprint", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<BeforeUnloadEvent?> BeforeUnload
    {
        add
        {
            _handlersForBeforeUnloadOfTypeBeforeUnloadEvent ??= new();
            if (_handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Count == 0) AddEventListener("beforeunload", _DispatcherForBeforeUnloadOfTypeBeforeUnloadEvent);
            _handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Add(value);
        }
        remove
        {
            if (_handlersForBeforeUnloadOfTypeBeforeUnloadEvent != null)
            {
                _handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Remove(value);
                if (_handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Count == 0)
                {
                    RemoveEventListener("beforeunload", _DispatcherForBeforeUnloadOfTypeBeforeUnloadEvent);
                    _handlersForBeforeUnloadOfTypeBeforeUnloadEvent = null;
                }
            }
        }
    }
    #region Internal event management members for BeforeUnload
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<BeforeUnloadEvent?>>? _handlersForBeforeUnloadOfTypeBeforeUnloadEvent;
    private void _DispatcherForBeforeUnloadOfTypeBeforeUnloadEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForBeforeUnloadOfTypeBeforeUnloadEvent!) handler?.Invoke(castedSender, args?.Cast<BeforeUnloadEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<GamepadEvent?> GamepadConnected
    {
        add
        {
            _handlersForGamepadConnectedOfTypeGamepadEvent ??= new();
            if (_handlersForGamepadConnectedOfTypeGamepadEvent.Count == 0) AddEventListener("gamepadconnected", _DispatcherForGamepadConnectedOfTypeGamepadEvent);
            _handlersForGamepadConnectedOfTypeGamepadEvent.Add(value);
        }
        remove
        {
            if (_handlersForGamepadConnectedOfTypeGamepadEvent != null)
            {
                _handlersForGamepadConnectedOfTypeGamepadEvent.Remove(value);
                if (_handlersForGamepadConnectedOfTypeGamepadEvent.Count == 0)
                {
                    RemoveEventListener("gamepadconnected", _DispatcherForGamepadConnectedOfTypeGamepadEvent);
                    _handlersForGamepadConnectedOfTypeGamepadEvent = null;
                }
            }
        }
    }
    #region Internal event management members for GamepadConnected
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<GamepadEvent?>>? _handlersForGamepadConnectedOfTypeGamepadEvent;
    private void _DispatcherForGamepadConnectedOfTypeGamepadEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForGamepadConnectedOfTypeGamepadEvent!) handler?.Invoke(castedSender, args?.Cast<GamepadEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<GamepadEvent?> GamepadDisconnected
    {
        add
        {
            _handlersForGamepadDisconnectedOfTypeGamepadEvent ??= new();
            if (_handlersForGamepadDisconnectedOfTypeGamepadEvent.Count == 0) AddEventListener("gamepaddisconnected", _DispatcherForGamepadDisconnectedOfTypeGamepadEvent);
            _handlersForGamepadDisconnectedOfTypeGamepadEvent.Add(value);
        }
        remove
        {
            if (_handlersForGamepadDisconnectedOfTypeGamepadEvent != null)
            {
                _handlersForGamepadDisconnectedOfTypeGamepadEvent.Remove(value);
                if (_handlersForGamepadDisconnectedOfTypeGamepadEvent.Count == 0)
                {
                    RemoveEventListener("gamepaddisconnected", _DispatcherForGamepadDisconnectedOfTypeGamepadEvent);
                    _handlersForGamepadDisconnectedOfTypeGamepadEvent = null;
                }
            }
        }
    }
    #region Internal event management members for GamepadDisconnected
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<GamepadEvent?>>? _handlersForGamepadDisconnectedOfTypeGamepadEvent;
    private void _DispatcherForGamepadDisconnectedOfTypeGamepadEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForGamepadDisconnectedOfTypeGamepadEvent!) handler?.Invoke(castedSender, args?.Cast<GamepadEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<HashChangeEvent?> HashChange
    {
        add
        {
            _handlersForHashChangeOfTypeHashChangeEvent ??= new();
            if (_handlersForHashChangeOfTypeHashChangeEvent.Count == 0) AddEventListener("hashchange", _DispatcherForHashChangeOfTypeHashChangeEvent);
            _handlersForHashChangeOfTypeHashChangeEvent.Add(value);
        }
        remove
        {
            if (_handlersForHashChangeOfTypeHashChangeEvent != null)
            {
                _handlersForHashChangeOfTypeHashChangeEvent.Remove(value);
                if (_handlersForHashChangeOfTypeHashChangeEvent.Count == 0)
                {
                    RemoveEventListener("hashchange", _DispatcherForHashChangeOfTypeHashChangeEvent);
                    _handlersForHashChangeOfTypeHashChangeEvent = null;
                }
            }
        }
    }
    #region Internal event management members for HashChange
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<HashChangeEvent?>>? _handlersForHashChangeOfTypeHashChangeEvent;
    private void _DispatcherForHashChangeOfTypeHashChangeEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForHashChangeOfTypeHashChangeEvent!) handler?.Invoke(castedSender, args?.Cast<HashChangeEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LanguageChange
    {
        add => AddEventListener("languagechange", value);
        remove => RemoveEventListener("languagechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> Message
    {
        add
        {
            _handlersForMessageOfTypeMessageEvent ??= new();
            if (_handlersForMessageOfTypeMessageEvent.Count == 0) AddEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
            _handlersForMessageOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageOfTypeMessageEvent != null)
            {
                _handlersForMessageOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
                    _handlersForMessageOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Message
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageOfTypeMessageEvent;
    private void _DispatcherForMessageOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForMessageOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> MessageError
    {
        add
        {
            _handlersForMessageErrorOfTypeMessageEvent ??= new();
            if (_handlersForMessageErrorOfTypeMessageEvent.Count == 0) AddEventListener("messageerror", _DispatcherForMessageErrorOfTypeMessageEvent);
            _handlersForMessageErrorOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageErrorOfTypeMessageEvent != null)
            {
                _handlersForMessageErrorOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageErrorOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("messageerror", _DispatcherForMessageErrorOfTypeMessageEvent);
                    _handlersForMessageErrorOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MessageError
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageErrorOfTypeMessageEvent;
    private void _DispatcherForMessageErrorOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForMessageErrorOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Offline
    {
        add => AddEventListener("offline", value);
        remove => RemoveEventListener("offline", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Online
    {
        add => AddEventListener("online", value);
        remove => RemoveEventListener("online", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PageTransitionEvent?> PageHide
    {
        add
        {
            _handlersForPageHideOfTypePageTransitionEvent ??= new();
            if (_handlersForPageHideOfTypePageTransitionEvent.Count == 0) AddEventListener("pagehide", _DispatcherForPageHideOfTypePageTransitionEvent);
            _handlersForPageHideOfTypePageTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForPageHideOfTypePageTransitionEvent != null)
            {
                _handlersForPageHideOfTypePageTransitionEvent.Remove(value);
                if (_handlersForPageHideOfTypePageTransitionEvent.Count == 0)
                {
                    RemoveEventListener("pagehide", _DispatcherForPageHideOfTypePageTransitionEvent);
                    _handlersForPageHideOfTypePageTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PageHide
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PageTransitionEvent?>>? _handlersForPageHideOfTypePageTransitionEvent;
    private void _DispatcherForPageHideOfTypePageTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForPageHideOfTypePageTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<PageTransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PageTransitionEvent?> PageShow
    {
        add
        {
            _handlersForPageShowOfTypePageTransitionEvent ??= new();
            if (_handlersForPageShowOfTypePageTransitionEvent.Count == 0) AddEventListener("pageshow", _DispatcherForPageShowOfTypePageTransitionEvent);
            _handlersForPageShowOfTypePageTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForPageShowOfTypePageTransitionEvent != null)
            {
                _handlersForPageShowOfTypePageTransitionEvent.Remove(value);
                if (_handlersForPageShowOfTypePageTransitionEvent.Count == 0)
                {
                    RemoveEventListener("pageshow", _DispatcherForPageShowOfTypePageTransitionEvent);
                    _handlersForPageShowOfTypePageTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PageShow
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PageTransitionEvent?>>? _handlersForPageShowOfTypePageTransitionEvent;
    private void _DispatcherForPageShowOfTypePageTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForPageShowOfTypePageTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<PageTransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PopStateEvent?> PopState
    {
        add
        {
            _handlersForPopStateOfTypePopStateEvent ??= new();
            if (_handlersForPopStateOfTypePopStateEvent.Count == 0) AddEventListener("popstate", _DispatcherForPopStateOfTypePopStateEvent);
            _handlersForPopStateOfTypePopStateEvent.Add(value);
        }
        remove
        {
            if (_handlersForPopStateOfTypePopStateEvent != null)
            {
                _handlersForPopStateOfTypePopStateEvent.Remove(value);
                if (_handlersForPopStateOfTypePopStateEvent.Count == 0)
                {
                    RemoveEventListener("popstate", _DispatcherForPopStateOfTypePopStateEvent);
                    _handlersForPopStateOfTypePopStateEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PopState
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PopStateEvent?>>? _handlersForPopStateOfTypePopStateEvent;
    private void _DispatcherForPopStateOfTypePopStateEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForPopStateOfTypePopStateEvent!) handler?.Invoke(castedSender, args?.Cast<PopStateEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PromiseRejectionEvent?> RejectionHandled
    {
        add
        {
            _handlersForRejectionHandledOfTypePromiseRejectionEvent ??= new();
            if (_handlersForRejectionHandledOfTypePromiseRejectionEvent.Count == 0) AddEventListener("rejectionhandled", _DispatcherForRejectionHandledOfTypePromiseRejectionEvent);
            _handlersForRejectionHandledOfTypePromiseRejectionEvent.Add(value);
        }
        remove
        {
            if (_handlersForRejectionHandledOfTypePromiseRejectionEvent != null)
            {
                _handlersForRejectionHandledOfTypePromiseRejectionEvent.Remove(value);
                if (_handlersForRejectionHandledOfTypePromiseRejectionEvent.Count == 0)
                {
                    RemoveEventListener("rejectionhandled", _DispatcherForRejectionHandledOfTypePromiseRejectionEvent);
                    _handlersForRejectionHandledOfTypePromiseRejectionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for RejectionHandled
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PromiseRejectionEvent?>>? _handlersForRejectionHandledOfTypePromiseRejectionEvent;
    private void _DispatcherForRejectionHandledOfTypePromiseRejectionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForRejectionHandledOfTypePromiseRejectionEvent!) handler?.Invoke(castedSender, args?.Cast<PromiseRejectionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<StorageEvent?> Storage
    {
        add
        {
            _handlersForStorageOfTypeStorageEvent ??= new();
            if (_handlersForStorageOfTypeStorageEvent.Count == 0) AddEventListener("storage", _DispatcherForStorageOfTypeStorageEvent);
            _handlersForStorageOfTypeStorageEvent.Add(value);
        }
        remove
        {
            if (_handlersForStorageOfTypeStorageEvent != null)
            {
                _handlersForStorageOfTypeStorageEvent.Remove(value);
                if (_handlersForStorageOfTypeStorageEvent.Count == 0)
                {
                    RemoveEventListener("storage", _DispatcherForStorageOfTypeStorageEvent);
                    _handlersForStorageOfTypeStorageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Storage
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<StorageEvent?>>? _handlersForStorageOfTypeStorageEvent;
    private void _DispatcherForStorageOfTypeStorageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForStorageOfTypeStorageEvent!) handler?.Invoke(castedSender, args?.Cast<StorageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PromiseRejectionEvent?> UnhandledRejection
    {
        add
        {
            _handlersForUnhandledRejectionOfTypePromiseRejectionEvent ??= new();
            if (_handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Count == 0) AddEventListener("unhandledrejection", _DispatcherForUnhandledRejectionOfTypePromiseRejectionEvent);
            _handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Add(value);
        }
        remove
        {
            if (_handlersForUnhandledRejectionOfTypePromiseRejectionEvent != null)
            {
                _handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Remove(value);
                if (_handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Count == 0)
                {
                    RemoveEventListener("unhandledrejection", _DispatcherForUnhandledRejectionOfTypePromiseRejectionEvent);
                    _handlersForUnhandledRejectionOfTypePromiseRejectionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for UnhandledRejection
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PromiseRejectionEvent?>>? _handlersForUnhandledRejectionOfTypePromiseRejectionEvent;
    private void _DispatcherForUnhandledRejectionOfTypePromiseRejectionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WindowEventHandlers>();
        foreach (var handler in _handlersForUnhandledRejectionOfTypePromiseRejectionEvent!) handler?.Invoke(castedSender, args?.Cast<PromiseRejectionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Unload
    {
        add => AddEventListener("unload", value);
        remove => RemoveEventListener("unload", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

