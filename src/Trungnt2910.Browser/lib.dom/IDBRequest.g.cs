// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
/// </summary>
[JsObject]
public partial class IDBRequest<T>: EventTarget
{
    
    /// <summary>
    /// When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a "InvalidStateError" DOMException if the request is still pending.
    /// </summary>
    public DOMException? Error
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMException>.ValueOrNullFromJs($"{_jsThis}.error");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<IDBRequest<T>?, Event?, JsObject?>? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<IDBRequest<T>?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<IDBRequest<T>?, Event?, JsObject?>? OnSuccess
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<IDBRequest<T>?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsuccess");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsuccess = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns "pending" until a request is complete, then returns "done".
    /// </summary>
    public string? ReadyState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.readyState");
    }
    
    
    /// <summary>
    /// When a request is completed, returns the result, or undefined if the request failed. Throws a "InvalidStateError" DOMException if the request is still pending.
    /// </summary>
    public T? Result
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<T>.ValueOrNullFromJs($"{_jsThis}.result");
    }
    
    
    /// <summary>
    /// Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.
    /// </summary>
    public Union<IDBObjectStore, IDBIndex, IDBCursor>? Source
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<IDBObjectStore, IDBIndex, IDBCursor>>.ValueOrNullFromJs($"{_jsThis}.source");
    }
    
    
    /// <summary>
    /// Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
    /// </summary>
    public IDBTransaction? Transaction
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBTransaction>.ValueOrNullFromJs($"{_jsThis}.transaction");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Errored
    {
        add => AddEventListener("error", value);
        remove => RemoveEventListener("error", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Success
    {
        add => AddEventListener("success", value);
        remove => RemoveEventListener("success", value);
    }
    
}
/// <summary>
/// The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
/// </summary>
[JsObject]
public partial class IDBRequest: EventTarget
{
    
    /// <summary>
    /// When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a "InvalidStateError" DOMException if the request is still pending.
    /// </summary>
    public DOMException? Error
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMException>.ValueOrNullFromJs($"{_jsThis}.error");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<IDBRequest<JsObject>?, Event?, JsObject?>? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<IDBRequest<JsObject>?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<IDBRequest<JsObject>?, Event?, JsObject?>? OnSuccess
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<IDBRequest<JsObject>?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsuccess");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsuccess = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns "pending" until a request is complete, then returns "done".
    /// </summary>
    public string? ReadyState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.readyState");
    }
    
    
    /// <summary>
    /// When a request is completed, returns the result, or undefined if the request failed. Throws a "InvalidStateError" DOMException if the request is still pending.
    /// </summary>
    public JsObject? Result
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsObject>.ValueOrNullFromJs($"{_jsThis}.result");
    }
    
    
    /// <summary>
    /// Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.
    /// </summary>
    public Union<IDBObjectStore, IDBIndex, IDBCursor>? Source
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<IDBObjectStore, IDBIndex, IDBCursor>>.ValueOrNullFromJs($"{_jsThis}.source");
    }
    
    
    /// <summary>
    /// Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
    /// </summary>
    public IDBTransaction? Transaction
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBTransaction>.ValueOrNullFromJs($"{_jsThis}.transaction");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Errored
    {
        add => AddEventListener("error", value);
        remove => RemoveEventListener("error", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Success
    {
        add => AddEventListener("success", value);
        remove => RemoveEventListener("success", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

