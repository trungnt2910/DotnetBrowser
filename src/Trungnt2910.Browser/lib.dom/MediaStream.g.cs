// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A stream of media content. A stream consists of several tracks such asÂ video or audio tracks. Each track is specified as an instance of MediaStreamTrack.
/// </summary>
[JsObject]
public partial class MediaStream: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Active
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.active");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Id
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.id");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaStream?, MediaStreamTrackEvent?, JsObject?>? OnAddTrack
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaStream?, MediaStreamTrackEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onaddtrack");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onaddtrack = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaStream?, MediaStreamTrackEvent?, JsObject?>? OnRemoveTrack
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaStream?, MediaStreamTrackEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onremovetrack");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onremovetrack = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddTrack(MediaStreamTrack? track) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addTrack({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(track))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public MediaStream? Clone() => global::Trungnt2910.Browser.WebAssemblyRuntime<MediaStream>.ValueOrNullFromJs($"{_jsThis}.clone()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<MediaStreamTrack>? GetAudioTracks() => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<MediaStreamTrack>>.ValueOrNullFromJs($"{_jsThis}.getAudioTracks()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public MediaStreamTrack? GetTrackById(string? trackId) => global::Trungnt2910.Browser.WebAssemblyRuntime<MediaStreamTrack>.ValueOrNullFromJs($"{_jsThis}.getTrackById({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(trackId))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<MediaStreamTrack>? GetTracks() => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<MediaStreamTrack>>.ValueOrNullFromJs($"{_jsThis}.getTracks()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<MediaStreamTrack>? GetVideoTracks() => global::Trungnt2910.Browser.WebAssemblyRuntime<JsArray<MediaStreamTrack>>.ValueOrNullFromJs($"{_jsThis}.getVideoTracks()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveTrack(MediaStreamTrack? track) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeTrack({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(track))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MediaStreamTrackEvent?> WhenAddTrack
    {
        add
        {
            _handlersForWhenAddTrackOfTypeMediaStreamTrackEvent ??= new();
            if (_handlersForWhenAddTrackOfTypeMediaStreamTrackEvent.Count == 0) AddEventListener("addtrack", _DispatcherForWhenAddTrackOfTypeMediaStreamTrackEvent);
            _handlersForWhenAddTrackOfTypeMediaStreamTrackEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenAddTrackOfTypeMediaStreamTrackEvent != null)
            {
                _handlersForWhenAddTrackOfTypeMediaStreamTrackEvent.Remove(value);
                if (_handlersForWhenAddTrackOfTypeMediaStreamTrackEvent.Count == 0)
                {
                    RemoveEventListener("addtrack", _DispatcherForWhenAddTrackOfTypeMediaStreamTrackEvent);
                    _handlersForWhenAddTrackOfTypeMediaStreamTrackEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenAddTrack
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MediaStreamTrackEvent?>>? _handlersForWhenAddTrackOfTypeMediaStreamTrackEvent;
    private void _DispatcherForWhenAddTrackOfTypeMediaStreamTrackEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<MediaStream>();
        foreach (var handler in _handlersForWhenAddTrackOfTypeMediaStreamTrackEvent!) handler?.Invoke(castedSender, args?.Cast<MediaStreamTrackEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MediaStreamTrackEvent?> WhenRemoveTrack
    {
        add
        {
            _handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent ??= new();
            if (_handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent.Count == 0) AddEventListener("removetrack", _DispatcherForWhenRemoveTrackOfTypeMediaStreamTrackEvent);
            _handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent != null)
            {
                _handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent.Remove(value);
                if (_handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent.Count == 0)
                {
                    RemoveEventListener("removetrack", _DispatcherForWhenRemoveTrackOfTypeMediaStreamTrackEvent);
                    _handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenRemoveTrack
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MediaStreamTrackEvent?>>? _handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent;
    private void _DispatcherForWhenRemoveTrackOfTypeMediaStreamTrackEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<MediaStream>();
        foreach (var handler in _handlersForWhenRemoveTrackOfTypeMediaStreamTrackEvent!) handler?.Invoke(castedSender, args?.Cast<MediaStreamTrackEvent>());
    }
    #endregion

    
}
#pragma warning restore CS0108, CS8764, CS8766

