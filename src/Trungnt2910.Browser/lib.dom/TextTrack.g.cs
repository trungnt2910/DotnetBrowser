// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// This interface also inherits properties from EventTarget.
/// </summary>
[JsObject]
public partial class TextTrack: EventTarget
{
    
    /// <summary>
    /// Returns the text track cues from the text track list of cues that are currently active (i.e. that start before the current playback position and end after it), as a TextTrackCueList object.
    /// </summary>
    public TextTrackCueList? ActiveCues
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<TextTrackCueList>.ValueOrNullFromJs($"{_jsThis}.activeCues");
    }
    
    
    /// <summary>
    /// Returns the text track list of cues, as a TextTrackCueList object.
    /// </summary>
    public TextTrackCueList? Cues
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<TextTrackCueList>.ValueOrNullFromJs($"{_jsThis}.cues");
    }
    
    
    /// <summary>
    /// Returns the ID of the given track.
    /// For in-band tracks, this is the ID that can be used with a fragment if the format supports media fragment syntax, and that can be used with the getTrackById() method.
    /// For TextTrack objects corresponding to track elements, this is the ID of the track element.
    /// </summary>
    public string? Id
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.id");
    }
    
    
    /// <summary>
    /// Returns the text track in-band metadata track dispatch type string.
    /// </summary>
    public string? InBandMetadataTrackDispatchType
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.inBandMetadataTrackDispatchType");
    }
    
    
    /// <summary>
    /// Returns the text track kind string.
    /// </summary>
    public string? Kind
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.kind");
    }
    
    
    /// <summary>
    /// Returns the text track label, if there is one, or the empty string otherwise (indicating that a custom label probably needs to be generated from the other attributes of the object if the object is exposed to the user).
    /// </summary>
    public string? Label
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.label");
    }
    
    
    /// <summary>
    /// Returns the text track language string.
    /// </summary>
    public string? Language
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.language");
    }
    
    
    /// <summary>
    /// Returns the text track mode, represented by a string from the following list:
    /// Can be set, to change the mode.
    /// </summary>
    public string? Mode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.mode");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.mode = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<TextTrack?, Event?, JsObject?>? OnCueChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<TextTrack?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncuechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncuechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Adds the given cue to textTrack's text track list of cues.
    /// </summary>
    public void AddCue(TextTrackCue? cue) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addCue({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(cue))})");
    
    
    /// <summary>
    /// Removes the given cue from textTrack's text track list of cues.
    /// </summary>
    public void RemoveCue(TextTrackCue? cue) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeCue({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(cue))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CueChange
    {
        add => AddEventListener("cuechange", value);
        remove => RemoveEventListener("cuechange", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

