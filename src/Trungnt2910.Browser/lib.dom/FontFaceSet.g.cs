// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class FontFaceSet: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<FontFaceSet?, Event?, JsObject?>? OnLoading
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<FontFaceSet?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloading");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloading = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<FontFaceSet?, Event?, JsObject?>? OnLoadingDone
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<FontFaceSet?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadingdone");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadingdone = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<FontFaceSet?, Event?, JsObject?>? OnLoadingError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<FontFaceSet?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadingerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadingerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<FontFaceSet>? Ready
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<FontFaceSet>>.ValueOrNullFromJs($"{_jsThis}.ready");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Status
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.status");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Check(string? font, string? text) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.check({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(font))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(text))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<JsArray<FontFace>>? Load(string? font, string? text) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<JsArray<FontFace>>>.ValueOrNullFromJs($"{_jsThis}.load({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(font))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(text))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ForEach(JsAction<FontFace?, FontFace?, FontFaceSet?>? callbackfn, JsObject? thisArg) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.forEach({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callbackfn))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(thisArg))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Loading
    {
        add => AddEventListener("loading", value);
        remove => RemoveEventListener("loading", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadingDone
    {
        add => AddEventListener("loadingdone", value);
        remove => RemoveEventListener("loadingdone", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadingError
    {
        add => AddEventListener("loadingerror", value);
        remove => RemoveEventListener("loadingerror", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

