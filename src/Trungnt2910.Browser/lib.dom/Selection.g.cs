// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call Window.getSelection().
/// </summary>
[JsObject]
public partial class Selection: JsObject
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Node? AnchorNode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Node>.ValueOrNullFromJs($"{_jsThis}.anchorNode");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? AnchorOffset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.anchorOffset");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Node? FocusNode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Node>.ValueOrNullFromJs($"{_jsThis}.focusNode");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FocusOffset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.focusOffset");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsCollapsed
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.isCollapsed");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RangeCount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.rangeCount");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Type
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.type");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddRange(Range? range) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addRange({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(range))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Collapse(INode? node, double? offset) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.collapse({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(node))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(offset))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void CollapseToEnd() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.collapseToEnd()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void CollapseToStart() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.collapseToStart()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? ContainsNode(INode? node, bool? allowPartialContainment) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.containsNode({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(node))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(allowPartialContainment))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteFromDocument() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.deleteFromDocument()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Empty() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.empty()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Extend(INode? node, double? offset) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.extend({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(node))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(offset))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Range? GetRangeAt(double? index) => global::Trungnt2910.Browser.WebAssemblyRuntime<Range>.ValueOrNullFromJs($"{_jsThis}.getRangeAt({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveAllRanges() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeAllRanges()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveRange(Range? range) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeRange({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(range))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void SelectAllChildren(INode? node) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.selectAllChildren({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(node))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void SetBaseAndExtent(INode? anchorNode, double? anchorOffset, INode? focusNode, double? focusOffset) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setBaseAndExtent({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(anchorNode))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(anchorOffset))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(focusNode))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(focusOffset))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void SetPosition(INode? node, double? offset) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setPosition({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(node))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(offset))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public override string? ToString() => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.toString()");
    
}
#pragma warning restore CS0108, CS8764, CS8766

