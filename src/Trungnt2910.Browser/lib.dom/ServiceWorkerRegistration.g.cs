// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
/// Available only in secure contexts.
/// </summary>
[JsObject]
public partial class ServiceWorkerRegistration: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public ServiceWorker? Active
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<ServiceWorker>.ValueOrNullFromJs($"{_jsThis}.active");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public ServiceWorker? Installing
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<ServiceWorker>.ValueOrNullFromJs($"{_jsThis}.installing");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public NavigationPreloadManager? NavigationPreload
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<NavigationPreloadManager>.ValueOrNullFromJs($"{_jsThis}.navigationPreload");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<ServiceWorkerRegistration?, Event?, JsObject?>? OnUpdateFound
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<ServiceWorkerRegistration?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onupdatefound");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onupdatefound = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public PushManager? PushManager
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<PushManager>.ValueOrNullFromJs($"{_jsThis}.pushManager");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Scope
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.scope");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? UpdateViaCache
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.updateViaCache");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public ServiceWorker? Waiting
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<ServiceWorker>.ValueOrNullFromJs($"{_jsThis}.waiting");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<JsArray<Notification>>? GetNotifications(GetNotificationOptions? filter) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<JsArray<Notification>>>.ValueOrNullFromJs($"{_jsThis}.getNotifications({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(filter))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise? ShowNotification(string? title, NotificationOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise>.ValueOrNullFromJs($"{_jsThis}.showNotification({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(title))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<bool>? Unregister() => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<bool>>.ValueOrNullFromJs($"{_jsThis}.unregister()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise? Update() => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise>.ValueOrNullFromJs($"{_jsThis}.update()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> UpdateFound
    {
        add => AddEventListener("updatefound", value);
        remove => RemoveEventListener("updatefound", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

