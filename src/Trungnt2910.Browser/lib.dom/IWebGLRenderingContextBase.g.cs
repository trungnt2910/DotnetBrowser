// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
public interface IWebGLRenderingContextBase
{
    /// <summary>
    /// To be added.
    /// </summary>
    public HTMLCanvasElement? Canvas { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DrawingBufferHeight { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DrawingBufferWidth { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ACTIVE_ATTRIBUTES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ACTIVE_TEXTURE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ACTIVE_UNIFORMS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ALIASED_LINE_WIDTH_RANGE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ALIASED_POINT_SIZE_RANGE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ALPHA_BITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ALWAYS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ARRAY_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ARRAY_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ATTACHED_SHADERS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BACK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_DST_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_DST_RGB { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_EQUATION { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_EQUATION_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_EQUATION_RGB { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_SRC_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLEND_SRC_RGB { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BLUE_BITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BOOL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BOOL_VEC2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BOOL_VEC3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BOOL_VEC4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BROWSER_DEFAULT_WEBGL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BUFFER_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BUFFER_USAGE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? BYTE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CCW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CLAMP_TO_EDGE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT0 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_BUFFER_BIT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_CLEAR_VALUE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_WRITEMASK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COMPILE_STATUS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COMPRESSED_TEXTURE_FORMATS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CONSTANT_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CONSTANT_COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CONTEXT_LOST_WEBGL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CULL_FACE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CULL_FACE_MODE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CURRENT_PROGRAM { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CURRENT_VERTEX_ATTRIB { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DECR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DECR_WRAP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DELETE_STATUS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_ATTACHMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_BITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_BUFFER_BIT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_CLEAR_VALUE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_COMPONENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_COMPONENT16 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_FUNC { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_RANGE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_STENCIL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_STENCIL_ATTACHMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_TEST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_WRITEMASK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DITHER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DONT_CARE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DST_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DST_COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DYNAMIC_DRAW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ELEMENT_ARRAY_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ELEMENT_ARRAY_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? EQUAL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FASTEST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_VEC2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_VEC3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_VEC4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAGMENT_SHADER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_OBJECT_NAME { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_COMPLETE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_INCOMPLETE_ATTACHMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_INCOMPLETE_DIMENSIONS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_UNSUPPORTED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRONT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRONT_AND_BACK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRONT_FACE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FUNC_ADD { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FUNC_REVERSE_SUBTRACT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FUNC_SUBTRACT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GENERATE_MIPMAP_HINT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GEQUAL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GREATER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GREEN_BITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? HIGH_FLOAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? HIGH_INT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? IMPLEMENTATION_COLOR_READ_FORMAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? IMPLEMENTATION_COLOR_READ_TYPE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INCR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INCR_WRAP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_VEC2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_VEC3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_VEC4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INVALID_ENUM { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INVALID_FRAMEBUFFER_OPERATION { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INVALID_OPERATION { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INVALID_VALUE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INVERT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? KEEP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LEQUAL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LESS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINEAR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINEAR_MIPMAP_LINEAR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINEAR_MIPMAP_NEAREST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINE_LOOP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINE_STRIP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINE_WIDTH { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LINK_STATUS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LOW_FLOAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LOW_INT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LUMINANCE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? LUMINANCE_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_COMBINED_TEXTURE_IMAGE_UNITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_CUBE_MAP_TEXTURE_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_FRAGMENT_UNIFORM_VECTORS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_RENDERBUFFER_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_TEXTURE_IMAGE_UNITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_TEXTURE_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VARYING_VECTORS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VERTEX_ATTRIBS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VERTEX_TEXTURE_IMAGE_UNITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VERTEX_UNIFORM_VECTORS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VIEWPORT_DIMS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MEDIUM_FLOAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MEDIUM_INT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MIRRORED_REPEAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NEAREST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NEAREST_MIPMAP_LINEAR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NEAREST_MIPMAP_NEAREST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NEVER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NICEST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NONE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NOTEQUAL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? NO_ERROR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ONE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ONE_MINUS_CONSTANT_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ONE_MINUS_CONSTANT_COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ONE_MINUS_DST_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ONE_MINUS_DST_COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ONE_MINUS_SRC_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ONE_MINUS_SRC_COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? OUT_OF_MEMORY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PACK_ALIGNMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? POINTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? POLYGON_OFFSET_FACTOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? POLYGON_OFFSET_FILL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? POLYGON_OFFSET_UNITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RED_BITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_ALPHA_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_BLUE_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_DEPTH_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_GREEN_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_HEIGHT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_INTERNAL_FORMAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_RED_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_STENCIL_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_WIDTH { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? REPEAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? REPLACE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB565 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB5_A1 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_2D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_CUBE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLE_ALPHA_TO_COVERAGE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLE_BUFFERS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLE_COVERAGE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLE_COVERAGE_INVERT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLE_COVERAGE_VALUE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SCISSOR_BOX { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SCISSOR_TEST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SHADER_TYPE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SHADING_LANGUAGE_VERSION { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SHORT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SRC_ALPHA { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SRC_ALPHA_SATURATE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SRC_COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STATIC_DRAW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_ATTACHMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BACK_FAIL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BACK_FUNC { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BACK_PASS_DEPTH_FAIL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BACK_PASS_DEPTH_PASS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BACK_REF { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BACK_VALUE_MASK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BACK_WRITEMASK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_BUFFER_BIT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_CLEAR_VALUE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_FAIL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_FUNC { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_INDEX8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_PASS_DEPTH_FAIL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_PASS_DEPTH_PASS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_REF { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_TEST { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_VALUE_MASK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL_WRITEMASK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STREAM_DRAW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SUBPIXEL_BITS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE0 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE1 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE10 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE11 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE12 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE13 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE14 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE15 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE16 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE17 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE18 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE19 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE20 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE21 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE22 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE23 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE24 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE25 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE26 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE27 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE28 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE29 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE30 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE31 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE5 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE6 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE7 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE9 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_2D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_BINDING_2D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_BINDING_CUBE_MAP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_CUBE_MAP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_CUBE_MAP_NEGATIVE_X { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_CUBE_MAP_NEGATIVE_Y { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_CUBE_MAP_NEGATIVE_Z { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_CUBE_MAP_POSITIVE_X { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_CUBE_MAP_POSITIVE_Y { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_CUBE_MAP_POSITIVE_Z { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_MAG_FILTER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_MIN_FILTER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_WRAP_S { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_WRAP_T { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRIANGLES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRIANGLE_FAN { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRIANGLE_STRIP { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_ALIGNMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_COLORSPACE_CONVERSION_WEBGL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_FLIP_Y_WEBGL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_PREMULTIPLY_ALPHA_WEBGL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_BYTE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_SHORT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_SHORT_4_4_4_4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_SHORT_5_5_5_1 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_SHORT_5_6_5 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VALIDATE_STATUS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VENDOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERSION { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_ENABLED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_NORMALIZED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_POINTER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_STRIDE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_TYPE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_SHADER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VIEWPORT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ZERO { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public void ActiveTexture(double? texture);
    /// <summary>
    /// To be added.
    /// </summary>
    public void AttachShader(WebGLProgram? program, WebGLShader? shader);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindAttribLocation(WebGLProgram? program, double? index, string? name);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindBuffer(double? target, WebGLBuffer? buffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindFramebuffer(double? target, WebGLFramebuffer? framebuffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindRenderbuffer(double? target, WebGLRenderbuffer? renderbuffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindTexture(double? target, WebGLTexture? texture);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BlendColor(double? red, double? green, double? blue, double? alpha);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BlendEquation(double? mode);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BlendEquationSeparate(double? modeRGB, double? modeAlpha);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BlendFunc(double? sfactor, double? dfactor);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BlendFuncSeparate(double? srcRGB, double? dstRGB, double? srcAlpha, double? dstAlpha);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CheckFramebufferStatus(double? target);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Clear(double? mask);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearColor(double? red, double? green, double? blue, double? alpha);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearDepth(double? depth);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearStencil(double? s);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ColorMask(bool? red, bool? green, bool? blue, bool? alpha);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CompileShader(WebGLShader? shader);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CopyTexImage2D(double? target, double? level, double? internalformat, double? x, double? y, double? width, double? height, double? border);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CopyTexSubImage2D(double? target, double? level, double? xoffset, double? yoffset, double? x, double? y, double? width, double? height);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLBuffer? CreateBuffer();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLFramebuffer? CreateFramebuffer();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLProgram? CreateProgram();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLRenderbuffer? CreateRenderbuffer();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLShader? CreateShader(double? type);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLTexture? CreateTexture();
    /// <summary>
    /// To be added.
    /// </summary>
    public void CullFace(double? mode);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteBuffer(WebGLBuffer? buffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteFramebuffer(WebGLFramebuffer? framebuffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteProgram(WebGLProgram? program);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteRenderbuffer(WebGLRenderbuffer? renderbuffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteShader(WebGLShader? shader);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteTexture(WebGLTexture? texture);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DepthFunc(double? func);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DepthMask(bool? flag);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DepthRange(double? zNear, double? zFar);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DetachShader(WebGLProgram? program, WebGLShader? shader);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Disable(double? cap);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DisableVertexAttribArray(double? index);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DrawArrays(double? mode, double? first, double? count);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DrawElements(double? mode, double? count, double? type, double? offset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Enable(double? cap);
    /// <summary>
    /// To be added.
    /// </summary>
    public void EnableVertexAttribArray(double? index);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Finish();
    /// <summary>
    /// To be added.
    /// </summary>
    public void Flush();
    /// <summary>
    /// To be added.
    /// </summary>
    public void FramebufferRenderbuffer(double? target, double? attachment, double? renderbuffertarget, WebGLRenderbuffer? renderbuffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void FramebufferTexture2D(double? target, double? attachment, double? textarget, WebGLTexture? texture, double? level);
    /// <summary>
    /// To be added.
    /// </summary>
    public void FrontFace(double? mode);
    /// <summary>
    /// To be added.
    /// </summary>
    public void GenerateMipmap(double? target);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLActiveInfo? GetActiveAttrib(WebGLProgram? program, double? index);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLActiveInfo? GetActiveUniform(WebGLProgram? program, double? index);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<WebGLShader>? GetAttachedShaders(WebGLProgram? program);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GetAttribLocation(WebGLProgram? program, string? name);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetBufferParameter(double? target, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLContextAttributes? GetContextAttributes();
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GetError();
    /// <summary>
    /// To be added.
    /// </summary>
    public Union<EXT_blend_minmax, EXT_color_buffer_float, EXT_color_buffer_half_float, EXT_float_blend, EXT_texture_filter_anisotropic, EXT_frag_depth, EXT_shader_texture_lod, EXT_sRGB, KHR_parallel_shader_compile, OES_vertex_array_object, OVR_multiview2, WEBGL_color_buffer_float, WEBGL_compressed_texture_astc, WEBGL_compressed_texture_etc, WEBGL_compressed_texture_etc1, WEBGL_compressed_texture_s3tc_srgb, WEBGL_debug_shaders, WEBGL_draw_buffers, WEBGL_lose_context, WEBGL_depth_texture, WEBGL_debug_renderer_info, WEBGL_compressed_texture_s3tc, OES_texture_half_float_linear, OES_texture_half_float, OES_texture_float_linear, OES_texture_float, OES_standard_derivatives, OES_element_index_uint, ANGLE_instanced_arrays, JsObject>? GetExtension(string? extensionName);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Viewport(double? x, double? y, double? width, double? height);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttribPointer(double? index, double? size, double? type, bool? normalized, double? stride, double? offset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib4fv(double? index, Union<Float32Array, JsArray<double>>? values);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib4f(double? index, double? x, double? y, double? z, double? w);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib3fv(double? index, Union<Float32Array, JsArray<double>>? values);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib3f(double? index, double? x, double? y, double? z);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib2fv(double? index, Union<Float32Array, JsArray<double>>? values);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib2f(double? index, double? x, double? y);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib1fv(double? index, Union<Float32Array, JsArray<double>>? values);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttrib1f(double? index, double? x);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ValidateProgram(WebGLProgram? program);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UseProgram(WebGLProgram? program);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform4i(WebGLUniformLocation? location, double? x, double? y, double? z, double? w);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform4f(WebGLUniformLocation? location, double? x, double? y, double? z, double? w);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform3i(WebGLUniformLocation? location, double? x, double? y, double? z);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform3f(WebGLUniformLocation? location, double? x, double? y, double? z);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform2i(WebGLUniformLocation? location, double? x, double? y);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform2f(WebGLUniformLocation? location, double? x, double? y);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform1i(WebGLUniformLocation? location, double? x);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform1f(WebGLUniformLocation? location, double? x);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexParameteri(double? target, double? pname, double? param);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexParameterf(double? target, double? pname, double? param);
    /// <summary>
    /// To be added.
    /// </summary>
    public void StencilOpSeparate(double? face, double? fail, double? zfail, double? zpass);
    /// <summary>
    /// To be added.
    /// </summary>
    public void StencilOp(double? fail, double? zfail, double? zpass);
    /// <summary>
    /// To be added.
    /// </summary>
    public void StencilMaskSeparate(double? face, double? mask);
    /// <summary>
    /// To be added.
    /// </summary>
    public void StencilMask(double? mask);
    /// <summary>
    /// To be added.
    /// </summary>
    public void StencilFuncSeparate(double? face, double? func, double? @ref, double? mask);
    /// <summary>
    /// To be added.
    /// </summary>
    public void StencilFunc(double? func, double? @ref, double? mask);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ShaderSource(WebGLShader? shader, string? source);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetFramebufferAttachmentParameter(double? target, double? attachment, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetParameter(double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public string? GetProgramInfoLog(WebGLProgram? program);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetProgramParameter(WebGLProgram? program, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetRenderbufferParameter(double? target, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public string? GetShaderInfoLog(WebGLShader? shader);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetShaderParameter(WebGLShader? shader, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLShaderPrecisionFormat? GetShaderPrecisionFormat(double? shadertype, double? precisiontype);
    /// <summary>
    /// To be added.
    /// </summary>
    public string? GetShaderSource(WebGLShader? shader);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<string>? GetSupportedExtensions();
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetTexParameter(double? target, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetUniform(WebGLProgram? program, WebGLUniformLocation? location);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLUniformLocation? GetUniformLocation(WebGLProgram? program, string? name);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetVertexAttrib(double? index, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GetVertexAttribOffset(double? index, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Hint(double? target, double? mode);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsBuffer(WebGLBuffer? buffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsContextLost();
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsEnabled(double? cap);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsFramebuffer(WebGLFramebuffer? framebuffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsProgram(WebGLProgram? program);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsRenderbuffer(WebGLRenderbuffer? renderbuffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsShader(WebGLShader? shader);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsTexture(WebGLTexture? texture);
    /// <summary>
    /// To be added.
    /// </summary>
    public void LineWidth(double? width);
    /// <summary>
    /// To be added.
    /// </summary>
    public void LinkProgram(WebGLProgram? program);
    /// <summary>
    /// To be added.
    /// </summary>
    public void PixelStorei(double? pname, Union<double, bool>? param);
    /// <summary>
    /// To be added.
    /// </summary>
    public void PolygonOffset(double? factor, double? units);
    /// <summary>
    /// To be added.
    /// </summary>
    public void RenderbufferStorage(double? target, double? internalformat, double? width, double? height);
    /// <summary>
    /// To be added.
    /// </summary>
    public void SampleCoverage(double? value, bool? invert);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Scissor(double? x, double? y, double? width, double? height);
}
#pragma warning restore CS0108, CS8764, CS8766

