// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.
/// </summary>
[JsObject]
public partial class AnalyserNode: AudioNode
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FftSize
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.fftSize");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.fftSize = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FrequencyBinCount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.frequencyBinCount");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MaxDecibels
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.maxDecibels");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.maxDecibels = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MinDecibels
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.minDecibels");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.minDecibels = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SmoothingTimeConstant
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.smoothingTimeConstant");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.smoothingTimeConstant = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void GetByteFrequencyData(Uint8Array? array) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.getByteFrequencyData({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(array))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void GetByteTimeDomainData(Uint8Array? array) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.getByteTimeDomainData({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(array))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void GetFloatFrequencyData(Float32Array? array) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.getFloatFrequencyData({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(array))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void GetFloatTimeDomainData(Float32Array? array) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.getFloatTimeDomainData({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(array))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

