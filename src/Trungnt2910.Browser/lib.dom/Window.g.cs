// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// A window containing a DOM document; the document property points to the DOM document loaded in that window.
/// </summary>
// [JsObject]
public partial class Window: EventTarget, IAnimationFrameProvider, IGlobalEventHandlers, IWindowEventHandlers, IWindowLocalStorage, IWindowOrWorkerGlobalScope, IWindowSessionStorage, global::System.Collections.Generic.IReadOnlyList<Window?>
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `navigator`.")]
    public Navigator? ClientInformation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Navigator>.ValueOrNullFromJs($"{_jsThis}.clientInformation");
    }
    
    
    /// <summary>
    /// Returns true if the window has been closed, false otherwise.
    /// </summary>
    public bool? Closed
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.closed");
    }
    
    
    /// <summary>
    /// Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element.
    /// </summary>
    public CustomElementRegistry? CustomElements
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<CustomElementRegistry>.ValueOrNullFromJs($"{_jsThis}.customElements");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DevicePixelRatio
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.devicePixelRatio");
    }
    
    /* // Skipping existing member Document
    /// <summary>
    /// To be added.
    /// </summary>
    public Document? Document
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Document>.ValueOrNullFromJs($"{_jsThis}.document");
    }
    */
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public Event? Event
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Event>.ValueOrNullFromJs($"{_jsThis}.event");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public External? External
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<External>.ValueOrNullFromJs($"{_jsThis}.external");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Element? FrameElement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Element>.ValueOrNullFromJs($"{_jsThis}.frameElement");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Window? Frames
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}.frames");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public History? History
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<History>.ValueOrNullFromJs($"{_jsThis}.history");
    }
    
    /* // Skipping existing member InnerHeight
    /// <summary>
    /// To be added.
    /// </summary>
    public double? InnerHeight
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.innerHeight");
    }
    */
    /* // Skipping existing member InnerWidth
    /// <summary>
    /// To be added.
    /// </summary>
    public double? InnerWidth
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.innerWidth");
    }
    */
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Length
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.length");
    }
    
    
    /// <summary>
    /// Returns true if the location bar is visible; otherwise, returns false.
    /// </summary>
    public BarProp? Locationbar
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<BarProp>.ValueOrNullFromJs($"{_jsThis}.locationbar");
    }
    
    
    /// <summary>
    /// Returns true if the menu bar is visible; otherwise, returns false.
    /// </summary>
    public BarProp? Menubar
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<BarProp>.ValueOrNullFromJs($"{_jsThis}.menubar");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Name
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.name");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.name = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Navigator? Navigator
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Navigator>.ValueOrNullFromJs($"{_jsThis}.navigator");
    }
    
    
    /// <summary>
    /// Available only in secure contexts.
    /// </summary>
    public JsFunc<Window?, DeviceMotionEvent?, JsObject?>? OnDeviceMotion
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DeviceMotionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondevicemotion");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondevicemotion = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Available only in secure contexts.
    /// </summary>
    public JsFunc<Window?, DeviceOrientationEvent?, JsObject?>? OnDeviceOrientation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DeviceOrientationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondeviceorientation");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondeviceorientation = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public JsFunc<Window?, Event?, JsObject?>? OnOrientationChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onorientationchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onorientationchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? Opener
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsObject>.ValueOrNullFromJs($"{_jsThis}.opener");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.opener = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public double? Orientation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.orientation");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? OuterHeight
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.outerHeight");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? OuterWidth
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.outerWidth");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `scrollX`.")]
    public double? PageXOffset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.pageXOffset");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `scrollY`.")]
    public double? PageYOffset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.pageYOffset");
    }
    
    
    /// <summary>
    /// Refers to either the parent WindowProxy, or itself.
    /// It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.
    /// </summary>
    public Window? Parent
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}.parent");
    }
    
    
    /// <summary>
    /// Returns true if the personal bar is visible; otherwise, returns false.
    /// </summary>
    public BarProp? Personalbar
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<BarProp>.ValueOrNullFromJs($"{_jsThis}.personalbar");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Screen? Screen
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Screen>.ValueOrNullFromJs($"{_jsThis}.screen");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScreenLeft
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.screenLeft");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScreenTop
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.screenTop");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScreenX
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.screenX");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScreenY
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.screenY");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScrollX
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.scrollX");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ScrollY
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.scrollY");
    }
    
    
    /// <summary>
    /// Returns true if the scrollbars are visible; otherwise, returns false.
    /// </summary>
    public BarProp? Scrollbars
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<BarProp>.ValueOrNullFromJs($"{_jsThis}.scrollbars");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Window? Self
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}.self");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public SpeechSynthesis? SpeechSynthesis
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<SpeechSynthesis>.ValueOrNullFromJs($"{_jsThis}.speechSynthesis");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public string? Status
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.status");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.status = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns true if the status bar is visible; otherwise, returns false.
    /// </summary>
    public BarProp? Statusbar
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<BarProp>.ValueOrNullFromJs($"{_jsThis}.statusbar");
    }
    
    
    /// <summary>
    /// Returns true if the toolbar is visible; otherwise, returns false.
    /// </summary>
    public BarProp? Toolbar
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<BarProp>.ValueOrNullFromJs($"{_jsThis}.toolbar");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Window? Top
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}.top");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public VisualViewport? VisualViewport
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<VisualViewport>.ValueOrNullFromJs($"{_jsThis}.visualViewport");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Console? Console
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Console>.ValueOrNullFromJs($"{_jsThis}.console");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.console = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    /* // Skipping existing member Location
    /// <summary>
    /// To be added.
    /// </summary>
    public Location? Location
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Location>.ValueOrNullFromJs($"{_jsThis}.location");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.location = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    */
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, UIEvent?, JsObject?>? OnAbort
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, UIEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onabort");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onabort = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, AnimationEvent?, JsObject?>? OnAnimationCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationcancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationcancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, AnimationEvent?, JsObject?>? OnAnimationEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, AnimationEvent?, JsObject?>? OnAnimationIteration
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationiteration");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationiteration = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, AnimationEvent?, JsObject?>? OnAnimationStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnAuxClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onauxclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onauxclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, FocusEvent?, JsObject?>? OnBlur
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, FocusEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onblur");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onblur = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnCanPlay
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncanplay");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncanplay = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnCanPlayThrough
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncanplaythrough");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncanplaythrough = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnClose
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclose");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclose = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnContextMenu
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncontextmenu");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncontextmenu = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnCueChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncuechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncuechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnDblClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondblclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondblclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, DragEvent?, JsObject?>? OnDrag
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondrag");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondrag = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, DragEvent?, JsObject?>? OnDragEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, DragEvent?, JsObject?>? OnDragEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, DragEvent?, JsObject?>? OnDragLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, DragEvent?, JsObject?>? OnDragOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, DragEvent?, JsObject?>? OnDragStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, DragEvent?, JsObject?>? OnDrop
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondrop");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondrop = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnDurationChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondurationchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondurationchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnEmptied
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onemptied");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onemptied = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnEnded
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onended");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onended = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when an error occurs during object loading.
    /// </summary>
    public OnErrorEventHandlerNonNull? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<OnErrorEventHandlerNonNull>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, FocusEvent?, JsObject?>? OnFocus
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, FocusEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onfocus");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onfocus = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, FormDataEvent?, JsObject?>? OnFormData
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, FormDataEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onformdata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onformdata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnGotPointerCapture
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongotpointercapture");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongotpointercapture = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnInput
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oninput");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oninput = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnInvalid
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oninvalid");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oninvalid = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, KeyboardEvent?, JsObject?>? OnKeyDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeydown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeydown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, KeyboardEvent?, JsObject?>? OnKeyPress
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeypress");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeypress = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, KeyboardEvent?, JsObject?>? OnKeyUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeyup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeyup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnLoad
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnLoadedData
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadeddata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadeddata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnLoadedMetadata
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadedmetadata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadedmetadata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnLoadStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnLostPointerCapture
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onlostpointercapture");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onlostpointercapture = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnMouseDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmousedown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmousedown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnMouseEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnMouseLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnMouseMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmousemove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmousemove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnMouseOut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseout");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseout = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnMouseOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MouseEvent?, JsObject?>? OnMouseUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnPause
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpause");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpause = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnPlay
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onplay");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onplay = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnPlaying
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onplaying");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onplaying = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointercancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointercancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerdown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerdown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointermove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointermove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerOut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerout");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerout = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PointerEvent?, JsObject?>? OnPointerUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, ProgressEvent?, JsObject?>? OnProgress
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, ProgressEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onprogress");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onprogress = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnRateChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onratechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onratechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnReset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onreset");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onreset = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, UIEvent?, JsObject?>? OnResize
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, UIEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onresize");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onresize = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnScroll
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onscroll");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onscroll = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, SecurityPolicyViolationEvent?, JsObject?>? OnSecurityPolicyViolation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, SecurityPolicyViolationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsecuritypolicyviolation");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsecuritypolicyviolation = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnSeeked
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onseeked");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onseeked = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnSeeking
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onseeking");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onseeking = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnSelect
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselect");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselect = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnSelectionChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselectionchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselectionchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnSelectStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselectstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselectstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnSlotChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onslotchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onslotchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnStalled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onstalled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onstalled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, SubmitEvent?, JsObject?>? OnSubmit
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, SubmitEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsubmit");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsubmit = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnSuspend
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsuspend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsuspend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnTimeUpdate
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontimeupdate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontimeupdate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnToggle
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontoggle");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontoggle = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TouchEvent?, JsObject?>? OnTouchCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchcancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchcancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TouchEvent?, JsObject?>? OnTouchEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TouchEvent?, JsObject?>? OnTouchMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchmove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchmove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TouchEvent?, JsObject?>? OnTouchStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TransitionEvent?, JsObject?>? OnTransitionCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitioncancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitioncancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TransitionEvent?, JsObject?>? OnTransitionEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TransitionEvent?, JsObject?>? OnTransitionRun
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionrun");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionrun = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, TransitionEvent?, JsObject?>? OnTransitionStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnVolumeChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onvolumechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onvolumechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnWaiting
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwaiting");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwaiting = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnWebkitAnimationEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnWebkitAnimationIteration
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationiteration");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationiteration = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnWebkitAnimationStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnWebkitTransitionEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkittransitionend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkittransitionend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, WheelEvent?, JsObject?>? OnWheel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, WheelEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwheel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwheel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnAfterPrint
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onafterprint");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onafterprint = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnBeforePrint
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onbeforeprint");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onbeforeprint = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, BeforeUnloadEvent?, JsObject?>? OnBeforeUnload
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, BeforeUnloadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onbeforeunload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onbeforeunload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, GamepadEvent?, JsObject?>? OnGamepadConnected
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, GamepadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongamepadconnected");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongamepadconnected = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, GamepadEvent?, JsObject?>? OnGamepadDisconnected
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, GamepadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongamepaddisconnected");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongamepaddisconnected = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, HashChangeEvent?, JsObject?>? OnHashChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, HashChangeEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onhashchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onhashchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnLanguageChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onlanguagechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onlanguagechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MessageEvent?, JsObject?>? OnMessage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, MessageEvent?, JsObject?>? OnMessageError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessageerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessageerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnOffline
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onoffline");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onoffline = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnOnline
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ononline");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ononline = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PageTransitionEvent?, JsObject?>? OnPageHide
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PageTransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpagehide");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpagehide = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PageTransitionEvent?, JsObject?>? OnPageShow
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PageTransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpageshow");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpageshow = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PopStateEvent?, JsObject?>? OnPopState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PopStateEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpopstate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpopstate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PromiseRejectionEvent?, JsObject?>? OnRejectionHandled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PromiseRejectionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onrejectionhandled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onrejectionhandled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, StorageEvent?, JsObject?>? OnStorage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, StorageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onstorage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onstorage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, PromiseRejectionEvent?, JsObject?>? OnUnhandledRejection
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, PromiseRejectionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onunhandledrejection");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onunhandledrejection = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<Window?, Event?, JsObject?>? OnUnload
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<Window?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onunload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onunload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Storage? LocalStorage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Storage>.ValueOrNullFromJs($"{_jsThis}.localStorage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.localStorage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Available only in secure contexts.
    /// </summary>
    public CacheStorage? Caches
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<CacheStorage>.ValueOrNullFromJs($"{_jsThis}.caches");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.caches = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? CrossOriginIsolated
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.crossOriginIsolated");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.crossOriginIsolated = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Crypto? Crypto
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Crypto>.ValueOrNullFromJs($"{_jsThis}.crypto");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.crypto = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public IDBFactory? IndexedDB
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBFactory>.ValueOrNullFromJs($"{_jsThis}.indexedDB");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.indexedDB = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsSecureContext
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.isSecureContext");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.isSecureContext = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Origin
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.origin");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.origin = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Performance? Performance
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Performance>.ValueOrNullFromJs($"{_jsThis}.performance");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.performance = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Storage? SessionStorage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Storage>.ValueOrNullFromJs($"{_jsThis}.sessionStorage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.sessionStorage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user aborts the download.
    /// </summary>
    JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>? IGlobalEventHandlers.OnAbort
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onabort");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onabort = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? IGlobalEventHandlers.OnAnimationCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationcancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationcancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? IGlobalEventHandlers.OnAnimationEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? IGlobalEventHandlers.OnAnimationIteration
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationiteration");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationiteration = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>? IGlobalEventHandlers.OnAnimationStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, AnimationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onanimationstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onanimationstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnAuxClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onauxclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onauxclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the object loses the input focus.
    /// </summary>
    JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>? IGlobalEventHandlers.OnBlur
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onblur");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onblur = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when playback is possible, but would require further buffering.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnCanPlay
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncanplay");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncanplay = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnCanPlayThrough
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncanplaythrough");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncanplaythrough = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the contents of the object or selection have changed.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user clicks the left mouse button on the object
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnClose
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclose");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclose = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user clicks the right mouse button in the client area, opening the context menu.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnContextMenu
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncontextmenu");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncontextmenu = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnCueChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncuechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncuechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user double-clicks the object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnDblClick
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondblclick");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondblclick = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the source object continuously during a drag operation.
    /// </summary>
    JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? IGlobalEventHandlers.OnDrag
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondrag");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondrag = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the source object when the user releases the mouse at the close of a drag operation.
    /// </summary>
    JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? IGlobalEventHandlers.OnDragEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the target element when the user drags the object to a valid drop target.
    /// </summary>
    JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? IGlobalEventHandlers.OnDragEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
    /// </summary>
    JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? IGlobalEventHandlers.OnDragLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the target element continuously while the user drags the object over a valid drop target.
    /// </summary>
    JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? IGlobalEventHandlers.OnDragOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires on the source object when the user starts to drag a text selection or selected object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? IGlobalEventHandlers.OnDragStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondragstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondragstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>? IGlobalEventHandlers.OnDrop
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, DragEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondrop");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondrop = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the duration attribute is updated.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnDurationChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ondurationchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ondurationchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the media element is reset to its initial state.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnEmptied
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onemptied");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onemptied = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the end of playback is reached.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnEnded
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onended");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onended = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the object receives focus.
    /// </summary>
    JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>? IGlobalEventHandlers.OnFocus
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, FocusEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onfocus");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onfocus = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, FormDataEvent?, JsObject?>? IGlobalEventHandlers.OnFormData
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, FormDataEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onformdata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onformdata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnGotPointerCapture
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongotpointercapture");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongotpointercapture = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnInput
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oninput");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oninput = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnInvalid
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oninvalid");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oninvalid = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user presses a key.
    /// </summary>
    JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>? IGlobalEventHandlers.OnKeyDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeydown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeydown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user presses an alphanumeric key.
    /// </summary>
    [global::System.Obsolete]
    JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>? IGlobalEventHandlers.OnKeyPress
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeypress");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeypress = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user releases a key.
    /// </summary>
    JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>? IGlobalEventHandlers.OnKeyUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, KeyboardEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onkeyup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onkeyup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires immediately after the browser loads the object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnLoad
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when media data is loaded at the current playback position.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnLoadedData
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadeddata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadeddata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the duration and dimensions of the media have been determined.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnLoadedMetadata
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadedmetadata");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadedmetadata = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when Internet Explorer begins looking for media data.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnLoadStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onloadstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onloadstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnLostPointerCapture
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onlostpointercapture");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onlostpointercapture = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user clicks the object with either mouse button.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnMouseDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmousedown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmousedown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnMouseEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnMouseLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user moves the mouse over the object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnMouseMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmousemove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmousemove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user moves the mouse pointer outside the boundaries of the object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnMouseOut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseout");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseout = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user moves the mouse pointer into the object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnMouseOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user releases a mouse button while the mouse is over the object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>? IGlobalEventHandlers.OnMouseUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, MouseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmouseup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmouseup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when playback is paused.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnPause
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpause");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpause = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the play method is requested.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnPlay
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onplay");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onplay = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the audio or video has started playing.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnPlaying
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onplaying");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onplaying = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointercancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointercancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerDown
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerdown");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerdown = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerEnter
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerenter");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerenter = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerLeave
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerleave");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerleave = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointermove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointermove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerOut
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerout");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerout = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerOver
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerover");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerover = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>? IGlobalEventHandlers.OnPointerUp
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, PointerEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpointerup");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpointerup = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs to indicate progress while downloading media data.
    /// </summary>
    JsFunc<GlobalEventHandlers?, ProgressEvent?, JsObject?>? IGlobalEventHandlers.OnProgress
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, ProgressEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onprogress");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onprogress = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the playback rate is increased or decreased.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnRateChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onratechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onratechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user resets a form.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnReset
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onreset");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onreset = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>? IGlobalEventHandlers.OnResize
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, UIEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onresize");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onresize = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the user repositions the scroll box in the scroll bar on the object.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnScroll
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onscroll");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onscroll = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, SecurityPolicyViolationEvent?, JsObject?>? IGlobalEventHandlers.OnSecurityPolicyViolation
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, SecurityPolicyViolationEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsecuritypolicyviolation");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsecuritypolicyviolation = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the seek operation ends.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnSeeked
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onseeked");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onseeked = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the current playback position is moved.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnSeeking
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onseeking");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onseeking = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Fires when the current selection changes.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnSelect
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselect");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselect = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnSelectionChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselectionchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselectionchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnSelectStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onselectstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onselectstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnSlotChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onslotchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onslotchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the download has stopped.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnStalled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onstalled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onstalled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, SubmitEvent?, JsObject?>? IGlobalEventHandlers.OnSubmit
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, SubmitEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsubmit");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsubmit = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs if the load operation has been intentionally halted.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnSuspend
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsuspend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsuspend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs to indicate the current playback position.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnTimeUpdate
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontimeupdate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontimeupdate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnToggle
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontoggle");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontoggle = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? IGlobalEventHandlers.OnTouchCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchcancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchcancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? IGlobalEventHandlers.OnTouchEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? IGlobalEventHandlers.OnTouchMove
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchmove");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchmove = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>? IGlobalEventHandlers.OnTouchStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TouchEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontouchstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontouchstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? IGlobalEventHandlers.OnTransitionCancel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitioncancel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitioncancel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? IGlobalEventHandlers.OnTransitionEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? IGlobalEventHandlers.OnTransitionRun
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionrun");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionrun = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>? IGlobalEventHandlers.OnTransitionStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, TransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ontransitionstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ontransitionstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when the volume is changed, or playback is muted or unmuted.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnVolumeChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onvolumechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onvolumechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Occurs when playback stops because the next frame of a video resource is not available.
    /// </summary>
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnWaiting
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwaiting");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwaiting = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `onanimationend`.")]
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnWebkitAnimationEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `onanimationiteration`.")]
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnWebkitAnimationIteration
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationiteration");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationiteration = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `onanimationstart`.")]
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnWebkitAnimationStart
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkitanimationstart");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkitanimationstart = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete("This is a legacy alias of `ontransitionend`.")]
    JsFunc<GlobalEventHandlers?, Event?, JsObject?>? IGlobalEventHandlers.OnWebkitTransitionEnd
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwebkittransitionend");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwebkittransitionend = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<GlobalEventHandlers?, WheelEvent?, JsObject?>? IGlobalEventHandlers.OnWheel
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<GlobalEventHandlers?, WheelEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onwheel");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onwheel = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, Event?, JsObject?>? IWindowEventHandlers.OnAfterPrint
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onafterprint");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onafterprint = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, Event?, JsObject?>? IWindowEventHandlers.OnBeforePrint
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onbeforeprint");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onbeforeprint = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, BeforeUnloadEvent?, JsObject?>? IWindowEventHandlers.OnBeforeUnload
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, BeforeUnloadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onbeforeunload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onbeforeunload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>? IWindowEventHandlers.OnGamepadConnected
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongamepadconnected");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongamepadconnected = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>? IWindowEventHandlers.OnGamepadDisconnected
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, GamepadEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ongamepaddisconnected");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ongamepaddisconnected = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, HashChangeEvent?, JsObject?>? IWindowEventHandlers.OnHashChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, HashChangeEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onhashchange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onhashchange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, Event?, JsObject?>? IWindowEventHandlers.OnLanguageChange
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onlanguagechange");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onlanguagechange = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>? IWindowEventHandlers.OnMessage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>? IWindowEventHandlers.OnMessageError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessageerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessageerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, Event?, JsObject?>? IWindowEventHandlers.OnOffline
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onoffline");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onoffline = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, Event?, JsObject?>? IWindowEventHandlers.OnOnline
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.ononline");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.ononline = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>? IWindowEventHandlers.OnPageHide
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpagehide");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpagehide = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>? IWindowEventHandlers.OnPageShow
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PageTransitionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpageshow");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpageshow = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, PopStateEvent?, JsObject?>? IWindowEventHandlers.OnPopState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PopStateEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onpopstate");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onpopstate = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>? IWindowEventHandlers.OnRejectionHandled
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onrejectionhandled");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onrejectionhandled = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, StorageEvent?, JsObject?>? IWindowEventHandlers.OnStorage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, StorageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onstorage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onstorage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>? IWindowEventHandlers.OnUnhandledRejection
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, PromiseRejectionEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onunhandledrejection");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onunhandledrejection = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsFunc<WindowEventHandlers?, Event?, JsObject?>? IWindowEventHandlers.OnUnload
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WindowEventHandlers?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onunload");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onunload = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Alert(JsObject? message) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.alert({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(message))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Blur() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.blur()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void CancelIdleCallback(double? handle) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.cancelIdleCallback({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handle))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void CaptureEvents() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.captureEvents()");
    
    
    /// <summary>
    /// Closes the window.
    /// </summary>
    public void Close() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.close()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? Confirm(string? message) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.confirm({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(message))})");
    
    
    /// <summary>
    /// Moves the focus to the window's browsing context, if any.
    /// </summary>
    public void Focus() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.focus()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public CSSStyleDeclaration? GetComputedStyle(IElement? elt, string? pseudoElt) => global::Trungnt2910.Browser.WebAssemblyRuntime<CSSStyleDeclaration>.ValueOrNullFromJs($"{_jsThis}.getComputedStyle({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(elt))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(pseudoElt))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Selection? GetSelection() => global::Trungnt2910.Browser.WebAssemblyRuntime<Selection>.ValueOrNullFromJs($"{_jsThis}.getSelection()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public MediaQueryList? MatchMedia(string? query) => global::Trungnt2910.Browser.WebAssemblyRuntime<MediaQueryList>.ValueOrNullFromJs($"{_jsThis}.matchMedia({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void MoveBy(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.moveBy({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void MoveTo(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.moveTo({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Window? Open(Union<string, URL>? url, string? target, string? features) => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}.open({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(url))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(target))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(features))})");
    
    
    /// <summary>
    /// Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
    /// Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    /// A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
    /// If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
    /// Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
    /// </summary>
    public void PostMessage(JsObject? message, string? targetOrigin, JsArray<Union<ArrayBuffer, MessagePort, ImageBitmap>>? transfer) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.postMessage({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(message))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(targetOrigin))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(transfer))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void PostMessage(JsObject? message, WindowPostMessageOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.postMessage({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(message))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Print() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.print()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Prompt(string? message, string? _default) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.prompt({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(message))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(_default))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Obsolete]
    public void ReleaseEvents() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.releaseEvents()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RequestIdleCallback(IdleRequestCallback? callback, IdleRequestOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.requestIdleCallback({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ResizeBy(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.resizeBy({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ResizeTo(double? width, double? height) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.resizeTo({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(width))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(height))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Scroll(ScrollToOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scroll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Scroll(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scroll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollBy(ScrollToOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollBy({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollBy(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollBy({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollTo(ScrollToOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollTo({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ScrollTo(double? x, double? y) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.scrollTo({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(x))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(y))})");
    
    
    /// <summary>
    /// Cancels the document load.
    /// </summary>
    public void Stop() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.stop()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public override string? ToString() => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.toString()");
    
    
    /// <summary>
    /// Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
    /// </summary>
    public bool? DispatchEvent(Event? @event) => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.dispatchEvent({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(@event))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void CancelAnimationFrame(double? handle) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.cancelAnimationFrame({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handle))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RequestAnimationFrame(FrameRequestCallback? callback) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.requestAnimationFrame({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Atob(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.atob({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Btoa(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.btoa({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearInterval(double? id) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clearInterval({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(id))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearTimeout(double? id) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clearTimeout({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(id))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ImageBitmap>? CreateImageBitmap(Union<HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, Blob, ImageData>? image, ImageBitmapOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ImageBitmap>>.ValueOrNullFromJs($"{_jsThis}.createImageBitmap({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(image))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<Response>? Fetch(Union<Request, string, URL>? input, RequestInit? init) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<Response>>.ValueOrNullFromJs($"{_jsThis}.fetch({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(input))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(init))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void QueueMicrotask(VoidFunction? callback) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.queueMicrotask({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ReportError(JsObject? e) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.reportError({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(e))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SetInterval(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.setInterval({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handler))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(timeout))}, {(string.Join(",", global::System.Linq.Enumerable.Select(arguments ?? global::System.Array.Empty<JsObject>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SetTimeout(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.setTimeout({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handler))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(timeout))}, {(string.Join(",", global::System.Linq.Enumerable.Select(arguments ?? global::System.Array.Empty<JsObject>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? StructuredClone(JsObject? value, StructuredSerializeOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<JsObject>.ValueOrNullFromJs($"{_jsThis}.structuredClone({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IAnimationFrameProvider.CancelAnimationFrame(double? handle) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.cancelAnimationFrame({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handle))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    double? IAnimationFrameProvider.RequestAnimationFrame(FrameRequestCallback? callback) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.requestAnimationFrame({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IGlobalEventHandlers.AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IGlobalEventHandlers.RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IWindowEventHandlers.AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IWindowEventHandlers.RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    string? IWindowOrWorkerGlobalScope.Atob(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.atob({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    string? IWindowOrWorkerGlobalScope.Btoa(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.btoa({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IWindowOrWorkerGlobalScope.ClearInterval(double? id) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clearInterval({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(id))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IWindowOrWorkerGlobalScope.ClearTimeout(double? id) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clearTimeout({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(id))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    Promise<ImageBitmap>? IWindowOrWorkerGlobalScope.CreateImageBitmap(Union<HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, Blob, ImageData>? image, ImageBitmapOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ImageBitmap>>.ValueOrNullFromJs($"{_jsThis}.createImageBitmap({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(image))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ImageBitmap>? CreateImageBitmap(Union<HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, Blob, ImageData>? image, double? sx, double? sy, double? sw, double? sh, ImageBitmapOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ImageBitmap>>.ValueOrNullFromJs($"{_jsThis}.createImageBitmap({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(image))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sx))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sy))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sw))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sh))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    Promise<Response>? IWindowOrWorkerGlobalScope.Fetch(Union<Request, string, URL>? input, RequestInit? init) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<Response>>.ValueOrNullFromJs($"{_jsThis}.fetch({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(input))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(init))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IWindowOrWorkerGlobalScope.QueueMicrotask(VoidFunction? callback) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.queueMicrotask({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    void IWindowOrWorkerGlobalScope.ReportError(JsObject? e) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.reportError({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(e))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    double? IWindowOrWorkerGlobalScope.SetInterval(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.setInterval({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handler))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(timeout))}, {(string.Join(",", global::System.Linq.Enumerable.Select(arguments ?? global::System.Array.Empty<JsObject>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    double? IWindowOrWorkerGlobalScope.SetTimeout(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.setTimeout({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handler))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(timeout))}, {(string.Join(",", global::System.Linq.Enumerable.Select(arguments ?? global::System.Array.Empty<JsObject>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    JsObject? IWindowOrWorkerGlobalScope.StructuredClone(JsObject? value, StructuredSerializeOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<JsObject>.ValueOrNullFromJs($"{_jsThis}.structuredClone({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    [global::System.Runtime.CompilerServices.IndexerName("Indexer")]
    public Window? this[double index]
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}[{(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))}]");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}[{(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))}] = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<UIEvent?> WhenAborted
    {
        add
        {
            _handlersForWhenAbortedOfTypeUIEvent ??= new();
            if (_handlersForWhenAbortedOfTypeUIEvent.Count == 0) AddEventListener("abort", _DispatcherForWhenAbortedOfTypeUIEvent);
            _handlersForWhenAbortedOfTypeUIEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenAbortedOfTypeUIEvent != null)
            {
                _handlersForWhenAbortedOfTypeUIEvent.Remove(value);
                if (_handlersForWhenAbortedOfTypeUIEvent.Count == 0)
                {
                    RemoveEventListener("abort", _DispatcherForWhenAbortedOfTypeUIEvent);
                    _handlersForWhenAbortedOfTypeUIEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenAborted
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<UIEvent?>>? _handlersForWhenAbortedOfTypeUIEvent;
    private void _DispatcherForWhenAbortedOfTypeUIEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForWhenAbortedOfTypeUIEvent!) handler?.Invoke(castedSender, args?.Cast<UIEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationCancel
    {
        add
        {
            _handlersForAnimationCancelOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationCancelOfTypeAnimationEvent.Count == 0) AddEventListener("animationcancel", _DispatcherForAnimationCancelOfTypeAnimationEvent);
            _handlersForAnimationCancelOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationCancelOfTypeAnimationEvent != null)
            {
                _handlersForAnimationCancelOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationCancelOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationcancel", _DispatcherForAnimationCancelOfTypeAnimationEvent);
                    _handlersForAnimationCancelOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationCancelOfTypeAnimationEvent;
    private void _DispatcherForAnimationCancelOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForAnimationCancelOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationEnd
    {
        add
        {
            _handlersForAnimationEndOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationEndOfTypeAnimationEvent.Count == 0) AddEventListener("animationend", _DispatcherForAnimationEndOfTypeAnimationEvent);
            _handlersForAnimationEndOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationEndOfTypeAnimationEvent != null)
            {
                _handlersForAnimationEndOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationEndOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationend", _DispatcherForAnimationEndOfTypeAnimationEvent);
                    _handlersForAnimationEndOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationEndOfTypeAnimationEvent;
    private void _DispatcherForAnimationEndOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForAnimationEndOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationIteration
    {
        add
        {
            _handlersForAnimationIterationOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationIterationOfTypeAnimationEvent.Count == 0) AddEventListener("animationiteration", _DispatcherForAnimationIterationOfTypeAnimationEvent);
            _handlersForAnimationIterationOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationIterationOfTypeAnimationEvent != null)
            {
                _handlersForAnimationIterationOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationIterationOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationiteration", _DispatcherForAnimationIterationOfTypeAnimationEvent);
                    _handlersForAnimationIterationOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationIteration
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationIterationOfTypeAnimationEvent;
    private void _DispatcherForAnimationIterationOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForAnimationIterationOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<AnimationEvent?> AnimationStart
    {
        add
        {
            _handlersForAnimationStartOfTypeAnimationEvent ??= new();
            if (_handlersForAnimationStartOfTypeAnimationEvent.Count == 0) AddEventListener("animationstart", _DispatcherForAnimationStartOfTypeAnimationEvent);
            _handlersForAnimationStartOfTypeAnimationEvent.Add(value);
        }
        remove
        {
            if (_handlersForAnimationStartOfTypeAnimationEvent != null)
            {
                _handlersForAnimationStartOfTypeAnimationEvent.Remove(value);
                if (_handlersForAnimationStartOfTypeAnimationEvent.Count == 0)
                {
                    RemoveEventListener("animationstart", _DispatcherForAnimationStartOfTypeAnimationEvent);
                    _handlersForAnimationStartOfTypeAnimationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AnimationStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<AnimationEvent?>>? _handlersForAnimationStartOfTypeAnimationEvent;
    private void _DispatcherForAnimationStartOfTypeAnimationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForAnimationStartOfTypeAnimationEvent!) handler?.Invoke(castedSender, args?.Cast<AnimationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> AuxClick
    {
        add
        {
            _handlersForAuxClickOfTypeMouseEvent ??= new();
            if (_handlersForAuxClickOfTypeMouseEvent.Count == 0) AddEventListener("auxclick", _DispatcherForAuxClickOfTypeMouseEvent);
            _handlersForAuxClickOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForAuxClickOfTypeMouseEvent != null)
            {
                _handlersForAuxClickOfTypeMouseEvent.Remove(value);
                if (_handlersForAuxClickOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("auxclick", _DispatcherForAuxClickOfTypeMouseEvent);
                    _handlersForAuxClickOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for AuxClick
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForAuxClickOfTypeMouseEvent;
    private void _DispatcherForAuxClickOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForAuxClickOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<InputEvent?> BeforeInput
    {
        add
        {
            _handlersForBeforeInputOfTypeInputEvent ??= new();
            if (_handlersForBeforeInputOfTypeInputEvent.Count == 0) AddEventListener("beforeinput", _DispatcherForBeforeInputOfTypeInputEvent);
            _handlersForBeforeInputOfTypeInputEvent.Add(value);
        }
        remove
        {
            if (_handlersForBeforeInputOfTypeInputEvent != null)
            {
                _handlersForBeforeInputOfTypeInputEvent.Remove(value);
                if (_handlersForBeforeInputOfTypeInputEvent.Count == 0)
                {
                    RemoveEventListener("beforeinput", _DispatcherForBeforeInputOfTypeInputEvent);
                    _handlersForBeforeInputOfTypeInputEvent = null;
                }
            }
        }
    }
    #region Internal event management members for BeforeInput
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<InputEvent?>>? _handlersForBeforeInputOfTypeInputEvent;
    private void _DispatcherForBeforeInputOfTypeInputEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForBeforeInputOfTypeInputEvent!) handler?.Invoke(castedSender, args?.Cast<InputEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> Blurred
    {
        add
        {
            _handlersForBlurredOfTypeFocusEvent ??= new();
            if (_handlersForBlurredOfTypeFocusEvent.Count == 0) AddEventListener("blur", _DispatcherForBlurredOfTypeFocusEvent);
            _handlersForBlurredOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForBlurredOfTypeFocusEvent != null)
            {
                _handlersForBlurredOfTypeFocusEvent.Remove(value);
                if (_handlersForBlurredOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("blur", _DispatcherForBlurredOfTypeFocusEvent);
                    _handlersForBlurredOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Blurred
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForBlurredOfTypeFocusEvent;
    private void _DispatcherForBlurredOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForBlurredOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CanPlay
    {
        add => AddEventListener("canplay", value);
        remove => RemoveEventListener("canplay", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CanPlayThrough
    {
        add => AddEventListener("canplaythrough", value);
        remove => RemoveEventListener("canplaythrough", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Change
    {
        add => AddEventListener("change", value);
        remove => RemoveEventListener("change", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> Clicked
    {
        add
        {
            _handlersForClickedOfTypeMouseEvent ??= new();
            if (_handlersForClickedOfTypeMouseEvent.Count == 0) AddEventListener("click", _DispatcherForClickedOfTypeMouseEvent);
            _handlersForClickedOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForClickedOfTypeMouseEvent != null)
            {
                _handlersForClickedOfTypeMouseEvent.Remove(value);
                if (_handlersForClickedOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("click", _DispatcherForClickedOfTypeMouseEvent);
                    _handlersForClickedOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Clicked
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForClickedOfTypeMouseEvent;
    private void _DispatcherForClickedOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForClickedOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenClosed
    {
        add => AddEventListener("close", value);
        remove => RemoveEventListener("close", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionEnd
    {
        add
        {
            _handlersForCompositionEndOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionEndOfTypeCompositionEvent.Count == 0) AddEventListener("compositionend", _DispatcherForCompositionEndOfTypeCompositionEvent);
            _handlersForCompositionEndOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionEndOfTypeCompositionEvent != null)
            {
                _handlersForCompositionEndOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionEndOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionend", _DispatcherForCompositionEndOfTypeCompositionEvent);
                    _handlersForCompositionEndOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionEndOfTypeCompositionEvent;
    private void _DispatcherForCompositionEndOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForCompositionEndOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionStart
    {
        add
        {
            _handlersForCompositionStartOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionStartOfTypeCompositionEvent.Count == 0) AddEventListener("compositionstart", _DispatcherForCompositionStartOfTypeCompositionEvent);
            _handlersForCompositionStartOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionStartOfTypeCompositionEvent != null)
            {
                _handlersForCompositionStartOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionStartOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionstart", _DispatcherForCompositionStartOfTypeCompositionEvent);
                    _handlersForCompositionStartOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionStartOfTypeCompositionEvent;
    private void _DispatcherForCompositionStartOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForCompositionStartOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CompositionEvent?> CompositionUpdate
    {
        add
        {
            _handlersForCompositionUpdateOfTypeCompositionEvent ??= new();
            if (_handlersForCompositionUpdateOfTypeCompositionEvent.Count == 0) AddEventListener("compositionupdate", _DispatcherForCompositionUpdateOfTypeCompositionEvent);
            _handlersForCompositionUpdateOfTypeCompositionEvent.Add(value);
        }
        remove
        {
            if (_handlersForCompositionUpdateOfTypeCompositionEvent != null)
            {
                _handlersForCompositionUpdateOfTypeCompositionEvent.Remove(value);
                if (_handlersForCompositionUpdateOfTypeCompositionEvent.Count == 0)
                {
                    RemoveEventListener("compositionupdate", _DispatcherForCompositionUpdateOfTypeCompositionEvent);
                    _handlersForCompositionUpdateOfTypeCompositionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for CompositionUpdate
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CompositionEvent?>>? _handlersForCompositionUpdateOfTypeCompositionEvent;
    private void _DispatcherForCompositionUpdateOfTypeCompositionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForCompositionUpdateOfTypeCompositionEvent!) handler?.Invoke(castedSender, args?.Cast<CompositionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> ContextMenu
    {
        add
        {
            _handlersForContextMenuOfTypeMouseEvent ??= new();
            if (_handlersForContextMenuOfTypeMouseEvent.Count == 0) AddEventListener("contextmenu", _DispatcherForContextMenuOfTypeMouseEvent);
            _handlersForContextMenuOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForContextMenuOfTypeMouseEvent != null)
            {
                _handlersForContextMenuOfTypeMouseEvent.Remove(value);
                if (_handlersForContextMenuOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("contextmenu", _DispatcherForContextMenuOfTypeMouseEvent);
                    _handlersForContextMenuOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for ContextMenu
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForContextMenuOfTypeMouseEvent;
    private void _DispatcherForContextMenuOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForContextMenuOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> CueChange
    {
        add => AddEventListener("cuechange", value);
        remove => RemoveEventListener("cuechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> DblClick
    {
        add
        {
            _handlersForDblClickOfTypeMouseEvent ??= new();
            if (_handlersForDblClickOfTypeMouseEvent.Count == 0) AddEventListener("dblclick", _DispatcherForDblClickOfTypeMouseEvent);
            _handlersForDblClickOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForDblClickOfTypeMouseEvent != null)
            {
                _handlersForDblClickOfTypeMouseEvent.Remove(value);
                if (_handlersForDblClickOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("dblclick", _DispatcherForDblClickOfTypeMouseEvent);
                    _handlersForDblClickOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DblClick
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForDblClickOfTypeMouseEvent;
    private void _DispatcherForDblClickOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDblClickOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> Drag
    {
        add
        {
            _handlersForDragOfTypeDragEvent ??= new();
            if (_handlersForDragOfTypeDragEvent.Count == 0) AddEventListener("drag", _DispatcherForDragOfTypeDragEvent);
            _handlersForDragOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragOfTypeDragEvent != null)
            {
                _handlersForDragOfTypeDragEvent.Remove(value);
                if (_handlersForDragOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("drag", _DispatcherForDragOfTypeDragEvent);
                    _handlersForDragOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Drag
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragOfTypeDragEvent;
    private void _DispatcherForDragOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDragOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragEnd
    {
        add
        {
            _handlersForDragEndOfTypeDragEvent ??= new();
            if (_handlersForDragEndOfTypeDragEvent.Count == 0) AddEventListener("dragend", _DispatcherForDragEndOfTypeDragEvent);
            _handlersForDragEndOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragEndOfTypeDragEvent != null)
            {
                _handlersForDragEndOfTypeDragEvent.Remove(value);
                if (_handlersForDragEndOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragend", _DispatcherForDragEndOfTypeDragEvent);
                    _handlersForDragEndOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragEndOfTypeDragEvent;
    private void _DispatcherForDragEndOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDragEndOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragEnter
    {
        add
        {
            _handlersForDragEnterOfTypeDragEvent ??= new();
            if (_handlersForDragEnterOfTypeDragEvent.Count == 0) AddEventListener("dragenter", _DispatcherForDragEnterOfTypeDragEvent);
            _handlersForDragEnterOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragEnterOfTypeDragEvent != null)
            {
                _handlersForDragEnterOfTypeDragEvent.Remove(value);
                if (_handlersForDragEnterOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragenter", _DispatcherForDragEnterOfTypeDragEvent);
                    _handlersForDragEnterOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragEnterOfTypeDragEvent;
    private void _DispatcherForDragEnterOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDragEnterOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragLeave
    {
        add
        {
            _handlersForDragLeaveOfTypeDragEvent ??= new();
            if (_handlersForDragLeaveOfTypeDragEvent.Count == 0) AddEventListener("dragleave", _DispatcherForDragLeaveOfTypeDragEvent);
            _handlersForDragLeaveOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragLeaveOfTypeDragEvent != null)
            {
                _handlersForDragLeaveOfTypeDragEvent.Remove(value);
                if (_handlersForDragLeaveOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragleave", _DispatcherForDragLeaveOfTypeDragEvent);
                    _handlersForDragLeaveOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragLeaveOfTypeDragEvent;
    private void _DispatcherForDragLeaveOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDragLeaveOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragOver
    {
        add
        {
            _handlersForDragOverOfTypeDragEvent ??= new();
            if (_handlersForDragOverOfTypeDragEvent.Count == 0) AddEventListener("dragover", _DispatcherForDragOverOfTypeDragEvent);
            _handlersForDragOverOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragOverOfTypeDragEvent != null)
            {
                _handlersForDragOverOfTypeDragEvent.Remove(value);
                if (_handlersForDragOverOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragover", _DispatcherForDragOverOfTypeDragEvent);
                    _handlersForDragOverOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragOverOfTypeDragEvent;
    private void _DispatcherForDragOverOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDragOverOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> DragStart
    {
        add
        {
            _handlersForDragStartOfTypeDragEvent ??= new();
            if (_handlersForDragStartOfTypeDragEvent.Count == 0) AddEventListener("dragstart", _DispatcherForDragStartOfTypeDragEvent);
            _handlersForDragStartOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDragStartOfTypeDragEvent != null)
            {
                _handlersForDragStartOfTypeDragEvent.Remove(value);
                if (_handlersForDragStartOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("dragstart", _DispatcherForDragStartOfTypeDragEvent);
                    _handlersForDragStartOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DragStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDragStartOfTypeDragEvent;
    private void _DispatcherForDragStartOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDragStartOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DragEvent?> Drop
    {
        add
        {
            _handlersForDropOfTypeDragEvent ??= new();
            if (_handlersForDropOfTypeDragEvent.Count == 0) AddEventListener("drop", _DispatcherForDropOfTypeDragEvent);
            _handlersForDropOfTypeDragEvent.Add(value);
        }
        remove
        {
            if (_handlersForDropOfTypeDragEvent != null)
            {
                _handlersForDropOfTypeDragEvent.Remove(value);
                if (_handlersForDropOfTypeDragEvent.Count == 0)
                {
                    RemoveEventListener("drop", _DispatcherForDropOfTypeDragEvent);
                    _handlersForDropOfTypeDragEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Drop
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DragEvent?>>? _handlersForDropOfTypeDragEvent;
    private void _DispatcherForDropOfTypeDragEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDropOfTypeDragEvent!) handler?.Invoke(castedSender, args?.Cast<DragEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> DurationChange
    {
        add => AddEventListener("durationchange", value);
        remove => RemoveEventListener("durationchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Emptied
    {
        add => AddEventListener("emptied", value);
        remove => RemoveEventListener("emptied", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenEnded
    {
        add => AddEventListener("ended", value);
        remove => RemoveEventListener("ended", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ErrorEvent?> Errored
    {
        add
        {
            _handlersForErroredOfTypeErrorEvent ??= new();
            if (_handlersForErroredOfTypeErrorEvent.Count == 0) AddEventListener("error", _DispatcherForErroredOfTypeErrorEvent);
            _handlersForErroredOfTypeErrorEvent.Add(value);
        }
        remove
        {
            if (_handlersForErroredOfTypeErrorEvent != null)
            {
                _handlersForErroredOfTypeErrorEvent.Remove(value);
                if (_handlersForErroredOfTypeErrorEvent.Count == 0)
                {
                    RemoveEventListener("error", _DispatcherForErroredOfTypeErrorEvent);
                    _handlersForErroredOfTypeErrorEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Errored
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ErrorEvent?>>? _handlersForErroredOfTypeErrorEvent;
    private void _DispatcherForErroredOfTypeErrorEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForErroredOfTypeErrorEvent!) handler?.Invoke(castedSender, args?.Cast<ErrorEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> Focused
    {
        add
        {
            _handlersForFocusedOfTypeFocusEvent ??= new();
            if (_handlersForFocusedOfTypeFocusEvent.Count == 0) AddEventListener("focus", _DispatcherForFocusedOfTypeFocusEvent);
            _handlersForFocusedOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusedOfTypeFocusEvent != null)
            {
                _handlersForFocusedOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusedOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focus", _DispatcherForFocusedOfTypeFocusEvent);
                    _handlersForFocusedOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Focused
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusedOfTypeFocusEvent;
    private void _DispatcherForFocusedOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForFocusedOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> FocusIn
    {
        add
        {
            _handlersForFocusInOfTypeFocusEvent ??= new();
            if (_handlersForFocusInOfTypeFocusEvent.Count == 0) AddEventListener("focusin", _DispatcherForFocusInOfTypeFocusEvent);
            _handlersForFocusInOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusInOfTypeFocusEvent != null)
            {
                _handlersForFocusInOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusInOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focusin", _DispatcherForFocusInOfTypeFocusEvent);
                    _handlersForFocusInOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FocusIn
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusInOfTypeFocusEvent;
    private void _DispatcherForFocusInOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForFocusInOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FocusEvent?> FocusOut
    {
        add
        {
            _handlersForFocusOutOfTypeFocusEvent ??= new();
            if (_handlersForFocusOutOfTypeFocusEvent.Count == 0) AddEventListener("focusout", _DispatcherForFocusOutOfTypeFocusEvent);
            _handlersForFocusOutOfTypeFocusEvent.Add(value);
        }
        remove
        {
            if (_handlersForFocusOutOfTypeFocusEvent != null)
            {
                _handlersForFocusOutOfTypeFocusEvent.Remove(value);
                if (_handlersForFocusOutOfTypeFocusEvent.Count == 0)
                {
                    RemoveEventListener("focusout", _DispatcherForFocusOutOfTypeFocusEvent);
                    _handlersForFocusOutOfTypeFocusEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FocusOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FocusEvent?>>? _handlersForFocusOutOfTypeFocusEvent;
    private void _DispatcherForFocusOutOfTypeFocusEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForFocusOutOfTypeFocusEvent!) handler?.Invoke(castedSender, args?.Cast<FocusEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<FormDataEvent?> FormData
    {
        add
        {
            _handlersForFormDataOfTypeFormDataEvent ??= new();
            if (_handlersForFormDataOfTypeFormDataEvent.Count == 0) AddEventListener("formdata", _DispatcherForFormDataOfTypeFormDataEvent);
            _handlersForFormDataOfTypeFormDataEvent.Add(value);
        }
        remove
        {
            if (_handlersForFormDataOfTypeFormDataEvent != null)
            {
                _handlersForFormDataOfTypeFormDataEvent.Remove(value);
                if (_handlersForFormDataOfTypeFormDataEvent.Count == 0)
                {
                    RemoveEventListener("formdata", _DispatcherForFormDataOfTypeFormDataEvent);
                    _handlersForFormDataOfTypeFormDataEvent = null;
                }
            }
        }
    }
    #region Internal event management members for FormData
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<FormDataEvent?>>? _handlersForFormDataOfTypeFormDataEvent;
    private void _DispatcherForFormDataOfTypeFormDataEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForFormDataOfTypeFormDataEvent!) handler?.Invoke(castedSender, args?.Cast<FormDataEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> GotPointerCapture
    {
        add
        {
            _handlersForGotPointerCaptureOfTypePointerEvent ??= new();
            if (_handlersForGotPointerCaptureOfTypePointerEvent.Count == 0) AddEventListener("gotpointercapture", _DispatcherForGotPointerCaptureOfTypePointerEvent);
            _handlersForGotPointerCaptureOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForGotPointerCaptureOfTypePointerEvent != null)
            {
                _handlersForGotPointerCaptureOfTypePointerEvent.Remove(value);
                if (_handlersForGotPointerCaptureOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("gotpointercapture", _DispatcherForGotPointerCaptureOfTypePointerEvent);
                    _handlersForGotPointerCaptureOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for GotPointerCapture
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForGotPointerCaptureOfTypePointerEvent;
    private void _DispatcherForGotPointerCaptureOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForGotPointerCaptureOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Input
    {
        add => AddEventListener("input", value);
        remove => RemoveEventListener("input", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Invalid
    {
        add => AddEventListener("invalid", value);
        remove => RemoveEventListener("invalid", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyDown
    {
        add
        {
            _handlersForKeyDownOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyDownOfTypeKeyboardEvent.Count == 0) AddEventListener("keydown", _DispatcherForKeyDownOfTypeKeyboardEvent);
            _handlersForKeyDownOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyDownOfTypeKeyboardEvent != null)
            {
                _handlersForKeyDownOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyDownOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keydown", _DispatcherForKeyDownOfTypeKeyboardEvent);
                    _handlersForKeyDownOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyDownOfTypeKeyboardEvent;
    private void _DispatcherForKeyDownOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForKeyDownOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyPress
    {
        add
        {
            _handlersForKeyPressOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyPressOfTypeKeyboardEvent.Count == 0) AddEventListener("keypress", _DispatcherForKeyPressOfTypeKeyboardEvent);
            _handlersForKeyPressOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyPressOfTypeKeyboardEvent != null)
            {
                _handlersForKeyPressOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyPressOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keypress", _DispatcherForKeyPressOfTypeKeyboardEvent);
                    _handlersForKeyPressOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyPress
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyPressOfTypeKeyboardEvent;
    private void _DispatcherForKeyPressOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForKeyPressOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<KeyboardEvent?> KeyUp
    {
        add
        {
            _handlersForKeyUpOfTypeKeyboardEvent ??= new();
            if (_handlersForKeyUpOfTypeKeyboardEvent.Count == 0) AddEventListener("keyup", _DispatcherForKeyUpOfTypeKeyboardEvent);
            _handlersForKeyUpOfTypeKeyboardEvent.Add(value);
        }
        remove
        {
            if (_handlersForKeyUpOfTypeKeyboardEvent != null)
            {
                _handlersForKeyUpOfTypeKeyboardEvent.Remove(value);
                if (_handlersForKeyUpOfTypeKeyboardEvent.Count == 0)
                {
                    RemoveEventListener("keyup", _DispatcherForKeyUpOfTypeKeyboardEvent);
                    _handlersForKeyUpOfTypeKeyboardEvent = null;
                }
            }
        }
    }
    #region Internal event management members for KeyUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<KeyboardEvent?>>? _handlersForKeyUpOfTypeKeyboardEvent;
    private void _DispatcherForKeyUpOfTypeKeyboardEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForKeyUpOfTypeKeyboardEvent!) handler?.Invoke(castedSender, args?.Cast<KeyboardEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Loaded
    {
        add => AddEventListener("load", value);
        remove => RemoveEventListener("load", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadedData
    {
        add => AddEventListener("loadeddata", value);
        remove => RemoveEventListener("loadeddata", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadedMetadata
    {
        add => AddEventListener("loadedmetadata", value);
        remove => RemoveEventListener("loadedmetadata", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LoadStart
    {
        add => AddEventListener("loadstart", value);
        remove => RemoveEventListener("loadstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> LostPointerCapture
    {
        add
        {
            _handlersForLostPointerCaptureOfTypePointerEvent ??= new();
            if (_handlersForLostPointerCaptureOfTypePointerEvent.Count == 0) AddEventListener("lostpointercapture", _DispatcherForLostPointerCaptureOfTypePointerEvent);
            _handlersForLostPointerCaptureOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForLostPointerCaptureOfTypePointerEvent != null)
            {
                _handlersForLostPointerCaptureOfTypePointerEvent.Remove(value);
                if (_handlersForLostPointerCaptureOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("lostpointercapture", _DispatcherForLostPointerCaptureOfTypePointerEvent);
                    _handlersForLostPointerCaptureOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for LostPointerCapture
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForLostPointerCaptureOfTypePointerEvent;
    private void _DispatcherForLostPointerCaptureOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForLostPointerCaptureOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseDown
    {
        add
        {
            _handlersForMouseDownOfTypeMouseEvent ??= new();
            if (_handlersForMouseDownOfTypeMouseEvent.Count == 0) AddEventListener("mousedown", _DispatcherForMouseDownOfTypeMouseEvent);
            _handlersForMouseDownOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseDownOfTypeMouseEvent != null)
            {
                _handlersForMouseDownOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseDownOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mousedown", _DispatcherForMouseDownOfTypeMouseEvent);
                    _handlersForMouseDownOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseDownOfTypeMouseEvent;
    private void _DispatcherForMouseDownOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMouseDownOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseEnter
    {
        add
        {
            _handlersForMouseEnterOfTypeMouseEvent ??= new();
            if (_handlersForMouseEnterOfTypeMouseEvent.Count == 0) AddEventListener("mouseenter", _DispatcherForMouseEnterOfTypeMouseEvent);
            _handlersForMouseEnterOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseEnterOfTypeMouseEvent != null)
            {
                _handlersForMouseEnterOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseEnterOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseenter", _DispatcherForMouseEnterOfTypeMouseEvent);
                    _handlersForMouseEnterOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseEnterOfTypeMouseEvent;
    private void _DispatcherForMouseEnterOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMouseEnterOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseLeave
    {
        add
        {
            _handlersForMouseLeaveOfTypeMouseEvent ??= new();
            if (_handlersForMouseLeaveOfTypeMouseEvent.Count == 0) AddEventListener("mouseleave", _DispatcherForMouseLeaveOfTypeMouseEvent);
            _handlersForMouseLeaveOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseLeaveOfTypeMouseEvent != null)
            {
                _handlersForMouseLeaveOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseLeaveOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseleave", _DispatcherForMouseLeaveOfTypeMouseEvent);
                    _handlersForMouseLeaveOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseLeaveOfTypeMouseEvent;
    private void _DispatcherForMouseLeaveOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMouseLeaveOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseMove
    {
        add
        {
            _handlersForMouseMoveOfTypeMouseEvent ??= new();
            if (_handlersForMouseMoveOfTypeMouseEvent.Count == 0) AddEventListener("mousemove", _DispatcherForMouseMoveOfTypeMouseEvent);
            _handlersForMouseMoveOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseMoveOfTypeMouseEvent != null)
            {
                _handlersForMouseMoveOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseMoveOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mousemove", _DispatcherForMouseMoveOfTypeMouseEvent);
                    _handlersForMouseMoveOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseMoveOfTypeMouseEvent;
    private void _DispatcherForMouseMoveOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMouseMoveOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseOut
    {
        add
        {
            _handlersForMouseOutOfTypeMouseEvent ??= new();
            if (_handlersForMouseOutOfTypeMouseEvent.Count == 0) AddEventListener("mouseout", _DispatcherForMouseOutOfTypeMouseEvent);
            _handlersForMouseOutOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseOutOfTypeMouseEvent != null)
            {
                _handlersForMouseOutOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseOutOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseout", _DispatcherForMouseOutOfTypeMouseEvent);
                    _handlersForMouseOutOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseOutOfTypeMouseEvent;
    private void _DispatcherForMouseOutOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMouseOutOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseOver
    {
        add
        {
            _handlersForMouseOverOfTypeMouseEvent ??= new();
            if (_handlersForMouseOverOfTypeMouseEvent.Count == 0) AddEventListener("mouseover", _DispatcherForMouseOverOfTypeMouseEvent);
            _handlersForMouseOverOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseOverOfTypeMouseEvent != null)
            {
                _handlersForMouseOverOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseOverOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseover", _DispatcherForMouseOverOfTypeMouseEvent);
                    _handlersForMouseOverOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseOverOfTypeMouseEvent;
    private void _DispatcherForMouseOverOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMouseOverOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MouseEvent?> MouseUp
    {
        add
        {
            _handlersForMouseUpOfTypeMouseEvent ??= new();
            if (_handlersForMouseUpOfTypeMouseEvent.Count == 0) AddEventListener("mouseup", _DispatcherForMouseUpOfTypeMouseEvent);
            _handlersForMouseUpOfTypeMouseEvent.Add(value);
        }
        remove
        {
            if (_handlersForMouseUpOfTypeMouseEvent != null)
            {
                _handlersForMouseUpOfTypeMouseEvent.Remove(value);
                if (_handlersForMouseUpOfTypeMouseEvent.Count == 0)
                {
                    RemoveEventListener("mouseup", _DispatcherForMouseUpOfTypeMouseEvent);
                    _handlersForMouseUpOfTypeMouseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MouseUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MouseEvent?>>? _handlersForMouseUpOfTypeMouseEvent;
    private void _DispatcherForMouseUpOfTypeMouseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMouseUpOfTypeMouseEvent!) handler?.Invoke(castedSender, args?.Cast<MouseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenPaused
    {
        add => AddEventListener("pause", value);
        remove => RemoveEventListener("pause", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenPlayed
    {
        add => AddEventListener("play", value);
        remove => RemoveEventListener("play", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Playing
    {
        add => AddEventListener("playing", value);
        remove => RemoveEventListener("playing", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerCancel
    {
        add
        {
            _handlersForPointerCancelOfTypePointerEvent ??= new();
            if (_handlersForPointerCancelOfTypePointerEvent.Count == 0) AddEventListener("pointercancel", _DispatcherForPointerCancelOfTypePointerEvent);
            _handlersForPointerCancelOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerCancelOfTypePointerEvent != null)
            {
                _handlersForPointerCancelOfTypePointerEvent.Remove(value);
                if (_handlersForPointerCancelOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointercancel", _DispatcherForPointerCancelOfTypePointerEvent);
                    _handlersForPointerCancelOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerCancelOfTypePointerEvent;
    private void _DispatcherForPointerCancelOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerCancelOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerDown
    {
        add
        {
            _handlersForPointerDownOfTypePointerEvent ??= new();
            if (_handlersForPointerDownOfTypePointerEvent.Count == 0) AddEventListener("pointerdown", _DispatcherForPointerDownOfTypePointerEvent);
            _handlersForPointerDownOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerDownOfTypePointerEvent != null)
            {
                _handlersForPointerDownOfTypePointerEvent.Remove(value);
                if (_handlersForPointerDownOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerdown", _DispatcherForPointerDownOfTypePointerEvent);
                    _handlersForPointerDownOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerDown
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerDownOfTypePointerEvent;
    private void _DispatcherForPointerDownOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerDownOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerEnter
    {
        add
        {
            _handlersForPointerEnterOfTypePointerEvent ??= new();
            if (_handlersForPointerEnterOfTypePointerEvent.Count == 0) AddEventListener("pointerenter", _DispatcherForPointerEnterOfTypePointerEvent);
            _handlersForPointerEnterOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerEnterOfTypePointerEvent != null)
            {
                _handlersForPointerEnterOfTypePointerEvent.Remove(value);
                if (_handlersForPointerEnterOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerenter", _DispatcherForPointerEnterOfTypePointerEvent);
                    _handlersForPointerEnterOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerEnter
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerEnterOfTypePointerEvent;
    private void _DispatcherForPointerEnterOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerEnterOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerLeave
    {
        add
        {
            _handlersForPointerLeaveOfTypePointerEvent ??= new();
            if (_handlersForPointerLeaveOfTypePointerEvent.Count == 0) AddEventListener("pointerleave", _DispatcherForPointerLeaveOfTypePointerEvent);
            _handlersForPointerLeaveOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerLeaveOfTypePointerEvent != null)
            {
                _handlersForPointerLeaveOfTypePointerEvent.Remove(value);
                if (_handlersForPointerLeaveOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerleave", _DispatcherForPointerLeaveOfTypePointerEvent);
                    _handlersForPointerLeaveOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerLeave
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerLeaveOfTypePointerEvent;
    private void _DispatcherForPointerLeaveOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerLeaveOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerMove
    {
        add
        {
            _handlersForPointerMoveOfTypePointerEvent ??= new();
            if (_handlersForPointerMoveOfTypePointerEvent.Count == 0) AddEventListener("pointermove", _DispatcherForPointerMoveOfTypePointerEvent);
            _handlersForPointerMoveOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerMoveOfTypePointerEvent != null)
            {
                _handlersForPointerMoveOfTypePointerEvent.Remove(value);
                if (_handlersForPointerMoveOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointermove", _DispatcherForPointerMoveOfTypePointerEvent);
                    _handlersForPointerMoveOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerMoveOfTypePointerEvent;
    private void _DispatcherForPointerMoveOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerMoveOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerOut
    {
        add
        {
            _handlersForPointerOutOfTypePointerEvent ??= new();
            if (_handlersForPointerOutOfTypePointerEvent.Count == 0) AddEventListener("pointerout", _DispatcherForPointerOutOfTypePointerEvent);
            _handlersForPointerOutOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerOutOfTypePointerEvent != null)
            {
                _handlersForPointerOutOfTypePointerEvent.Remove(value);
                if (_handlersForPointerOutOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerout", _DispatcherForPointerOutOfTypePointerEvent);
                    _handlersForPointerOutOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerOut
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerOutOfTypePointerEvent;
    private void _DispatcherForPointerOutOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerOutOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerOver
    {
        add
        {
            _handlersForPointerOverOfTypePointerEvent ??= new();
            if (_handlersForPointerOverOfTypePointerEvent.Count == 0) AddEventListener("pointerover", _DispatcherForPointerOverOfTypePointerEvent);
            _handlersForPointerOverOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerOverOfTypePointerEvent != null)
            {
                _handlersForPointerOverOfTypePointerEvent.Remove(value);
                if (_handlersForPointerOverOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerover", _DispatcherForPointerOverOfTypePointerEvent);
                    _handlersForPointerOverOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerOver
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerOverOfTypePointerEvent;
    private void _DispatcherForPointerOverOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerOverOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PointerEvent?> PointerUp
    {
        add
        {
            _handlersForPointerUpOfTypePointerEvent ??= new();
            if (_handlersForPointerUpOfTypePointerEvent.Count == 0) AddEventListener("pointerup", _DispatcherForPointerUpOfTypePointerEvent);
            _handlersForPointerUpOfTypePointerEvent.Add(value);
        }
        remove
        {
            if (_handlersForPointerUpOfTypePointerEvent != null)
            {
                _handlersForPointerUpOfTypePointerEvent.Remove(value);
                if (_handlersForPointerUpOfTypePointerEvent.Count == 0)
                {
                    RemoveEventListener("pointerup", _DispatcherForPointerUpOfTypePointerEvent);
                    _handlersForPointerUpOfTypePointerEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PointerUp
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PointerEvent?>>? _handlersForPointerUpOfTypePointerEvent;
    private void _DispatcherForPointerUpOfTypePointerEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPointerUpOfTypePointerEvent!) handler?.Invoke(castedSender, args?.Cast<PointerEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<ProgressEvent?> Progress
    {
        add
        {
            _handlersForProgressOfTypeProgressEvent ??= new();
            if (_handlersForProgressOfTypeProgressEvent.Count == 0) AddEventListener("progress", _DispatcherForProgressOfTypeProgressEvent);
            _handlersForProgressOfTypeProgressEvent.Add(value);
        }
        remove
        {
            if (_handlersForProgressOfTypeProgressEvent != null)
            {
                _handlersForProgressOfTypeProgressEvent.Remove(value);
                if (_handlersForProgressOfTypeProgressEvent.Count == 0)
                {
                    RemoveEventListener("progress", _DispatcherForProgressOfTypeProgressEvent);
                    _handlersForProgressOfTypeProgressEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Progress
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<ProgressEvent?>>? _handlersForProgressOfTypeProgressEvent;
    private void _DispatcherForProgressOfTypeProgressEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForProgressOfTypeProgressEvent!) handler?.Invoke(castedSender, args?.Cast<ProgressEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> RateChange
    {
        add => AddEventListener("ratechange", value);
        remove => RemoveEventListener("ratechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenReset
    {
        add => AddEventListener("reset", value);
        remove => RemoveEventListener("reset", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<UIEvent?> Resize
    {
        add
        {
            _handlersForResizeOfTypeUIEvent ??= new();
            if (_handlersForResizeOfTypeUIEvent.Count == 0) AddEventListener("resize", _DispatcherForResizeOfTypeUIEvent);
            _handlersForResizeOfTypeUIEvent.Add(value);
        }
        remove
        {
            if (_handlersForResizeOfTypeUIEvent != null)
            {
                _handlersForResizeOfTypeUIEvent.Remove(value);
                if (_handlersForResizeOfTypeUIEvent.Count == 0)
                {
                    RemoveEventListener("resize", _DispatcherForResizeOfTypeUIEvent);
                    _handlersForResizeOfTypeUIEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Resize
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<UIEvent?>>? _handlersForResizeOfTypeUIEvent;
    private void _DispatcherForResizeOfTypeUIEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForResizeOfTypeUIEvent!) handler?.Invoke(castedSender, args?.Cast<UIEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Scrolled
    {
        add => AddEventListener("scroll", value);
        remove => RemoveEventListener("scroll", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SecurityPolicyViolationEvent?> SecurityPolicyViolation
    {
        add
        {
            _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent ??= new();
            if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Count == 0) AddEventListener("securitypolicyviolation", _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent);
            _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Add(value);
        }
        remove
        {
            if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent != null)
            {
                _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Remove(value);
                if (_handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent.Count == 0)
                {
                    RemoveEventListener("securitypolicyviolation", _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent);
                    _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for SecurityPolicyViolation
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SecurityPolicyViolationEvent?>>? _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent;
    private void _DispatcherForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForSecurityPolicyViolationOfTypeSecurityPolicyViolationEvent!) handler?.Invoke(castedSender, args?.Cast<SecurityPolicyViolationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Seeked
    {
        add => AddEventListener("seeked", value);
        remove => RemoveEventListener("seeked", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenSeeking
    {
        add => AddEventListener("seeking", value);
        remove => RemoveEventListener("seeking", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenSelected
    {
        add => AddEventListener("select", value);
        remove => RemoveEventListener("select", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SelectionChange
    {
        add => AddEventListener("selectionchange", value);
        remove => RemoveEventListener("selectionchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SelectStart
    {
        add => AddEventListener("selectstart", value);
        remove => RemoveEventListener("selectstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SlotChange
    {
        add => AddEventListener("slotchange", value);
        remove => RemoveEventListener("slotchange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Stalled
    {
        add => AddEventListener("stalled", value);
        remove => RemoveEventListener("stalled", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<SubmitEvent?> Submitted
    {
        add
        {
            _handlersForSubmittedOfTypeSubmitEvent ??= new();
            if (_handlersForSubmittedOfTypeSubmitEvent.Count == 0) AddEventListener("submit", _DispatcherForSubmittedOfTypeSubmitEvent);
            _handlersForSubmittedOfTypeSubmitEvent.Add(value);
        }
        remove
        {
            if (_handlersForSubmittedOfTypeSubmitEvent != null)
            {
                _handlersForSubmittedOfTypeSubmitEvent.Remove(value);
                if (_handlersForSubmittedOfTypeSubmitEvent.Count == 0)
                {
                    RemoveEventListener("submit", _DispatcherForSubmittedOfTypeSubmitEvent);
                    _handlersForSubmittedOfTypeSubmitEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Submitted
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<SubmitEvent?>>? _handlersForSubmittedOfTypeSubmitEvent;
    private void _DispatcherForSubmittedOfTypeSubmitEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForSubmittedOfTypeSubmitEvent!) handler?.Invoke(castedSender, args?.Cast<SubmitEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Suspend
    {
        add => AddEventListener("suspend", value);
        remove => RemoveEventListener("suspend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> TimeUpdate
    {
        add => AddEventListener("timeupdate", value);
        remove => RemoveEventListener("timeupdate", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Toggle
    {
        add => AddEventListener("toggle", value);
        remove => RemoveEventListener("toggle", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchCancel
    {
        add
        {
            _handlersForTouchCancelOfTypeTouchEvent ??= new();
            if (_handlersForTouchCancelOfTypeTouchEvent.Count == 0) AddEventListener("touchcancel", _DispatcherForTouchCancelOfTypeTouchEvent);
            _handlersForTouchCancelOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchCancelOfTypeTouchEvent != null)
            {
                _handlersForTouchCancelOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchCancelOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchcancel", _DispatcherForTouchCancelOfTypeTouchEvent);
                    _handlersForTouchCancelOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchCancelOfTypeTouchEvent;
    private void _DispatcherForTouchCancelOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTouchCancelOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchEnd
    {
        add
        {
            _handlersForTouchEndOfTypeTouchEvent ??= new();
            if (_handlersForTouchEndOfTypeTouchEvent.Count == 0) AddEventListener("touchend", _DispatcherForTouchEndOfTypeTouchEvent);
            _handlersForTouchEndOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchEndOfTypeTouchEvent != null)
            {
                _handlersForTouchEndOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchEndOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchend", _DispatcherForTouchEndOfTypeTouchEvent);
                    _handlersForTouchEndOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchEndOfTypeTouchEvent;
    private void _DispatcherForTouchEndOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTouchEndOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchMove
    {
        add
        {
            _handlersForTouchMoveOfTypeTouchEvent ??= new();
            if (_handlersForTouchMoveOfTypeTouchEvent.Count == 0) AddEventListener("touchmove", _DispatcherForTouchMoveOfTypeTouchEvent);
            _handlersForTouchMoveOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchMoveOfTypeTouchEvent != null)
            {
                _handlersForTouchMoveOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchMoveOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchmove", _DispatcherForTouchMoveOfTypeTouchEvent);
                    _handlersForTouchMoveOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchMove
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchMoveOfTypeTouchEvent;
    private void _DispatcherForTouchMoveOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTouchMoveOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TouchEvent?> TouchStart
    {
        add
        {
            _handlersForTouchStartOfTypeTouchEvent ??= new();
            if (_handlersForTouchStartOfTypeTouchEvent.Count == 0) AddEventListener("touchstart", _DispatcherForTouchStartOfTypeTouchEvent);
            _handlersForTouchStartOfTypeTouchEvent.Add(value);
        }
        remove
        {
            if (_handlersForTouchStartOfTypeTouchEvent != null)
            {
                _handlersForTouchStartOfTypeTouchEvent.Remove(value);
                if (_handlersForTouchStartOfTypeTouchEvent.Count == 0)
                {
                    RemoveEventListener("touchstart", _DispatcherForTouchStartOfTypeTouchEvent);
                    _handlersForTouchStartOfTypeTouchEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TouchStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TouchEvent?>>? _handlersForTouchStartOfTypeTouchEvent;
    private void _DispatcherForTouchStartOfTypeTouchEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTouchStartOfTypeTouchEvent!) handler?.Invoke(castedSender, args?.Cast<TouchEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionCancel
    {
        add
        {
            _handlersForTransitionCancelOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionCancelOfTypeTransitionEvent.Count == 0) AddEventListener("transitioncancel", _DispatcherForTransitionCancelOfTypeTransitionEvent);
            _handlersForTransitionCancelOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionCancelOfTypeTransitionEvent != null)
            {
                _handlersForTransitionCancelOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionCancelOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitioncancel", _DispatcherForTransitionCancelOfTypeTransitionEvent);
                    _handlersForTransitionCancelOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionCancel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionCancelOfTypeTransitionEvent;
    private void _DispatcherForTransitionCancelOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTransitionCancelOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionEnd
    {
        add
        {
            _handlersForTransitionEndOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionEndOfTypeTransitionEvent.Count == 0) AddEventListener("transitionend", _DispatcherForTransitionEndOfTypeTransitionEvent);
            _handlersForTransitionEndOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionEndOfTypeTransitionEvent != null)
            {
                _handlersForTransitionEndOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionEndOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionend", _DispatcherForTransitionEndOfTypeTransitionEvent);
                    _handlersForTransitionEndOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionEnd
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionEndOfTypeTransitionEvent;
    private void _DispatcherForTransitionEndOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTransitionEndOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionRun
    {
        add
        {
            _handlersForTransitionRunOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionRunOfTypeTransitionEvent.Count == 0) AddEventListener("transitionrun", _DispatcherForTransitionRunOfTypeTransitionEvent);
            _handlersForTransitionRunOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionRunOfTypeTransitionEvent != null)
            {
                _handlersForTransitionRunOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionRunOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionrun", _DispatcherForTransitionRunOfTypeTransitionEvent);
                    _handlersForTransitionRunOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionRun
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionRunOfTypeTransitionEvent;
    private void _DispatcherForTransitionRunOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTransitionRunOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<TransitionEvent?> TransitionStart
    {
        add
        {
            _handlersForTransitionStartOfTypeTransitionEvent ??= new();
            if (_handlersForTransitionStartOfTypeTransitionEvent.Count == 0) AddEventListener("transitionstart", _DispatcherForTransitionStartOfTypeTransitionEvent);
            _handlersForTransitionStartOfTypeTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForTransitionStartOfTypeTransitionEvent != null)
            {
                _handlersForTransitionStartOfTypeTransitionEvent.Remove(value);
                if (_handlersForTransitionStartOfTypeTransitionEvent.Count == 0)
                {
                    RemoveEventListener("transitionstart", _DispatcherForTransitionStartOfTypeTransitionEvent);
                    _handlersForTransitionStartOfTypeTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for TransitionStart
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<TransitionEvent?>>? _handlersForTransitionStartOfTypeTransitionEvent;
    private void _DispatcherForTransitionStartOfTypeTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForTransitionStartOfTypeTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<TransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> VolumeChange
    {
        add => AddEventListener("volumechange", value);
        remove => RemoveEventListener("volumechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Waiting
    {
        add => AddEventListener("waiting", value);
        remove => RemoveEventListener("waiting", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationEnd
    {
        add => AddEventListener("webkitanimationend", value);
        remove => RemoveEventListener("webkitanimationend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationIteration
    {
        add => AddEventListener("webkitanimationiteration", value);
        remove => RemoveEventListener("webkitanimationiteration", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitAnimationStart
    {
        add => AddEventListener("webkitanimationstart", value);
        remove => RemoveEventListener("webkitanimationstart", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WebkitTransitionEnd
    {
        add => AddEventListener("webkittransitionend", value);
        remove => RemoveEventListener("webkittransitionend", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<WheelEvent?> Wheel
    {
        add
        {
            _handlersForWheelOfTypeWheelEvent ??= new();
            if (_handlersForWheelOfTypeWheelEvent.Count == 0) AddEventListener("wheel", _DispatcherForWheelOfTypeWheelEvent);
            _handlersForWheelOfTypeWheelEvent.Add(value);
        }
        remove
        {
            if (_handlersForWheelOfTypeWheelEvent != null)
            {
                _handlersForWheelOfTypeWheelEvent.Remove(value);
                if (_handlersForWheelOfTypeWheelEvent.Count == 0)
                {
                    RemoveEventListener("wheel", _DispatcherForWheelOfTypeWheelEvent);
                    _handlersForWheelOfTypeWheelEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Wheel
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<WheelEvent?>>? _handlersForWheelOfTypeWheelEvent;
    private void _DispatcherForWheelOfTypeWheelEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForWheelOfTypeWheelEvent!) handler?.Invoke(castedSender, args?.Cast<WheelEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> AfterPrint
    {
        add => AddEventListener("afterprint", value);
        remove => RemoveEventListener("afterprint", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> BeforePrint
    {
        add => AddEventListener("beforeprint", value);
        remove => RemoveEventListener("beforeprint", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<BeforeUnloadEvent?> BeforeUnload
    {
        add
        {
            _handlersForBeforeUnloadOfTypeBeforeUnloadEvent ??= new();
            if (_handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Count == 0) AddEventListener("beforeunload", _DispatcherForBeforeUnloadOfTypeBeforeUnloadEvent);
            _handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Add(value);
        }
        remove
        {
            if (_handlersForBeforeUnloadOfTypeBeforeUnloadEvent != null)
            {
                _handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Remove(value);
                if (_handlersForBeforeUnloadOfTypeBeforeUnloadEvent.Count == 0)
                {
                    RemoveEventListener("beforeunload", _DispatcherForBeforeUnloadOfTypeBeforeUnloadEvent);
                    _handlersForBeforeUnloadOfTypeBeforeUnloadEvent = null;
                }
            }
        }
    }
    #region Internal event management members for BeforeUnload
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<BeforeUnloadEvent?>>? _handlersForBeforeUnloadOfTypeBeforeUnloadEvent;
    private void _DispatcherForBeforeUnloadOfTypeBeforeUnloadEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForBeforeUnloadOfTypeBeforeUnloadEvent!) handler?.Invoke(castedSender, args?.Cast<BeforeUnloadEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<GamepadEvent?> GamepadConnected
    {
        add
        {
            _handlersForGamepadConnectedOfTypeGamepadEvent ??= new();
            if (_handlersForGamepadConnectedOfTypeGamepadEvent.Count == 0) AddEventListener("gamepadconnected", _DispatcherForGamepadConnectedOfTypeGamepadEvent);
            _handlersForGamepadConnectedOfTypeGamepadEvent.Add(value);
        }
        remove
        {
            if (_handlersForGamepadConnectedOfTypeGamepadEvent != null)
            {
                _handlersForGamepadConnectedOfTypeGamepadEvent.Remove(value);
                if (_handlersForGamepadConnectedOfTypeGamepadEvent.Count == 0)
                {
                    RemoveEventListener("gamepadconnected", _DispatcherForGamepadConnectedOfTypeGamepadEvent);
                    _handlersForGamepadConnectedOfTypeGamepadEvent = null;
                }
            }
        }
    }
    #region Internal event management members for GamepadConnected
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<GamepadEvent?>>? _handlersForGamepadConnectedOfTypeGamepadEvent;
    private void _DispatcherForGamepadConnectedOfTypeGamepadEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForGamepadConnectedOfTypeGamepadEvent!) handler?.Invoke(castedSender, args?.Cast<GamepadEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<GamepadEvent?> GamepadDisconnected
    {
        add
        {
            _handlersForGamepadDisconnectedOfTypeGamepadEvent ??= new();
            if (_handlersForGamepadDisconnectedOfTypeGamepadEvent.Count == 0) AddEventListener("gamepaddisconnected", _DispatcherForGamepadDisconnectedOfTypeGamepadEvent);
            _handlersForGamepadDisconnectedOfTypeGamepadEvent.Add(value);
        }
        remove
        {
            if (_handlersForGamepadDisconnectedOfTypeGamepadEvent != null)
            {
                _handlersForGamepadDisconnectedOfTypeGamepadEvent.Remove(value);
                if (_handlersForGamepadDisconnectedOfTypeGamepadEvent.Count == 0)
                {
                    RemoveEventListener("gamepaddisconnected", _DispatcherForGamepadDisconnectedOfTypeGamepadEvent);
                    _handlersForGamepadDisconnectedOfTypeGamepadEvent = null;
                }
            }
        }
    }
    #region Internal event management members for GamepadDisconnected
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<GamepadEvent?>>? _handlersForGamepadDisconnectedOfTypeGamepadEvent;
    private void _DispatcherForGamepadDisconnectedOfTypeGamepadEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForGamepadDisconnectedOfTypeGamepadEvent!) handler?.Invoke(castedSender, args?.Cast<GamepadEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<HashChangeEvent?> HashChange
    {
        add
        {
            _handlersForHashChangeOfTypeHashChangeEvent ??= new();
            if (_handlersForHashChangeOfTypeHashChangeEvent.Count == 0) AddEventListener("hashchange", _DispatcherForHashChangeOfTypeHashChangeEvent);
            _handlersForHashChangeOfTypeHashChangeEvent.Add(value);
        }
        remove
        {
            if (_handlersForHashChangeOfTypeHashChangeEvent != null)
            {
                _handlersForHashChangeOfTypeHashChangeEvent.Remove(value);
                if (_handlersForHashChangeOfTypeHashChangeEvent.Count == 0)
                {
                    RemoveEventListener("hashchange", _DispatcherForHashChangeOfTypeHashChangeEvent);
                    _handlersForHashChangeOfTypeHashChangeEvent = null;
                }
            }
        }
    }
    #region Internal event management members for HashChange
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<HashChangeEvent?>>? _handlersForHashChangeOfTypeHashChangeEvent;
    private void _DispatcherForHashChangeOfTypeHashChangeEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForHashChangeOfTypeHashChangeEvent!) handler?.Invoke(castedSender, args?.Cast<HashChangeEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> LanguageChange
    {
        add => AddEventListener("languagechange", value);
        remove => RemoveEventListener("languagechange", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> Message
    {
        add
        {
            _handlersForMessageOfTypeMessageEvent ??= new();
            if (_handlersForMessageOfTypeMessageEvent.Count == 0) AddEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
            _handlersForMessageOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageOfTypeMessageEvent != null)
            {
                _handlersForMessageOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
                    _handlersForMessageOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Message
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageOfTypeMessageEvent;
    private void _DispatcherForMessageOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMessageOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> MessageError
    {
        add
        {
            _handlersForMessageErrorOfTypeMessageEvent ??= new();
            if (_handlersForMessageErrorOfTypeMessageEvent.Count == 0) AddEventListener("messageerror", _DispatcherForMessageErrorOfTypeMessageEvent);
            _handlersForMessageErrorOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageErrorOfTypeMessageEvent != null)
            {
                _handlersForMessageErrorOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageErrorOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("messageerror", _DispatcherForMessageErrorOfTypeMessageEvent);
                    _handlersForMessageErrorOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for MessageError
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageErrorOfTypeMessageEvent;
    private void _DispatcherForMessageErrorOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForMessageErrorOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Offline
    {
        add => AddEventListener("offline", value);
        remove => RemoveEventListener("offline", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Online
    {
        add => AddEventListener("online", value);
        remove => RemoveEventListener("online", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PageTransitionEvent?> PageHide
    {
        add
        {
            _handlersForPageHideOfTypePageTransitionEvent ??= new();
            if (_handlersForPageHideOfTypePageTransitionEvent.Count == 0) AddEventListener("pagehide", _DispatcherForPageHideOfTypePageTransitionEvent);
            _handlersForPageHideOfTypePageTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForPageHideOfTypePageTransitionEvent != null)
            {
                _handlersForPageHideOfTypePageTransitionEvent.Remove(value);
                if (_handlersForPageHideOfTypePageTransitionEvent.Count == 0)
                {
                    RemoveEventListener("pagehide", _DispatcherForPageHideOfTypePageTransitionEvent);
                    _handlersForPageHideOfTypePageTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PageHide
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PageTransitionEvent?>>? _handlersForPageHideOfTypePageTransitionEvent;
    private void _DispatcherForPageHideOfTypePageTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPageHideOfTypePageTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<PageTransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PageTransitionEvent?> PageShow
    {
        add
        {
            _handlersForPageShowOfTypePageTransitionEvent ??= new();
            if (_handlersForPageShowOfTypePageTransitionEvent.Count == 0) AddEventListener("pageshow", _DispatcherForPageShowOfTypePageTransitionEvent);
            _handlersForPageShowOfTypePageTransitionEvent.Add(value);
        }
        remove
        {
            if (_handlersForPageShowOfTypePageTransitionEvent != null)
            {
                _handlersForPageShowOfTypePageTransitionEvent.Remove(value);
                if (_handlersForPageShowOfTypePageTransitionEvent.Count == 0)
                {
                    RemoveEventListener("pageshow", _DispatcherForPageShowOfTypePageTransitionEvent);
                    _handlersForPageShowOfTypePageTransitionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PageShow
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PageTransitionEvent?>>? _handlersForPageShowOfTypePageTransitionEvent;
    private void _DispatcherForPageShowOfTypePageTransitionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPageShowOfTypePageTransitionEvent!) handler?.Invoke(castedSender, args?.Cast<PageTransitionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PopStateEvent?> PopState
    {
        add
        {
            _handlersForPopStateOfTypePopStateEvent ??= new();
            if (_handlersForPopStateOfTypePopStateEvent.Count == 0) AddEventListener("popstate", _DispatcherForPopStateOfTypePopStateEvent);
            _handlersForPopStateOfTypePopStateEvent.Add(value);
        }
        remove
        {
            if (_handlersForPopStateOfTypePopStateEvent != null)
            {
                _handlersForPopStateOfTypePopStateEvent.Remove(value);
                if (_handlersForPopStateOfTypePopStateEvent.Count == 0)
                {
                    RemoveEventListener("popstate", _DispatcherForPopStateOfTypePopStateEvent);
                    _handlersForPopStateOfTypePopStateEvent = null;
                }
            }
        }
    }
    #region Internal event management members for PopState
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PopStateEvent?>>? _handlersForPopStateOfTypePopStateEvent;
    private void _DispatcherForPopStateOfTypePopStateEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForPopStateOfTypePopStateEvent!) handler?.Invoke(castedSender, args?.Cast<PopStateEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PromiseRejectionEvent?> RejectionHandled
    {
        add
        {
            _handlersForRejectionHandledOfTypePromiseRejectionEvent ??= new();
            if (_handlersForRejectionHandledOfTypePromiseRejectionEvent.Count == 0) AddEventListener("rejectionhandled", _DispatcherForRejectionHandledOfTypePromiseRejectionEvent);
            _handlersForRejectionHandledOfTypePromiseRejectionEvent.Add(value);
        }
        remove
        {
            if (_handlersForRejectionHandledOfTypePromiseRejectionEvent != null)
            {
                _handlersForRejectionHandledOfTypePromiseRejectionEvent.Remove(value);
                if (_handlersForRejectionHandledOfTypePromiseRejectionEvent.Count == 0)
                {
                    RemoveEventListener("rejectionhandled", _DispatcherForRejectionHandledOfTypePromiseRejectionEvent);
                    _handlersForRejectionHandledOfTypePromiseRejectionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for RejectionHandled
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PromiseRejectionEvent?>>? _handlersForRejectionHandledOfTypePromiseRejectionEvent;
    private void _DispatcherForRejectionHandledOfTypePromiseRejectionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForRejectionHandledOfTypePromiseRejectionEvent!) handler?.Invoke(castedSender, args?.Cast<PromiseRejectionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<StorageEvent?> Storage
    {
        add
        {
            _handlersForStorageOfTypeStorageEvent ??= new();
            if (_handlersForStorageOfTypeStorageEvent.Count == 0) AddEventListener("storage", _DispatcherForStorageOfTypeStorageEvent);
            _handlersForStorageOfTypeStorageEvent.Add(value);
        }
        remove
        {
            if (_handlersForStorageOfTypeStorageEvent != null)
            {
                _handlersForStorageOfTypeStorageEvent.Remove(value);
                if (_handlersForStorageOfTypeStorageEvent.Count == 0)
                {
                    RemoveEventListener("storage", _DispatcherForStorageOfTypeStorageEvent);
                    _handlersForStorageOfTypeStorageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Storage
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<StorageEvent?>>? _handlersForStorageOfTypeStorageEvent;
    private void _DispatcherForStorageOfTypeStorageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForStorageOfTypeStorageEvent!) handler?.Invoke(castedSender, args?.Cast<StorageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<PromiseRejectionEvent?> UnhandledRejection
    {
        add
        {
            _handlersForUnhandledRejectionOfTypePromiseRejectionEvent ??= new();
            if (_handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Count == 0) AddEventListener("unhandledrejection", _DispatcherForUnhandledRejectionOfTypePromiseRejectionEvent);
            _handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Add(value);
        }
        remove
        {
            if (_handlersForUnhandledRejectionOfTypePromiseRejectionEvent != null)
            {
                _handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Remove(value);
                if (_handlersForUnhandledRejectionOfTypePromiseRejectionEvent.Count == 0)
                {
                    RemoveEventListener("unhandledrejection", _DispatcherForUnhandledRejectionOfTypePromiseRejectionEvent);
                    _handlersForUnhandledRejectionOfTypePromiseRejectionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for UnhandledRejection
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<PromiseRejectionEvent?>>? _handlersForUnhandledRejectionOfTypePromiseRejectionEvent;
    private void _DispatcherForUnhandledRejectionOfTypePromiseRejectionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForUnhandledRejectionOfTypePromiseRejectionEvent!) handler?.Invoke(castedSender, args?.Cast<PromiseRejectionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Unload
    {
        add => AddEventListener("unload", value);
        remove => RemoveEventListener("unload", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> DOMContentLoaded
    {
        add => AddEventListener("DOMContentLoaded", value);
        remove => RemoveEventListener("DOMContentLoaded", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DeviceMotionEvent?> DeviceMotion
    {
        add
        {
            _handlersForDeviceMotionOfTypeDeviceMotionEvent ??= new();
            if (_handlersForDeviceMotionOfTypeDeviceMotionEvent.Count == 0) AddEventListener("devicemotion", _DispatcherForDeviceMotionOfTypeDeviceMotionEvent);
            _handlersForDeviceMotionOfTypeDeviceMotionEvent.Add(value);
        }
        remove
        {
            if (_handlersForDeviceMotionOfTypeDeviceMotionEvent != null)
            {
                _handlersForDeviceMotionOfTypeDeviceMotionEvent.Remove(value);
                if (_handlersForDeviceMotionOfTypeDeviceMotionEvent.Count == 0)
                {
                    RemoveEventListener("devicemotion", _DispatcherForDeviceMotionOfTypeDeviceMotionEvent);
                    _handlersForDeviceMotionOfTypeDeviceMotionEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DeviceMotion
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DeviceMotionEvent?>>? _handlersForDeviceMotionOfTypeDeviceMotionEvent;
    private void _DispatcherForDeviceMotionOfTypeDeviceMotionEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDeviceMotionOfTypeDeviceMotionEvent!) handler?.Invoke(castedSender, args?.Cast<DeviceMotionEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<DeviceOrientationEvent?> DeviceOrientation
    {
        add
        {
            _handlersForDeviceOrientationOfTypeDeviceOrientationEvent ??= new();
            if (_handlersForDeviceOrientationOfTypeDeviceOrientationEvent.Count == 0) AddEventListener("deviceorientation", _DispatcherForDeviceOrientationOfTypeDeviceOrientationEvent);
            _handlersForDeviceOrientationOfTypeDeviceOrientationEvent.Add(value);
        }
        remove
        {
            if (_handlersForDeviceOrientationOfTypeDeviceOrientationEvent != null)
            {
                _handlersForDeviceOrientationOfTypeDeviceOrientationEvent.Remove(value);
                if (_handlersForDeviceOrientationOfTypeDeviceOrientationEvent.Count == 0)
                {
                    RemoveEventListener("deviceorientation", _DispatcherForDeviceOrientationOfTypeDeviceOrientationEvent);
                    _handlersForDeviceOrientationOfTypeDeviceOrientationEvent = null;
                }
            }
        }
    }
    #region Internal event management members for DeviceOrientation
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<DeviceOrientationEvent?>>? _handlersForDeviceOrientationOfTypeDeviceOrientationEvent;
    private void _DispatcherForDeviceOrientationOfTypeDeviceOrientationEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<Window>();
        foreach (var handler in _handlersForDeviceOrientationOfTypeDeviceOrientationEvent!) handler?.Invoke(castedSender, args?.Cast<DeviceOrientationEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> OrientationChange
    {
        add => AddEventListener("orientationchange", value);
        remove => RemoveEventListener("orientationchange", value);
    }
    
    
    /// <inheritdoc/>
    public int Count => global::Trungnt2910.Browser.WebAssemblyRuntime.Int32FromJs($"{_jsThis}.length");
    
    
    /// <inheritdoc/>
    [global::System.Runtime.CompilerServices.IndexerName("Indexer")]
    public Window? this[int index] => global::Trungnt2910.Browser.WebAssemblyRuntime<Window>.ValueOrNullFromJs($"{_jsThis}[{(global::Trungnt2910.Browser.JsObject.ToJsObjectString(index))}]");
    
    
    /// <inheritdoc/>
    public global::System.Collections.Generic.IEnumerator<Window?> GetEnumerator() { for (int i = 0; i < Count; ++i) yield return this[i]; }
    
    
    /// <inheritdoc/>
    global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
    
}
#pragma warning restore CS0108, CS8764, CS8766

