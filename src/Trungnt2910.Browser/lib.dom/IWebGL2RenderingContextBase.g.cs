// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
public interface IWebGL2RenderingContextBase
{
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ACTIVE_UNIFORM_BLOCKS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ALREADY_SIGNALED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ANY_SAMPLES_PASSED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ANY_SAMPLES_PASSED_CONSERVATIVE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT1 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT10 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT11 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT12 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT13 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT14 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT15 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT5 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT6 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT7 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COLOR_ATTACHMENT9 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COMPARE_REF_TO_TEXTURE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CONDITION_SATISFIED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COPY_READ_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COPY_READ_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COPY_WRITE_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? COPY_WRITE_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CURRENT_QUERY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH24_STENCIL8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH32F_STENCIL8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_COMPONENT24 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DEPTH_COMPONENT32F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER0 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER1 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER10 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER11 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER12 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER13 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER14 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER15 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER5 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER6 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER7 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_BUFFER9 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_FRAMEBUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DRAW_FRAMEBUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DYNAMIC_COPY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? DYNAMIC_READ { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_32_UNSIGNED_INT_24_8_REV { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT2x3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT2x4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT3x2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT3x4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT4x2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FLOAT_MAT4x3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAGMENT_SHADER_DERIVATIVE_HINT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_BLUE_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_GREEN_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_RED_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_DEFAULT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? FRAMEBUFFER_INCOMPLETE_MULTISAMPLE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? HALF_FLOAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INTERLEAVED_ATTRIBS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_2_10_10_10_REV { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_SAMPLER_2D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_SAMPLER_2D_ARRAY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_SAMPLER_3D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INT_SAMPLER_CUBE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? INVALID_INDEX { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_3D_TEXTURE_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_ARRAY_TEXTURE_LAYERS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_CLIENT_WAIT_TIMEOUT_WEBGL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_COLOR_ATTACHMENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_COMBINED_UNIFORM_BLOCKS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_DRAW_BUFFERS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_ELEMENTS_INDICES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_ELEMENTS_VERTICES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_ELEMENT_INDEX { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_FRAGMENT_INPUT_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_FRAGMENT_UNIFORM_BLOCKS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_FRAGMENT_UNIFORM_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_PROGRAM_TEXEL_OFFSET { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_SAMPLES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_SERVER_WAIT_TIMEOUT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_TEXTURE_LOD_BIAS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_UNIFORM_BLOCK_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_UNIFORM_BUFFER_BINDINGS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VARYING_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VERTEX_OUTPUT_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VERTEX_UNIFORM_BLOCKS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MAX_VERTEX_UNIFORM_COMPONENTS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MIN { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? MIN_PROGRAM_TEXEL_OFFSET { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? OBJECT_TYPE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PACK_ROW_LENGTH { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PACK_SKIP_PIXELS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PACK_SKIP_ROWS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PIXEL_PACK_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PIXEL_PACK_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PIXEL_UNPACK_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? PIXEL_UNPACK_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? QUERY_RESULT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? QUERY_RESULT_AVAILABLE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R11F_G11F_B10F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R16F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R16I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R16UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R32F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R32I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R32UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R8I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R8UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? R8_SNORM { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RASTERIZER_DISCARD { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? READ_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? READ_FRAMEBUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? READ_FRAMEBUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RED_INTEGER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RENDERBUFFER_SAMPLES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG16F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG16I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG16UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG32F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG32I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG32UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG8I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG8UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG8_SNORM { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB10_A2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB10_A2UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB16F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB16I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB16UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB32F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB32I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB32UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB8I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB8UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB8_SNORM { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB9_E5 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA16F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA16I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA16UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA32F { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA32I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA32UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA8I { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA8UI { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA8_SNORM { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGBA_INTEGER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RGB_INTEGER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? RG_INTEGER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_2D_ARRAY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_2D_ARRAY_SHADOW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_2D_SHADOW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_3D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SAMPLER_CUBE_SHADOW { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SEPARATE_ATTRIBS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SIGNALED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SIGNED_NORMALIZED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SRGB { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SRGB8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SRGB8_ALPHA8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STATIC_COPY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STATIC_READ { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STENCIL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STREAM_COPY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? STREAM_READ { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SYNC_CONDITION { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SYNC_FENCE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SYNC_FLAGS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SYNC_FLUSH_COMMANDS_BIT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SYNC_GPU_COMMANDS_COMPLETE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SYNC_STATUS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_2D_ARRAY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_3D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_BASE_LEVEL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_BINDING_2D_ARRAY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_BINDING_3D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_COMPARE_FUNC { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_COMPARE_MODE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_IMMUTABLE_FORMAT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_IMMUTABLE_LEVELS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_MAX_LEVEL { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_MAX_LOD { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_MIN_LOD { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TEXTURE_WRAP_R { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TIMEOUT_EXPIRED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TIMEOUT_IGNORED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_ACTIVE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_BUFFER_MODE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_BUFFER_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_BUFFER_START { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_PAUSED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? TRANSFORM_FEEDBACK_VARYINGS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_ARRAY_STRIDE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BLOCK_ACTIVE_UNIFORMS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BLOCK_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BLOCK_DATA_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BLOCK_INDEX { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BUFFER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BUFFER_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BUFFER_OFFSET_ALIGNMENT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BUFFER_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_BUFFER_START { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_IS_ROW_MAJOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_MATRIX_STRIDE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_OFFSET { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_SIZE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNIFORM_TYPE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_IMAGE_HEIGHT { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_ROW_LENGTH { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_SKIP_IMAGES { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_SKIP_PIXELS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNPACK_SKIP_ROWS { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNALED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_10F_11F_11F_REV { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_24_8 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_2_10_10_10_REV { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_5_9_9_9_REV { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_SAMPLER_2D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_SAMPLER_2D_ARRAY { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_SAMPLER_3D { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_SAMPLER_CUBE { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_VEC2 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_VEC3 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_INT_VEC4 { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? UNSIGNED_NORMALIZED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ARRAY_BINDING { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_DIVISOR { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? VERTEX_ATTRIB_ARRAY_INTEGER { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public double? WAIT_FAILED { get; }
    /// <summary>
    /// To be added.
    /// </summary>
    public void BeginQuery(double? target, WebGLQuery? query);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BeginTransformFeedback(double? primitiveMode);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindBufferBase(double? target, double? index, WebGLBuffer? buffer);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindBufferRange(double? target, double? index, WebGLBuffer? buffer, double? offset, double? size);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindSampler(double? unit, WebGLSampler? sampler);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindTransformFeedback(double? target, WebGLTransformFeedback? tf);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BindVertexArray(WebGLVertexArrayObject? array);
    /// <summary>
    /// To be added.
    /// </summary>
    public void BlitFramebuffer(double? srcX0, double? srcY0, double? srcX1, double? srcY1, double? dstX0, double? dstY0, double? dstX1, double? dstY1, double? mask, double? filter);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearBufferfi(double? buffer, double? drawbuffer, double? depth, double? stencil);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearBufferfv(double? buffer, double? drawbuffer, Union<Float32Array, JsArray<double>>? values, double? srcOffset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearBufferiv(double? buffer, double? drawbuffer, Union<Int32Array, JsArray<double>>? values, double? srcOffset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearBufferuiv(double? buffer, double? drawbuffer, Union<Uint32Array, JsArray<double>>? values, double? srcOffset);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? ClientWaitSync(WebGLSync? sync, double? flags, double? timeout);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CompressedTexImage3D(double? target, double? level, double? internalformat, double? width, double? height, double? depth, double? border, double? imageSize, double? offset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CompressedTexImage3D(double? target, double? level, double? internalformat, double? width, double? height, double? depth, double? border, ArrayBufferView? srcData, double? srcOffset, double? srcLengthOverride);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CompressedTexSubImage3D(double? target, double? level, double? xoffset, double? yoffset, double? zoffset, double? width, double? height, double? depth, double? format, double? imageSize, double? offset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CompressedTexSubImage3D(double? target, double? level, double? xoffset, double? yoffset, double? zoffset, double? width, double? height, double? depth, double? format, ArrayBufferView? srcData, double? srcOffset, double? srcLengthOverride);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CopyBufferSubData(double? readTarget, double? writeTarget, double? readOffset, double? writeOffset, double? size);
    /// <summary>
    /// To be added.
    /// </summary>
    public void CopyTexSubImage3D(double? target, double? level, double? xoffset, double? yoffset, double? zoffset, double? x, double? y, double? width, double? height);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLQuery? CreateQuery();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLSampler? CreateSampler();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLTransformFeedback? CreateTransformFeedback();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLVertexArrayObject? CreateVertexArray();
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteQuery(WebGLQuery? query);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteSampler(WebGLSampler? sampler);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteSync(WebGLSync? sync);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteTransformFeedback(WebGLTransformFeedback? tf);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DeleteVertexArray(WebGLVertexArrayObject? vertexArray);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DrawArraysInstanced(double? mode, double? first, double? count, double? instanceCount);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DrawBuffers(JsArray<double>? buffers);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DrawElementsInstanced(double? mode, double? count, double? type, double? offset, double? instanceCount);
    /// <summary>
    /// To be added.
    /// </summary>
    public void DrawRangeElements(double? mode, double? start, double? end, double? count, double? type, double? offset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void EndQuery(double? target);
    /// <summary>
    /// To be added.
    /// </summary>
    public void EndTransformFeedback();
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLSync? FenceSync(double? condition, double? flags);
    /// <summary>
    /// To be added.
    /// </summary>
    public void FramebufferTextureLayer(double? target, double? attachment, WebGLTexture? texture, double? level, double? layer);
    /// <summary>
    /// To be added.
    /// </summary>
    public string? GetActiveUniformBlockName(WebGLProgram? program, double? uniformBlockIndex);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetActiveUniformBlockParameter(WebGLProgram? program, double? uniformBlockIndex, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetActiveUniforms(WebGLProgram? program, JsArray<double>? uniformIndices, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public void GetBufferSubData(double? target, double? srcByteOffset, ArrayBufferView? dstBuffer, double? dstOffset, double? length);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GetFragDataLocation(WebGLProgram? program, string? name);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetIndexedParameter(double? target, double? index);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetInternalformatParameter(double? target, double? internalformat, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLQuery? GetQuery(double? target, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetQueryParameter(WebGLQuery? query, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetSamplerParameter(WebGLSampler? sampler, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? GetSyncParameter(WebGLSync? sync, double? pname);
    /// <summary>
    /// To be added.
    /// </summary>
    public WebGLActiveInfo? GetTransformFeedbackVarying(WebGLProgram? program, double? index);
    /// <summary>
    /// To be added.
    /// </summary>
    public double? GetUniformBlockIndex(WebGLProgram? program, string? uniformBlockName);
    /// <summary>
    /// To be added.
    /// </summary>
    public JsArray<double>? GetUniformIndices(WebGLProgram? program, JsArray<string>? uniformNames);
    /// <summary>
    /// To be added.
    /// </summary>
    public void InvalidateFramebuffer(double? target, JsArray<double>? attachments);
    /// <summary>
    /// To be added.
    /// </summary>
    public void InvalidateSubFramebuffer(double? target, JsArray<double>? attachments, double? x, double? y, double? width, double? height);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsQuery(WebGLQuery? query);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsSampler(WebGLSampler? sampler);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsSync(WebGLSync? sync);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsTransformFeedback(WebGLTransformFeedback? tf);
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsVertexArray(WebGLVertexArrayObject? vertexArray);
    /// <summary>
    /// To be added.
    /// </summary>
    public void PauseTransformFeedback();
    /// <summary>
    /// To be added.
    /// </summary>
    public void ReadBuffer(double? src);
    /// <summary>
    /// To be added.
    /// </summary>
    public void RenderbufferStorageMultisample(double? target, double? samples, double? internalformat, double? width, double? height);
    /// <summary>
    /// To be added.
    /// </summary>
    public void ResumeTransformFeedback();
    /// <summary>
    /// To be added.
    /// </summary>
    public void SamplerParameterf(WebGLSampler? sampler, double? pname, double? param);
    /// <summary>
    /// To be added.
    /// </summary>
    public void SamplerParameteri(WebGLSampler? sampler, double? pname, double? param);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexImage3D(double? target, double? level, double? internalformat, double? width, double? height, double? depth, double? border, double? format, double? type, double? pboOffset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexImage3D(double? target, double? level, double? internalformat, double? width, double? height, double? depth, double? border, double? format, double? type, Union<ImageBitmap, ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement>? source);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexImage3D(double? target, double? level, double? internalformat, double? width, double? height, double? depth, double? border, double? format, double? type, ArrayBufferView? srcData);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexImage3D(double? target, double? level, double? internalformat, double? width, double? height, double? depth, double? border, double? format, double? type, ArrayBufferView? srcData, double? srcOffset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexStorage2D(double? target, double? levels, double? internalformat, double? width, double? height);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexStorage3D(double? target, double? levels, double? internalformat, double? width, double? height, double? depth);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexSubImage3D(double? target, double? level, double? xoffset, double? yoffset, double? zoffset, double? width, double? height, double? depth, double? format, double? type, double? pboOffset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexSubImage3D(double? target, double? level, double? xoffset, double? yoffset, double? zoffset, double? width, double? height, double? depth, double? format, double? type, Union<ImageBitmap, ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement>? source);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TexSubImage3D(double? target, double? level, double? xoffset, double? yoffset, double? zoffset, double? width, double? height, double? depth, double? format, double? type, ArrayBufferView? srcData, double? srcOffset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void TransformFeedbackVaryings(WebGLProgram? program, JsArray<string>? varyings, double? bufferMode);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform1ui(WebGLUniformLocation? location, double? v0);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform1uiv(WebGLUniformLocation? location, Union<Uint32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform2ui(WebGLUniformLocation? location, double? v0, double? v1);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform2uiv(WebGLUniformLocation? location, Union<Uint32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform3ui(WebGLUniformLocation? location, double? v0, double? v1, double? v2);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform3uiv(WebGLUniformLocation? location, Union<Uint32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform4ui(WebGLUniformLocation? location, double? v0, double? v1, double? v2, double? v3);
    /// <summary>
    /// To be added.
    /// </summary>
    public void Uniform4uiv(WebGLUniformLocation? location, Union<Uint32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UniformBlockBinding(WebGLProgram? program, double? uniformBlockIndex, double? uniformBlockBinding);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UniformMatrix2x3fv(WebGLUniformLocation? location, bool? transpose, Union<Float32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UniformMatrix2x4fv(WebGLUniformLocation? location, bool? transpose, Union<Float32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UniformMatrix3x2fv(WebGLUniformLocation? location, bool? transpose, Union<Float32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UniformMatrix3x4fv(WebGLUniformLocation? location, bool? transpose, Union<Float32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UniformMatrix4x2fv(WebGLUniformLocation? location, bool? transpose, Union<Float32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void UniformMatrix4x3fv(WebGLUniformLocation? location, bool? transpose, Union<Float32Array, JsArray<double>>? data, double? srcOffset, double? srcLength);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttribDivisor(double? index, double? divisor);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttribI4i(double? index, double? x, double? y, double? z, double? w);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttribI4iv(double? index, Union<Int32Array, JsArray<double>>? values);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttribI4ui(double? index, double? x, double? y, double? z, double? w);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttribI4uiv(double? index, Union<Uint32Array, JsArray<double>>? values);
    /// <summary>
    /// To be added.
    /// </summary>
    public void VertexAttribIPointer(double? index, double? size, double? type, double? stride, double? offset);
    /// <summary>
    /// To be added.
    /// </summary>
    public void WaitSync(WebGLSync? sync, double? flags, double? timeout);
}
#pragma warning restore CS0108, CS8764, CS8766

