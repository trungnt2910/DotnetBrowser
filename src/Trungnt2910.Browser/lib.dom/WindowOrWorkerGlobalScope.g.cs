// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class WindowOrWorkerGlobalScope: JsObject, IWindowOrWorkerGlobalScope
{
    
    /// <summary>
    /// Available only in secure contexts.
    /// </summary>
    public CacheStorage? Caches
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<CacheStorage>.ValueOrNullFromJs($"{_jsThis}.caches");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? CrossOriginIsolated
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.crossOriginIsolated");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Crypto? Crypto
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Crypto>.ValueOrNullFromJs($"{_jsThis}.crypto");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public IDBFactory? IndexedDB
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBFactory>.ValueOrNullFromJs($"{_jsThis}.indexedDB");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public bool? IsSecureContext
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.isSecureContext");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Origin
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.origin");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Performance? Performance
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Performance>.ValueOrNullFromJs($"{_jsThis}.performance");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Atob(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.atob({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Btoa(string? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.btoa({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearInterval(double? id) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clearInterval({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(id))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearTimeout(double? id) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clearTimeout({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(id))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ImageBitmap>? CreateImageBitmap(Union<HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, Blob, ImageData>? image, ImageBitmapOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ImageBitmap>>.ValueOrNullFromJs($"{_jsThis}.createImageBitmap({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(image))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<ImageBitmap>? CreateImageBitmap(Union<HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, Blob, ImageData>? image, double? sx, double? sy, double? sw, double? sh, ImageBitmapOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<ImageBitmap>>.ValueOrNullFromJs($"{_jsThis}.createImageBitmap({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(image))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sx))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sy))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sw))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sh))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public Promise<Response>? Fetch(Union<Request, string, URL>? input, RequestInit? init) => global::Trungnt2910.Browser.WebAssemblyRuntime<Promise<Response>>.ValueOrNullFromJs($"{_jsThis}.fetch({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(input))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(init))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void QueueMicrotask(VoidFunction? callback) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.queueMicrotask({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(callback))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ReportError(JsObject? e) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.reportError({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(e))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SetInterval(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.setInterval({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handler))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(timeout))}, {(string.Join(",", global::System.Linq.Enumerable.Select(arguments ?? global::System.Array.Empty<JsObject>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? SetTimeout(Union<string, Function>? handler, double? timeout, params JsObject?[]? arguments) => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.setTimeout({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(handler))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(timeout))}, {(string.Join(",", global::System.Linq.Enumerable.Select(arguments ?? global::System.Array.Empty<JsObject>(), __arg => global::Trungnt2910.Browser.JsObject.ToJsObjectString(__arg))))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsObject? StructuredClone(JsObject? value, StructuredSerializeOptions? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<JsObject>.ValueOrNullFromJs($"{_jsThis}.structuredClone({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

