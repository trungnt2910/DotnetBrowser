// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)
/// </summary>
[JsObject]
public partial class IDBObjectStore: JsObject
{
    
    /// <summary>
    /// Returns true if the store has a key generator, and false otherwise.
    /// </summary>
    public bool? AutoIncrement
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.boolOrNullFromJs($"{_jsThis}.autoIncrement");
    }
    
    
    /// <summary>
    /// Returns a list of the names of indexes in the store.
    /// </summary>
    public DOMStringList? IndexNames
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMStringList>.ValueOrNullFromJs($"{_jsThis}.indexNames");
    }
    
    
    /// <summary>
    /// Returns the key path of the store, or null if none.
    /// </summary>
    public Union<string, JsArray<string>>? KeyPath
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<Union<string, JsArray<string>>>.ValueOrNullFromJs($"{_jsThis}.keyPath");
    }
    
    
    /// <summary>
    /// Returns the name of the store.
    /// </summary>
    public string? Name
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.name");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.name = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the associated transaction.
    /// </summary>
    public IDBTransaction? Transaction
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBTransaction>.ValueOrNullFromJs($"{_jsThis}.transaction");
    }
    
    
    /// <summary>
    /// Adds or updates a record in store with the given value and key.
    /// If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
    /// If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
    /// If successful, request's result will be the record's key.
    /// </summary>
    public IDBRequest<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>? Add(JsObject? value, Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>? key) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>>.ValueOrNullFromJs($"{_jsThis}.add({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(key))})");
    
    
    /// <summary>
    /// Deletes all records in store.
    /// If successful, request's result will be undefined.
    /// </summary>
    public IDBRequest? Clear() => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest>.ValueOrNullFromJs($"{_jsThis}.clear()");
    
    
    /// <summary>
    /// Retrieves the number of records matching the given key or key range in query.
    /// If successful, request's result will be the count.
    /// </summary>
    public IDBRequest<double>? Count(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<double>>.ValueOrNullFromJs($"{_jsThis}.count({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))})");
    
    
    /// <summary>
    /// Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
    /// Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    /// </summary>
    public IDBIndex? CreateIndex(string? name, Union<string, JsArray<string>>? keyPath, IDBIndexParameters? options) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBIndex>.ValueOrNullFromJs($"{_jsThis}.createIndex({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(keyPath))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// Deletes records in store with the given key or in the given key range in query.
    /// If successful, request's result will be undefined.
    /// </summary>
    public IDBRequest? Delete(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest>.ValueOrNullFromJs($"{_jsThis}.delete({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))})");
    
    
    /// <summary>
    /// Deletes the index in store with the given name.
    /// Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    /// </summary>
    public void DeleteIndex(string? name) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.deleteIndex({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))})");
    
    
    /// <summary>
    /// Retrieves the value of the first record matching the given key or key range in query.
    /// If successful, request's result will be the value, or undefined if there was no matching record.
    /// </summary>
    public IDBRequest<JsObject>? Get(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<JsObject>>.ValueOrNullFromJs($"{_jsThis}.get({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))})");
    
    
    /// <summary>
    /// Retrieves the values of the records matching the given key or key range in query (up to count if given).
    /// If successful, request's result will be an Array of the values.
    /// </summary>
    public IDBRequest<JsArray<JsObject>>? GetAll(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query, double? count) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<JsArray<JsObject>>>.ValueOrNullFromJs($"{_jsThis}.getAll({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(count))})");
    
    
    /// <summary>
    /// Retrieves the keys of records matching the given key or key range in query (up to count if given).
    /// If successful, request's result will be an Array of the keys.
    /// </summary>
    public IDBRequest<JsArray<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>>? GetAllKeys(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query, double? count) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<JsArray<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>>>.ValueOrNullFromJs($"{_jsThis}.getAllKeys({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(count))})");
    
    
    /// <summary>
    /// Retrieves the key of the first record matching the given key or key range in query.
    /// If successful, request's result will be the key, or undefined if there was no matching record.
    /// </summary>
    public IDBRequest<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>>>? GetKey(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>>>>.ValueOrNullFromJs($"{_jsThis}.getKey({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public IDBIndex? Index(string? name) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBIndex>.ValueOrNullFromJs($"{_jsThis}.index({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))})");
    
    
    /// <summary>
    /// Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.
    /// If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.
    /// </summary>
    public IDBRequest<IDBCursorWithValue>? OpenCursor(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query, string? direction) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<IDBCursorWithValue>>.ValueOrNullFromJs($"{_jsThis}.openCursor({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(direction))})");
    
    
    /// <summary>
    /// Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.
    /// If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.
    /// </summary>
    public IDBRequest<IDBCursor>? OpenKeyCursor(Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>, IDBKeyRange>? query, string? direction) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<IDBCursor>>.ValueOrNullFromJs($"{_jsThis}.openKeyCursor({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(query))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(direction))})");
    
    
    /// <summary>
    /// Adds or updates a record in store with the given value and key.
    /// If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
    /// If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
    /// If successful, request's result will be the record's key.
    /// </summary>
    public IDBRequest<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>? Put(JsObject? value, Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>? key) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBRequest<Union<double, string, Date, ArrayBufferView, ArrayBuffer, JsArray<double>, JsArray<string>, JsArray<Date>, JsArray<Union<ArrayBufferView, ArrayBuffer>>>>>.ValueOrNullFromJs($"{_jsThis}.put({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(key))})");
    
}
#pragma warning restore CS0108, CS8764, CS8766

