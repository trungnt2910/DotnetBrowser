// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// This Media Source Extensions API interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.
/// </summary>
[JsObject]
public partial class MediaSource: EventTarget
{
    
    /// <summary>
    /// To be added.
    /// </summary>
    public SourceBufferList? ActiveSourceBuffers
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<SourceBufferList>.ValueOrNullFromJs($"{_jsThis}.activeSourceBuffers");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? Duration
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.duration");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.duration = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaSource?, Event?, JsObject?>? OnSourceClose
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaSource?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsourceclose");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsourceclose = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaSource?, Event?, JsObject?>? OnSourceEnded
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaSource?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsourceended");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsourceended = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<MediaSource?, Event?, JsObject?>? OnSourceOpen
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<MediaSource?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onsourceopen");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onsourceopen = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? ReadyState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.readyState");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public SourceBufferList? SourceBuffers
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<SourceBufferList>.ValueOrNullFromJs($"{_jsThis}.sourceBuffers");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public SourceBuffer? AddSourceBuffer(string? type) => global::Trungnt2910.Browser.WebAssemblyRuntime<SourceBuffer>.ValueOrNullFromJs($"{_jsThis}.addSourceBuffer({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void ClearLiveSeekableRange() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.clearLiveSeekableRange()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void EndOfStream(string? error) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.endOfStream({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(error))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveSourceBuffer(SourceBuffer? sourceBuffer) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeSourceBuffer({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(sourceBuffer))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void SetLiveSeekableRange(double? start, double? end) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.setLiveSeekableRange({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(start))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(end))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SourceClose
    {
        add => AddEventListener("sourceclose", value);
        remove => RemoveEventListener("sourceclose", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SourceEnded
    {
        add => AddEventListener("sourceended", value);
        remove => RemoveEventListener("sourceended", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> SourceOpen
    {
        add => AddEventListener("sourceopen", value);
        remove => RemoveEventListener("sourceopen", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

