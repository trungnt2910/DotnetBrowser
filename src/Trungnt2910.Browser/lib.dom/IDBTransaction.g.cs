// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2022 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// To be added.
/// </summary>
[JsObject]
public partial class IDBTransaction: EventTarget
{
    
    /// <summary>
    /// Returns the transaction's connection.
    /// </summary>
    public IDBDatabase? Db
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBDatabase>.ValueOrNullFromJs($"{_jsThis}.db");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public string? Durability
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.durability");
    }
    
    
    /// <summary>
    /// If the transaction was aborted, returns the error (a DOMException) providing the reason.
    /// </summary>
    public DOMException? Error
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMException>.ValueOrNullFromJs($"{_jsThis}.error");
    }
    
    
    /// <summary>
    /// Returns the mode the transaction was created with ("readonly" or "readwrite"), or "versionchange" for an upgrade transaction.
    /// </summary>
    public string? Mode
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.mode");
    }
    
    
    /// <summary>
    /// Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.
    /// </summary>
    public DOMStringList? ObjectStoreNames
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<DOMStringList>.ValueOrNullFromJs($"{_jsThis}.objectStoreNames");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<IDBTransaction?, Event?, JsObject?>? OnAbort
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<IDBTransaction?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onabort");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onabort = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<IDBTransaction?, Event?, JsObject?>? OnComplete
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<IDBTransaction?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.oncomplete");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.oncomplete = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<IDBTransaction?, Event?, JsObject?>? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<IDBTransaction?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Aborts the transaction. All pending requests will fail with a "AbortError" DOMException and all changes made to the database will be reverted.
    /// </summary>
    public void Abort() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.abort()");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void Commit() => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.commit()");
    
    
    /// <summary>
    /// Returns an IDBObjectStore in the transaction's scope.
    /// </summary>
    public IDBObjectStore? ObjectStore(string? name) => global::Trungnt2910.Browser.WebAssemblyRuntime<IDBObjectStore>.ValueOrNullFromJs($"{_jsThis}.objectStore({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(name))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> WhenAborted
    {
        add => AddEventListener("abort", value);
        remove => RemoveEventListener("abort", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Complete
    {
        add => AddEventListener("complete", value);
        remove => RemoveEventListener("complete", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Errored
    {
        add => AddEventListener("error", value);
        remove => RemoveEventListener("error", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

