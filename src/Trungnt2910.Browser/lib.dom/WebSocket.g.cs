// This file was generated by "LibDomTypeScriptParser, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", from "lib.dom.d.ts".
// Do not edit directly. If you encounter any bugs, please fix the generator's code.
//
// Copyright (C) 2023 Trung Nguyen. All rights reserved.
// Licensed under the MIT License.

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;
using Trungnt2910.Browser.Generators;

namespace Trungnt2910.Browser.Dom;

#pragma warning disable CS0108, CS8764, CS8766
/// <summary>
/// Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
/// </summary>
[JsObject]
public partial class WebSocket: EventTarget
{
    
    /// <summary>
    /// Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:
    /// Can be set, to change how binary data is returned. The default is "blob".
    /// </summary>
    public string? BinaryType
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.binaryType");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.binaryType = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.
    /// If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)
    /// </summary>
    public double? BufferedAmount
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.bufferedAmount");
    }
    
    
    /// <summary>
    /// Returns the extensions selected by the server, if any.
    /// </summary>
    public string? Extensions
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.extensions");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WebSocket?, CloseEvent?, JsObject?>? OnClose
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WebSocket?, CloseEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onclose");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onclose = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WebSocket?, Event?, JsObject?>? OnError
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WebSocket?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onerror");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onerror = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WebSocket?, MessageEvent?, JsObject?>? OnMessage
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WebSocket?, MessageEvent?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onmessage");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onmessage = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public JsFunc<WebSocket?, Event?, JsObject?>? OnOpen
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime<JsFunc<WebSocket?, Event?, JsObject?>>.ValueOrNullFromJs($"{_jsThis}.onopen");
        set => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.onopen = {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(value))}");
    }
    
    
    /// <summary>
    /// Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.
    /// </summary>
    public string? Protocol
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.protocol");
    }
    
    
    /// <summary>
    /// Returns the state of the WebSocket object's connection. It can have the values described below.
    /// </summary>
    public double? ReadyState
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.readyState");
    }
    
    
    /// <summary>
    /// Returns the URL that was used to establish the WebSocket connection.
    /// </summary>
    public string? Url
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.StringOrNullFromJs($"{_jsThis}.url");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CLOSED
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.CLOSED");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CLOSING
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.CLOSING");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? CONNECTING
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.CONNECTING");
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public double? OPEN
    {
        get => global::Trungnt2910.Browser.WebAssemblyRuntime.doubleOrNullFromJs($"{_jsThis}.OPEN");
    }
    
    
    /// <summary>
    /// Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.
    /// </summary>
    public void Close(double? code, string? reason) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.close({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(code))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(reason))})");
    
    
    /// <summary>
    /// Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.
    /// </summary>
    public void Send(Union<string, ArrayBufferLike, Blob, ArrayBufferView>? data) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.send({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(data))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void AddEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, AddEventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.addEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public void RemoveEventListener(string? type, Union<EventListener, EventListenerObject>? listener, Union<bool, EventListenerOptions>? options) => global::Trungnt2910.Browser.WebAssemblyRuntime.InvokeJS($"{_jsThis}.removeEventListener({(global::Trungnt2910.Browser.JsObject.ToJsObjectString(type))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(listener))}, {(global::Trungnt2910.Browser.JsObject.ToJsObjectString(options))})");
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<CloseEvent?> WhenClosed
    {
        add
        {
            _handlersForWhenClosedOfTypeCloseEvent ??= new();
            if (_handlersForWhenClosedOfTypeCloseEvent.Count == 0) AddEventListener("close", _DispatcherForWhenClosedOfTypeCloseEvent);
            _handlersForWhenClosedOfTypeCloseEvent.Add(value);
        }
        remove
        {
            if (_handlersForWhenClosedOfTypeCloseEvent != null)
            {
                _handlersForWhenClosedOfTypeCloseEvent.Remove(value);
                if (_handlersForWhenClosedOfTypeCloseEvent.Count == 0)
                {
                    RemoveEventListener("close", _DispatcherForWhenClosedOfTypeCloseEvent);
                    _handlersForWhenClosedOfTypeCloseEvent = null;
                }
            }
        }
    }
    #region Internal event management members for WhenClosed
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<CloseEvent?>>? _handlersForWhenClosedOfTypeCloseEvent;
    private void _DispatcherForWhenClosedOfTypeCloseEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WebSocket>();
        foreach (var handler in _handlersForWhenClosedOfTypeCloseEvent!) handler?.Invoke(castedSender, args?.Cast<CloseEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Errored
    {
        add => AddEventListener("error", value);
        remove => RemoveEventListener("error", value);
    }
    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<MessageEvent?> Message
    {
        add
        {
            _handlersForMessageOfTypeMessageEvent ??= new();
            if (_handlersForMessageOfTypeMessageEvent.Count == 0) AddEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
            _handlersForMessageOfTypeMessageEvent.Add(value);
        }
        remove
        {
            if (_handlersForMessageOfTypeMessageEvent != null)
            {
                _handlersForMessageOfTypeMessageEvent.Remove(value);
                if (_handlersForMessageOfTypeMessageEvent.Count == 0)
                {
                    RemoveEventListener("message", _DispatcherForMessageOfTypeMessageEvent);
                    _handlersForMessageOfTypeMessageEvent = null;
                }
            }
        }
    }
    #region Internal event management members for Message
    private global::System.Collections.Generic.HashSet<global::System.EventHandler<MessageEvent?>>? _handlersForMessageOfTypeMessageEvent;
    private void _DispatcherForMessageOfTypeMessageEvent(object? sender, Event? args)
    {
        var castedSender = sender;
        if (sender is EventTarget eventTarget) castedSender = eventTarget.Cast<WebSocket>();
        foreach (var handler in _handlersForMessageOfTypeMessageEvent!) handler?.Invoke(castedSender, args?.Cast<MessageEvent>());
    }
    #endregion

    
    
    /// <summary>
    /// To be added.
    /// </summary>
    public event EventHandler<Event?> Open
    {
        add => AddEventListener("open", value);
        remove => RemoveEventListener("open", value);
    }
    
}
#pragma warning restore CS0108, CS8764, CS8766

